[
    {
        "id": 1,
        "title": "1. Two Sum",
        "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
        "exampleInputs1": "nums = [2,7,11,15], target = 9",
        "exampleOutputs1": "[0,1]",
        "exampleInputs2": "nums = [3,2,4], target = 6",
        "exampleOutputs2": "[1,2]",
        "exampleInputs3": "nums = [3,3], target = 6",
        "exampleOutputs3": "[0,1]"
    },
    {
        "id": 7,
        "title": "7. Reverse Integer",
        "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.",
        "exampleInputs1": "x = 123",
        "exampleOutputs1": "321",
        "exampleInputs2": "x = -123",
        "exampleOutputs2": "-321",
        "exampleInputs3": "x = 120",
        "exampleOutputs3": "21",
        "exampleInputs4": "x = 0",
        "exampleOutputs4": "0"
    },
    {
        "id": 9,
        "title": "9. Palindrome Number",
        "description": "Given an integer x, return true if x is palindrome integer.",
        "exampleInputs1": "x = 121",
        "exampleOutputs1": "true",
        "exampleInputs2": "x = -121",
        "exampleOutputs2": "false",
        "exampleInputs3": "x = 10",
        "exampleOutputs3": "false",
        "exampleInputs4": "x = -101",
        "exampleOutputs4": "false"
    },
    {
        "id": 13,
        "title": "13. Roman to Integer",
        "description": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.",
        "exampleInputs1": "Symbol       Value",
        "exampleOutputs1": "I             1",
        "exampleInputs2": "s = \"III\"",
        "exampleOutputs2": "3",
        "exampleInputs3": "s = \"IV\"",
        "exampleOutputs3": "4",
        "exampleInputs4": "s = \"IX\"",
        "exampleOutputs4": "9",
        "exampleInputs5": "s = \"LVIII\"",
        "exampleOutputs5": "58",
        "exampleInputs6": "s = \"MCMXCIV\"",
        "exampleOutputs6": "1994"
    },
    {
        "id": 14,
        "title": "14. Longest Common Prefix",
        "description": "Write a function to find the longest common prefix string amongst an array of strings.",
        "exampleInputs1": "strs = [\"flower\",\"flow\",\"flight\"]",
        "exampleOutputs1": "\"fl\"",
        "exampleInputs2": "strs = [\"dog\",\"racecar\",\"car\"]",
        "exampleOutputs2": "\"\""
    },
    {
        "id": 20,
        "title": "20. Valid Parentheses",
        "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
        "exampleInputs1": "s = \"()\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"()[]{}\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "s = \"(]\"",
        "exampleOutputs3": "false",
        "exampleInputs4": "s = \"([)]\"",
        "exampleOutputs4": "false",
        "exampleInputs5": "s = \"{[]}\"",
        "exampleOutputs5": "true"
    },
    {
        "id": 21,
        "title": "21. Merge Two Sorted Lists",
        "description": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.",
        "exampleInputs1": "l1 = [1,2,4], l2 = [1,3,4]",
        "exampleOutputs1": "[1,1,2,3,4,4]",
        "exampleInputs2": "l1 = [], l2 = []",
        "exampleOutputs2": "[]",
        "exampleInputs3": "l1 = [], l2 = [0]",
        "exampleOutputs3": "[0]"
    },
    {
        "id": 26,
        "title": "26. Remove Duplicates from Sorted Array",
        "description": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.",
        "exampleInputs1": "int[] nums = [...]; // Input array",
        "exampleOutputs1": "int[] expectedNums = [...]; // The expected answer with correct length",
        "exampleInputs2": "nums = [1,1,2]",
        "exampleOutputs2": "2, nums = [1,2,_]",
        "exampleInputs3": "nums = [0,0,1,1,1,2,2,3,3,4]",
        "exampleOutputs3": "5, nums = [0,1,2,3,4,_,_,_,_,_]"
    },
    {
        "id": 27,
        "title": "27. Remove Element",
        "description": "Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.",
        "exampleInputs1": "int[] nums = [...]; // Input array",
        "exampleOutputs1": "int val = ...; // Value to remove",
        "exampleInputs2": "nums = [3,2,2,3], val = 3",
        "exampleOutputs2": "2, nums = [2,2,_,_]",
        "exampleInputs3": "nums = [0,1,2,2,3,0,4,2], val = 2",
        "exampleOutputs3": "5, nums = [0,1,4,0,3,_,_,_]"
    },
    {
        "id": 28,
        "title": "28. Implement strStr()",
        "description": "Implement strStr().",
        "exampleInputs1": "haystack = \"hello\", needle = \"ll\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "haystack = \"aaaaa\", needle = \"bba\"",
        "exampleOutputs2": "-1",
        "exampleInputs3": "haystack = \"\", needle = \"\"",
        "exampleOutputs3": "0"
    },
    {
        "id": 35,
        "title": "35. Search Insert Position",
        "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.",
        "exampleInputs1": "nums = [1,3,5,6], target = 5",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,3,5,6], target = 2",
        "exampleOutputs2": "1",
        "exampleInputs3": "nums = [1,3,5,6], target = 7",
        "exampleOutputs3": "4",
        "exampleInputs4": "nums = [1,3,5,6], target = 0",
        "exampleOutputs4": "0",
        "exampleInputs5": "nums = [1], target = 0",
        "exampleOutputs5": "0"
    },
    {
        "id": 49,
        "title": "49. Group Anagrams",
        "description": "Given an array of strings strs, group the anagrams together. You can return the answer in any order.",
        "exampleInputs1": "strs = ['']",
        "exampleOutputs1": "[['']]",
        "exampleInputs2": "strs = ['a']",
        "exampleOutputs2": "[['a']]",
        "exampleInputs3": "strs = ['eat','tea','tan','ate','nat','bat']",
        "exampleOutputs3": "[['bat'],['nat','tan'],['ate','eat','tea']]"
    },
    {
        "id": 53,
        "title": "53. Maximum Subarray",
        "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
        "exampleInputs1": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "exampleOutputs1": "6",
        "exampleInputs2": "nums = [1]",
        "exampleOutputs2": "1",
        "exampleInputs3": "nums = [5,4,-1,7,8]",
        "exampleOutputs3": "23"
    },
    {
        "id": 58,
        "title": "58. Length of Last Word",
        "description": "Given a string s consisting of some words separated by some number of spaces, return the length of the last word in the string.",
        "exampleInputs1": "s = \"Hello World\"",
        "exampleOutputs1": "5",
        "exampleInputs2": "s = \"   fly me   to   the moon  \"",
        "exampleOutputs2": "4",
        "exampleInputs3": "s = \"luffy is still joyboy\"",
        "exampleOutputs3": "6"
    },
    {
        "id": 66,
        "title": "66. Plus One",
        "description": "You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.",
        "exampleInputs1": "digits = [1,2,3]",
        "exampleOutputs1": "[1,2,4]",
        "exampleInputs2": "digits = [4,3,2,1]",
        "exampleOutputs2": "[4,3,2,2]",
        "exampleInputs3": "digits = [0]",
        "exampleOutputs3": "[1]",
        "exampleInputs4": "digits = [9]",
        "exampleOutputs4": "[1,0]"
    },
    {
        "id": 67,
        "title": "67. Add Binary",
        "description": "Given two binary strings a and b, return their sum as a binary string.",
        "exampleInputs1": "a = \"11\", b = \"1\"",
        "exampleOutputs1": "\"100\"",
        "exampleInputs2": "a = \"1010\", b = \"1011\"",
        "exampleOutputs2": "\"10101\""
    },
    {
        "id": 69,
        "title": "69. Sqrt(x)",
        "description": "Given a non-negative integer x, compute and return the square root of x.",
        "exampleInputs1": "x = 4",
        "exampleOutputs1": "2",
        "exampleInputs2": "x = 8",
        "exampleOutputs2": "2"
    },
    {
        "id": 70,
        "title": "70. Climbing Stairs",
        "description": "You are climbing a staircase. It takes n steps to reach the top.",
        "exampleInputs1": "n = 2",
        "exampleOutputs1": "2",
        "exampleInputs2": "n = 3",
        "exampleOutputs2": "3"
    },
    {
        "id": 83,
        "title": "83. Remove Duplicates from Sorted List",
        "description": "Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.",
        "exampleInputs1": "head = [1,1,2]",
        "exampleOutputs1": "[1,2]",
        "exampleInputs2": "head = [1,1,2,3,3]",
        "exampleOutputs2": "[1,2,3]"
    },
    {
        "id": 88,
        "title": "88. Merge Sorted Array",
        "description": "You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.",
        "exampleInputs1": "nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",
        "exampleOutputs1": "[1,2,2,3,5,6]",
        "exampleInputs2": "nums1 = [1], m = 1, nums2 = [], n = 0",
        "exampleOutputs2": "[1]",
        "exampleInputs3": "nums1 = [0], m = 0, nums2 = [1], n = 1",
        "exampleOutputs3": "[1]"
    },
    {
        "id": 94,
        "title": "94. Binary Tree Inorder Traversal",
        "description": "Given the root of a binary tree, return the inorder traversal of its nodes' values.",
        "exampleInputs1": "root = [1,null,2,3]",
        "exampleOutputs1": "[1,3,2]",
        "exampleInputs2": "root = []",
        "exampleOutputs2": "[]",
        "exampleInputs3": "root = [1]",
        "exampleOutputs3": "[1]",
        "exampleInputs4": "root = [1,2]",
        "exampleOutputs4": "[2,1]",
        "exampleInputs5": "root = [1,null,2]",
        "exampleOutputs5": "[1,2]"
    },
    {
        "id": 100,
        "title": "100. Same Tree",
        "description": "Given the roots of two binary trees p and q, write a function to check if they are the same or not.",
        "exampleInputs1": "p = [1,2,3], q = [1,2,3]",
        "exampleOutputs1": "true",
        "exampleInputs2": "p = [1,2], q = [1,null,2]",
        "exampleOutputs2": "false",
        "exampleInputs3": "p = [1,2,1], q = [1,1,2]",
        "exampleOutputs3": "false"
    },
    {
        "id": 101,
        "title": "101. Symmetric Tree",
        "description": "Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).",
        "exampleInputs1": "root = [1,2,2,3,4,4,3]",
        "exampleOutputs1": "true",
        "exampleInputs2": "root = [1,2,2,null,3,null,3]",
        "exampleOutputs2": "false"
    },
    {
        "id": 104,
        "title": "104. Maximum Depth of Binary Tree",
        "description": "Given the root of a binary tree, return its maximum depth.",
        "exampleInputs1": "root = [3,9,20,null,null,15,7]",
        "exampleOutputs1": "3",
        "exampleInputs2": "root = [1,null,2]",
        "exampleOutputs2": "2",
        "exampleInputs3": "root = []",
        "exampleOutputs3": "0",
        "exampleInputs4": "root = [0]",
        "exampleOutputs4": "1"
    },
    {
        "id": 108,
        "title": "108. Convert Sorted Array to Binary Search Tree",
        "description": "Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.",
        "exampleInputs1": "nums = [-10,-3,0,5,9]",
        "exampleOutputs1": "[0,-3,9,-10,null,5]",
        "exampleInputs2": "nums = [1,3]",
        "exampleOutputs2": "[3,1]"
    },
    {
        "id": 110,
        "title": "110. Balanced Binary Tree",
        "description": "Given a binary tree, determine if it is height-balanced.",
        "exampleInputs1": "root = [3,9,20,null,null,15,7]",
        "exampleOutputs1": "true",
        "exampleInputs2": "root = [1,2,2,3,3,null,null,4,4]",
        "exampleOutputs2": "false",
        "exampleInputs3": "root = []",
        "exampleOutputs3": "true"
    },
    {
        "id": 111,
        "title": "111. Minimum Depth of Binary Tree",
        "description": "Given a binary tree, find its minimum depth.",
        "exampleInputs1": "root = [3,9,20,null,null,15,7]",
        "exampleOutputs1": "2",
        "exampleInputs2": "root = [2,null,3,null,4,null,5,null,6]",
        "exampleOutputs2": "5"
    },
    {
        "id": 112,
        "title": "112. Path Sum",
        "description": "Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.",
        "exampleInputs1": "root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22",
        "exampleOutputs1": "true",
        "exampleInputs2": "root = [1,2,3], targetSum = 5",
        "exampleOutputs2": "false",
        "exampleInputs3": "root = [1,2], targetSum = 0",
        "exampleOutputs3": "false"
    },
    {
        "id": 118,
        "title": "118. Pascal's Triangle",
        "description": "Given an integer numRows, return the first numRows of Pascal's triangle.",
        "exampleInputs1": "numRows = 5",
        "exampleOutputs1": "[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]",
        "exampleInputs2": "numRows = 1",
        "exampleOutputs2": "[[1]]"
    },
    {
        "id": 119,
        "title": "119. Pascal's Triangle II",
        "description": "Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.",
        "exampleInputs1": "rowIndex = 3",
        "exampleOutputs1": "[1,3,3,1]",
        "exampleInputs2": "rowIndex = 0",
        "exampleOutputs2": "[1]",
        "exampleInputs3": "rowIndex = 1",
        "exampleOutputs3": "[1,1]"
    },
    {
        "id": 121,
        "title": "121. Best Time to Buy and Sell Stock",
        "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day.",
        "exampleInputs1": "prices = [7,1,5,3,6,4]",
        "exampleOutputs1": "5",
        "exampleInputs2": "prices = [7,6,4,3,1]",
        "exampleOutputs2": "0"
    },
    {
        "id": 122,
        "title": "122. Best Time to Buy and Sell Stock II",
        "description": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day.",
        "exampleInputs1": "prices = [7,1,5,3,6,4]",
        "exampleOutputs1": "7",
        "exampleInputs2": "prices = [1,2,3,4,5]",
        "exampleOutputs2": "4",
        "exampleInputs3": "prices = [7,6,4,3,1]",
        "exampleOutputs3": "0"
    },
    {
        "id": 125,
        "title": "125. Valid Palindrome",
        "description": "Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.",
        "exampleInputs1": "s = \"A man, a plan, a canal: Panama\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"race a car\"",
        "exampleOutputs2": "false"
    },
    {
        "id": 136,
        "title": "136. Single Number",
        "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.",
        "exampleInputs1": "nums = [2,2,1]",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [4,1,2,1,2]",
        "exampleOutputs2": "4",
        "exampleInputs3": "nums = [1]",
        "exampleOutputs3": "1"
    },
    {
        "id": 141,
        "title": "141. Linked List Cycle",
        "description": "Given head, the head of a linked list, determine if the linked list has a cycle in it.",
        "exampleInputs1": "head = [3,2,0,-4], pos = 1",
        "exampleOutputs1": "true",
        "exampleInputs2": "head = [1,2], pos = 0",
        "exampleOutputs2": "true",
        "exampleInputs3": "head = [1], pos = -1",
        "exampleOutputs3": "false"
    },
    {
        "id": 144,
        "title": "144. Binary Tree Preorder Traversal",
        "description": "Given the root of a binary tree, return the preorder traversal of its nodes' values.",
        "exampleInputs1": "root = [1,null,2,3]",
        "exampleOutputs1": "[1,2,3]",
        "exampleInputs2": "root = []",
        "exampleOutputs2": "[]",
        "exampleInputs3": "root = [1]",
        "exampleOutputs3": "[1]",
        "exampleInputs4": "root = [1,2]",
        "exampleOutputs4": "[1,2]",
        "exampleInputs5": "root = [1,null,2]",
        "exampleOutputs5": "[1,2]"
    },
    {
        "id": 145,
        "title": "145. Binary Tree Postorder Traversal",
        "description": "Given the root of a binary tree, return the postorder traversal of its nodes' values.",
        "exampleInputs1": "root = [1,null,2,3]",
        "exampleOutputs1": "[3,2,1]",
        "exampleInputs2": "root = []",
        "exampleOutputs2": "[]",
        "exampleInputs3": "root = [1]",
        "exampleOutputs3": "[1]",
        "exampleInputs4": "root = [1,2]",
        "exampleOutputs4": "[2,1]",
        "exampleInputs5": "root = [1,null,2]",
        "exampleOutputs5": "[2,1]"
    },
    {
        "id": 155,
        "title": "155. Min Stack",
        "description": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]"
    },
    {
        "id": 160,
        "title": "160. Intersection of Two Linked Lists",
        "description": "Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.",
        "exampleInputs1": "intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3",
        "exampleOutputs1": "Intersected at '8'",
        "exampleInputs2": "intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1",
        "exampleOutputs2": "Intersected at '2'",
        "exampleInputs3": "intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2",
        "exampleOutputs3": "No intersection"
    },
    {
        "id": 167,
        "title": "167. Two Sum II - Input array is sorted",
        "description": "Given an array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number.",
        "exampleInputs1": "numbers = [2,7,11,15], target = 9",
        "exampleOutputs1": "[1,2]",
        "exampleInputs2": "numbers = [2,3,4], target = 6",
        "exampleOutputs2": "[1,3]",
        "exampleInputs3": "numbers = [-1,0], target = -1",
        "exampleOutputs3": "[1,2]"
    },
    {
        "id": 168,
        "title": "168. Excel Sheet Column Title",
        "description": "Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.",
        "exampleInputs1": "A -> 1",
        "exampleOutputs1": "B -> 2",
        "exampleInputs2": "columnNumber = 1",
        "exampleOutputs2": "\"A\"",
        "exampleInputs3": "columnNumber = 28",
        "exampleOutputs3": "\"AB\"",
        "exampleInputs4": "columnNumber = 701",
        "exampleOutputs4": "\"ZY\"",
        "exampleInputs5": "columnNumber = 2147483647",
        "exampleOutputs5": "\"FXSHRXW\""
    },
    {
        "id": 169,
        "title": "169. Majority Element",
        "description": "Given an array nums of size n, return the majority element.",
        "exampleInputs1": "nums = [3,2,3]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [2,2,1,1,1,2,2]",
        "exampleOutputs2": "2"
    },
    {
        "id": 171,
        "title": "171. Excel Sheet Column Number",
        "description": "Given a string columnTitle that represents the column title as appear in an Excel sheet, return its corresponding column number.",
        "exampleInputs1": "A -> 1",
        "exampleOutputs1": "B -> 2",
        "exampleInputs2": "columnTitle = \"A\"",
        "exampleOutputs2": "1",
        "exampleInputs3": "columnTitle = \"AB\"",
        "exampleOutputs3": "28",
        "exampleInputs4": "columnTitle = \"ZY\"",
        "exampleOutputs4": "701",
        "exampleInputs5": "columnTitle = \"FXSHRXW\"",
        "exampleOutputs5": "2147483647"
    },
    {
        "id": 172,
        "title": "172. Factorial Trailing Zeroes",
        "description": "Given an integer n, return the number of trailing zeroes in n!.",
        "exampleInputs1": "n = 3",
        "exampleOutputs1": "0",
        "exampleInputs2": "n = 5",
        "exampleOutputs2": "1",
        "exampleInputs3": "n = 0",
        "exampleOutputs3": "0"
    },
    {
        "id": 190,
        "title": "190. Reverse Bits",
        "description": "Reverse bits of a given 32 bits unsigned integer.",
        "exampleInputs1": "n = 00000010100101000001111010011100",
        "exampleOutputs1": "964176192 (00111001011110000010100101000000)",
        "exampleInputs2": "n = 11111111111111111111111111111101",
        "exampleOutputs2": "3221225471 (10111111111111111111111111111111)"
    },
    {
        "id": 191,
        "title": "191. Number of 1 Bits",
        "description": "Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).",
        "exampleInputs1": "n = 00000000000000000000000000001011",
        "exampleOutputs1": "3",
        "exampleInputs2": "n = 00000000000000000000000010000000",
        "exampleOutputs2": "1",
        "exampleInputs3": "n = 11111111111111111111111111111101",
        "exampleOutputs3": "31"
    },
    {
        "id": 202,
        "title": "202. Happy Number",
        "description": "Write an algorithm to determine if a number n is happy.",
        "exampleInputs1": "n = 19",
        "exampleOutputs1": "true",
        "exampleInputs2": "n = 2",
        "exampleOutputs2": "false"
    },
    {
        "id": 203,
        "title": "203. Remove Linked List Elements",
        "description": "Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.",
        "exampleInputs1": "head = [1,2,6,3,4,5,6], val = 6",
        "exampleOutputs1": "[1,2,3,4,5]",
        "exampleInputs2": "head = [], val = 1",
        "exampleOutputs2": "[]",
        "exampleInputs3": "head = [7,7,7,7], val = 7",
        "exampleOutputs3": "[]"
    },
    {
        "id": 204,
        "title": "204. Count Primes",
        "description": "Count the number of prime numbers less than a non-negative number, n.",
        "exampleInputs1": "n = 10",
        "exampleOutputs1": "4",
        "exampleInputs2": "n = 0",
        "exampleOutputs2": "0",
        "exampleInputs3": "n = 1",
        "exampleOutputs3": "0"
    },
    {
        "id": 205,
        "title": "205. Isomorphic Strings",
        "description": "Given two strings s and t, determine if they are isomorphic.",
        "exampleInputs1": "s = \"egg\", t = \"add\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"foo\", t = \"bar\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "s = \"paper\", t = \"title\"",
        "exampleOutputs3": "true"
    },
    {
        "id": 206,
        "title": "206. Reverse Linked List",
        "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.",
        "exampleInputs1": "head = [1,2,3,4,5]",
        "exampleOutputs1": "[5,4,3,2,1]",
        "exampleInputs2": "head = [1,2]",
        "exampleOutputs2": "[2,1]",
        "exampleInputs3": "head = []",
        "exampleOutputs3": "[]"
    },
    {
        "id": 217,
        "title": "217. Contains Duplicate",
        "description": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.",
        "exampleInputs1": "nums = [1,2,3,1]",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [1,2,3,4]",
        "exampleOutputs2": "false",
        "exampleInputs3": "nums = [1,1,1,3,3,4,3,2,4,2]",
        "exampleOutputs3": "true"
    },
    {
        "id": 219,
        "title": "219. Contains Duplicate II",
        "description": "Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.",
        "exampleInputs1": "nums = [1,2,3,1], k = 3",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [1,0,1,1], k = 1",
        "exampleOutputs2": "true",
        "exampleInputs3": "nums = [1,2,3,1,2,3], k = 2",
        "exampleOutputs3": "false"
    },
    {
        "id": 225,
        "title": "225. Implement Stack using Queues",
        "description": "Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]"
    },
    {
        "id": 226,
        "title": "226. Invert Binary Tree",
        "description": "Given the root of a binary tree, invert the tree, and return its root.",
        "exampleInputs1": "root = [4,2,7,1,3,6,9]",
        "exampleOutputs1": "[4,7,2,9,6,3,1]",
        "exampleInputs2": "root = [2,1,3]",
        "exampleOutputs2": "[2,3,1]",
        "exampleInputs3": "root = []",
        "exampleOutputs3": "[]"
    },
    {
        "id": 228,
        "title": "228. Summary Ranges",
        "description": "You are given a sorted unique integer array nums.",
        "exampleInputs1": "nums = [0,1,2,4,5,7]",
        "exampleOutputs1": "[\"0->2\",\"4->5\",\"7\"]",
        "exampleInputs2": "nums = [0,2,3,4,6,8,9]",
        "exampleOutputs2": "[\"0\",\"2->4\",\"6\",\"8->9\"]",
        "exampleInputs3": "nums = []",
        "exampleOutputs3": "[]",
        "exampleInputs4": "nums = [-1]",
        "exampleOutputs4": "[\"-1\"]",
        "exampleInputs5": "nums = [0]",
        "exampleOutputs5": "[\"0\"]"
    },
    {
        "id": 231,
        "title": "231. Power of Two",
        "description": "Given an integer n, return true if it is a power of two. Otherwise, return false.",
        "exampleInputs1": "n = 1",
        "exampleOutputs1": "true",
        "exampleInputs2": "n = 16",
        "exampleOutputs2": "true",
        "exampleInputs3": "n = 3",
        "exampleOutputs3": "false",
        "exampleInputs4": "n = 4",
        "exampleOutputs4": "true",
        "exampleInputs5": "n = 5",
        "exampleOutputs5": "false"
    },
    {
        "id": 232,
        "title": "232. Implement Queue using Stacks",
        "description": "Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]"
    },
    {
        "id": 234,
        "title": "234. Palindrome Linked List",
        "description": "Given the head of a singly linked list, return true if it is a palindrome.",
        "exampleInputs1": "head = [1,2,2,1]",
        "exampleOutputs1": "true",
        "exampleInputs2": "head = [1,2]",
        "exampleOutputs2": "false"
    },
    {
        "id": 235,
        "title": "235. Lowest Common Ancestor of a Binary Search Tree",
        "description": "Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.",
        "exampleInputs1": "root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8",
        "exampleOutputs1": "6",
        "exampleInputs2": "root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4",
        "exampleOutputs2": "2",
        "exampleInputs3": "root = [2,1], p = 2, q = 1",
        "exampleOutputs3": "2"
    },
    {
        "id": 237,
        "title": "237. Delete Node in a Linked List",
        "description": "Write a function to delete a node in a singly-linked list. You will not be given access to the head of the list, instead you will be given access to the node to be deleted directly.",
        "exampleInputs1": "head = [4,5,1,9], node = 5",
        "exampleOutputs1": "[4,1,9]",
        "exampleInputs2": "head = [4,5,1,9], node = 1",
        "exampleOutputs2": "[4,5,9]",
        "exampleInputs3": "head = [1,2,3,4], node = 3",
        "exampleOutputs3": "[1,2,4]",
        "exampleInputs4": "head = [0,1], node = 0",
        "exampleOutputs4": "[1]",
        "exampleInputs5": "head = [-3,5,-99], node = -3",
        "exampleOutputs5": "[5,-99]"
    },
    {
        "id": 242,
        "title": "242. Valid Anagram",
        "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise.",
        "exampleInputs1": "s = \"anagram\", t = \"nagaram\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"rat\", t = \"car\"",
        "exampleOutputs2": "false"
    },
    {
        "id": 257,
        "title": "257. Binary Tree Paths",
        "description": "Given the root of a binary tree, return all root-to-leaf paths in any order.",
        "exampleInputs1": "root = [1,2,3,null,5]",
        "exampleOutputs1": "[\"1->2->5\",\"1->3\"]",
        "exampleInputs2": "root = [1]",
        "exampleOutputs2": "[\"1\"]"
    },
    {
        "id": 258,
        "title": "258. Add Digits",
        "description": "Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.",
        "exampleInputs1": "num = 38",
        "exampleOutputs1": "2",
        "exampleInputs2": "num = 0",
        "exampleOutputs2": "0"
    },
    {
        "id": 263,
        "title": "263. Ugly Number",
        "description": "An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.",
        "exampleInputs1": "n = 6",
        "exampleOutputs1": "true",
        "exampleInputs2": "n = 8",
        "exampleOutputs2": "true",
        "exampleInputs3": "n = 14",
        "exampleOutputs3": "false",
        "exampleInputs4": "n = 1",
        "exampleOutputs4": "true"
    },
    {
        "id": 268,
        "title": "268. Missing Number",
        "description": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.",
        "exampleInputs1": "nums = [3,0,1]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [0,1]",
        "exampleOutputs2": "2",
        "exampleInputs3": "nums = [9,6,4,2,3,5,7,0,1]",
        "exampleOutputs3": "8",
        "exampleInputs4": "nums = [0]",
        "exampleOutputs4": "1"
    },
    {
        "id": 278,
        "title": "278. First Bad Version",
        "description": "You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.",
        "exampleInputs1": "n = 5, bad = 4",
        "exampleOutputs1": "4",
        "exampleInputs2": "n = 1, bad = 1",
        "exampleOutputs2": "1"
    },
    {
        "id": 283,
        "title": "283. Move Zeroes",
        "description": "Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.",
        "exampleInputs1": "nums = [0,1,0,3,12]",
        "exampleOutputs1": "[1,3,12,0,0]",
        "exampleInputs2": "nums = [0]",
        "exampleOutputs2": "[0]"
    },
    {
        "id": 290,
        "title": "290. Word Pattern",
        "description": "Given a pattern and a string s, find if s follows the same pattern.",
        "exampleInputs1": "pattern = \"abba\", s = \"dog cat cat dog\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "pattern = \"abba\", s = \"dog cat cat fish\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "pattern = \"aaaa\", s = \"dog cat cat dog\"",
        "exampleOutputs3": "false",
        "exampleInputs4": "pattern = \"abba\", s = \"dog dog dog dog\"",
        "exampleOutputs4": "false"
    },
    {
        "id": 292,
        "title": "292. Nim Game",
        "description": "You are playing the following Nim Game with your friend:",
        "exampleInputs1": "n = 4",
        "exampleOutputs1": "false",
        "exampleInputs2": "n = 1",
        "exampleOutputs2": "true",
        "exampleInputs3": "n = 2",
        "exampleOutputs3": "true"
    },
    {
        "id": 303,
        "title": "303. Range Sum Query - Immutable",
        "description": "Given an integer array nums, handle multiple queries of the following type:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]"
    },
    {
        "id": 326,
        "title": "326. Power of Three",
        "description": "Given an integer n, return true if it is a power of three. Otherwise, return false.",
        "exampleInputs1": "n = 27",
        "exampleOutputs1": "true",
        "exampleInputs2": "n = 0",
        "exampleOutputs2": "false",
        "exampleInputs3": "n = 9",
        "exampleOutputs3": "true",
        "exampleInputs4": "n = 45",
        "exampleOutputs4": "false"
    },
    {
        "id": 338,
        "title": "338. Counting Bits",
        "description": "Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.",
        "exampleInputs1": "n = 2",
        "exampleOutputs1": "[0,1,1]",
        "exampleInputs2": "n = 5",
        "exampleOutputs2": "[0,1,1,2,1,2]"
    },
    {
        "id": 342,
        "title": "342. Power of Four",
        "description": "Given an integer n, return true if it is a power of four. Otherwise, return false.",
        "exampleInputs1": "n = 16",
        "exampleOutputs1": "true",
        "exampleInputs2": "n = 5",
        "exampleOutputs2": "false",
        "exampleInputs3": "n = 1",
        "exampleOutputs3": "true"
    },
    {
        "id": 344,
        "title": "344. Reverse String",
        "description": "Write a function that reverses a string. The input string is given as an array of characters s.",
        "exampleInputs1": "s = [\"h\",\"e\",\"l\",\"l\",\"o\"]",
        "exampleOutputs1": "[\"o\",\"l\",\"l\",\"e\",\"h\"]",
        "exampleInputs2": "s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]",
        "exampleOutputs2": "[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]"
    },
    {
        "id": 345,
        "title": "345. Reverse Vowels of a String",
        "description": "Given a string s, reverse only all the vowels in the string and return it.",
        "exampleInputs1": "s = \"hello\"",
        "exampleOutputs1": "\"holle\"",
        "exampleInputs2": "s = \"leetcode\"",
        "exampleOutputs2": "\"leotcede\""
    },
    {
        "id": 349,
        "title": "349. Intersection of Two Arrays",
        "description": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.",
        "exampleInputs1": "nums1 = [1,2,2,1], nums2 = [2,2]",
        "exampleOutputs1": "[2]",
        "exampleInputs2": "nums1 = [4,9,5], nums2 = [9,4,9,8,4]",
        "exampleOutputs2": "[9,4]"
    },
    {
        "id": 350,
        "title": "350. Intersection of Two Arrays II",
        "description": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.",
        "exampleInputs1": "nums1 = [1,2,2,1], nums2 = [2,2]",
        "exampleOutputs1": "[2,2]",
        "exampleInputs2": "nums1 = [4,9,5], nums2 = [9,4,9,8,4]",
        "exampleOutputs2": "[4,9]"
    },
    {
        "id": 367,
        "title": "367. Valid Perfect Square",
        "description": "Given a positive integer num, write a function which returns True if num is a perfect square else False.",
        "exampleInputs1": "num = 16",
        "exampleOutputs1": "true",
        "exampleInputs2": "num = 14",
        "exampleOutputs2": "false"
    },
    {
        "id": 374,
        "title": "374. Guess Number Higher or Lower",
        "description": "We are playing the Guess Game. The game is as follows:",
        "exampleInputs1": "n = 10, pick = 6",
        "exampleOutputs1": "6",
        "exampleInputs2": "n = 1, pick = 1",
        "exampleOutputs2": "1",
        "exampleInputs3": "n = 2, pick = 1",
        "exampleOutputs3": "1",
        "exampleInputs4": "n = 2, pick = 2",
        "exampleOutputs4": "2"
    },
    {
        "id": 383,
        "title": "383. Ransom Note",
        "description": "Given two stings ransomNote and magazine, return true if ransomNote can be constructed from magazine and false otherwise.",
        "exampleInputs1": "ransomNote = \"a\", magazine = \"b\"",
        "exampleOutputs1": "false",
        "exampleInputs2": "ransomNote = \"aa\", magazine = \"ab\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "ransomNote = \"aa\", magazine = \"aab\"",
        "exampleOutputs3": "true"
    },
    {
        "id": 387,
        "title": "387. First Unique Character in a String",
        "description": "Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.",
        "exampleInputs1": "s = \"leetcode\"",
        "exampleOutputs1": "0",
        "exampleInputs2": "s = \"loveleetcode\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "s = \"aabb\"",
        "exampleOutputs3": "-1"
    },
    {
        "id": 389,
        "title": "389. Find the Difference",
        "description": "You are given two strings s and t.",
        "exampleInputs1": "s = \"abcd\", t = \"abcde\"",
        "exampleOutputs1": "\"e\"",
        "exampleInputs2": "s = \"\", t = \"y\"",
        "exampleOutputs2": "\"y\"",
        "exampleInputs3": "s = \"a\", t = \"aa\"",
        "exampleOutputs3": "\"a\"",
        "exampleInputs4": "s = \"ae\", t = \"aea\"",
        "exampleOutputs4": "\"a\""
    },
    {
        "id": 392,
        "title": "392. Is Subsequence",
        "description": "Given two strings s and t, return true if s is a subsequence of t, or false otherwise.",
        "exampleInputs1": "s = \"abc\", t = \"ahbgdc\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"axc\", t = \"ahbgdc\"",
        "exampleOutputs2": "false"
    },
    {
        "id": 401,
        "title": "401. Binary Watch",
        "description": "A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.",
        "exampleInputs1": "turnedOn = 1",
        "exampleOutputs1": "[\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]",
        "exampleInputs2": "turnedOn = 9",
        "exampleOutputs2": "[]"
    },
    {
        "id": 404,
        "title": "404. Sum of Left Leaves",
        "description": "Given the root of a binary tree, return the sum of all left leaves.",
        "exampleInputs1": "root = [3,9,20,null,null,15,7]",
        "exampleOutputs1": "24",
        "exampleInputs2": "root = [1]",
        "exampleOutputs2": "0"
    },
    {
        "id": 405,
        "title": "405. Convert a Number to Hexadecimal",
        "description": "Given an integer num, return a string representing its hexadecimal representation. For negative integers, two’s complement method is used.",
        "exampleInputs1": "num = 26",
        "exampleOutputs1": "\"1a\"",
        "exampleInputs2": "num = -1",
        "exampleOutputs2": "\"ffffffff\""
    },
    {
        "id": 409,
        "title": "409. Longest Palindrome",
        "description": "Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.",
        "exampleInputs1": "s = \"abccccdd\"",
        "exampleOutputs1": "7",
        "exampleInputs2": "s = \"a\"",
        "exampleOutputs2": "1",
        "exampleInputs3": "s = \"bb\"",
        "exampleOutputs3": "2"
    },
    {
        "id": 412,
        "title": "412. Fizz Buzz",
        "description": "Given an integer n, return a string array answer (1-indexed) where:",
        "exampleInputs1": "n = 3",
        "exampleOutputs1": "[\"1\",\"2\",\"Fizz\"]",
        "exampleInputs2": "n = 5",
        "exampleOutputs2": "[\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]",
        "exampleInputs3": "n = 15",
        "exampleOutputs3": "[\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]"
    },
    {
        "id": 414,
        "title": "414. Third Maximum Number",
        "description": "Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.",
        "exampleInputs1": "nums = [3,2,1]",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [1,2]",
        "exampleOutputs2": "2",
        "exampleInputs3": "nums = [2,2,3,1]",
        "exampleOutputs3": "1"
    },
    {
        "id": 415,
        "title": "415. Add Strings",
        "description": "Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.",
        "exampleInputs1": "num1 = \"11\", num2 = \"123\"",
        "exampleOutputs1": "\"134\"",
        "exampleInputs2": "num1 = \"456\", num2 = \"77\"",
        "exampleOutputs2": "\"533\"",
        "exampleInputs3": "num1 = \"0\", num2 = \"0\"",
        "exampleOutputs3": "\"0\""
    },
    {
        "id": 434,
        "title": "434. Number of Segments in a String",
        "description": "You are given a string s, return the number of segments in the string.",
        "exampleInputs1": "s = \"Hello, my name is John\"",
        "exampleOutputs1": "5",
        "exampleInputs2": "s = \"Hello\"",
        "exampleOutputs2": "1",
        "exampleInputs3": "s = \"love live! mu'sic forever\"",
        "exampleOutputs3": "4",
        "exampleInputs4": "s = \"\"",
        "exampleOutputs4": "0"
    },
    {
        "id": 441,
        "title": "441. Arranging Coins",
        "description": "You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.",
        "exampleInputs1": "n = 5",
        "exampleOutputs1": "2",
        "exampleInputs2": "n = 8",
        "exampleOutputs2": "3"
    },
    {
        "id": 448,
        "title": "448. Find All Numbers Disappeared in an Array",
        "description": "Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.",
        "exampleInputs1": "nums = [4,3,2,7,8,2,3,1]",
        "exampleOutputs1": "[5,6]",
        "exampleInputs2": "nums = [1,1]",
        "exampleOutputs2": "[2]"
    },
    {
        "id": 453,
        "title": "453. Minimum Moves to Equal Array Elements",
        "description": "Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.",
        "exampleInputs1": "nums = [1,2,3]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [1,1,1]",
        "exampleOutputs2": "0"
    },
    {
        "id": 455,
        "title": "455. Assign Cookies",
        "description": "Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.",
        "exampleInputs1": "g = [1,2,3], s = [1,1]",
        "exampleOutputs1": "1",
        "exampleInputs2": "g = [1,2], s = [1,2,3]",
        "exampleOutputs2": "2"
    },
    {
        "id": 459,
        "title": "459. Repeated Substring Pattern",
        "description": "Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.",
        "exampleInputs1": "s = \"abab\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"aba\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "s = \"abcabcabcabc\"",
        "exampleOutputs3": "true"
    },
    {
        "id": 461,
        "title": "461. Hamming Distance",
        "description": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different.",
        "exampleInputs1": "x = 1, y = 4",
        "exampleOutputs1": "2",
        "exampleInputs2": "x = 3, y = 1",
        "exampleOutputs2": "1"
    },
    {
        "id": 463,
        "title": "463. Island Perimeter",
        "description": "You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water.",
        "exampleInputs1": "grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]",
        "exampleOutputs1": "16",
        "exampleInputs2": "grid = [[1]]",
        "exampleOutputs2": "4",
        "exampleInputs3": "grid = [[1,0]]",
        "exampleOutputs3": "4"
    },
    {
        "id": 476,
        "title": "476. Number Complement",
        "description": "The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.",
        "exampleInputs1": "num = 5",
        "exampleOutputs1": "2",
        "exampleInputs2": "num = 1",
        "exampleOutputs2": "0"
    },
    {
        "id": 482,
        "title": "482. License Key Formatting",
        "description": "You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The string is separated into n + 1 groups by n dashes. You are also given an integer k.",
        "exampleInputs1": "s = \"5F3Z-2e-9-w\", k = 4",
        "exampleOutputs1": "\"5F3Z-2E9W\"",
        "exampleInputs2": "s = \"2-5g-3-J\", k = 2",
        "exampleOutputs2": "\"2-5G-3J\""
    },
    {
        "id": 485,
        "title": "485. Max Consecutive Ones",
        "description": "Given a binary array nums, return the maximum number of consecutive 1's in the array.",
        "exampleInputs1": "nums = [1,1,0,1,1,1]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [1,0,1,1,0,1]",
        "exampleOutputs2": "2"
    },
    {
        "id": 492,
        "title": "492. Construct the Rectangle",
        "description": "A web developer needs to know how to design a web page's size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:",
        "exampleInputs1": "area = 4",
        "exampleOutputs1": "[2,2]",
        "exampleInputs2": "area = 37",
        "exampleOutputs2": "[37,1]",
        "exampleInputs3": "area = 122122",
        "exampleOutputs3": "[427,286]"
    },
    {
        "id": 495,
        "title": "495. Teemo Attacking",
        "description": "Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack.",
        "exampleInputs1": "timeSeries = [1,4], duration = 2",
        "exampleOutputs1": "4",
        "exampleInputs2": "timeSeries = [1,2], duration = 2",
        "exampleOutputs2": "3"
    },
    {
        "id": 496,
        "title": "496. Next Greater Element I",
        "description": "The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.",
        "exampleInputs1": "nums1 = [4,1,2], nums2 = [1,3,4,2]",
        "exampleOutputs1": "[-1,3,-1]",
        "exampleInputs2": "nums1 = [2,4], nums2 = [1,2,3,4]",
        "exampleOutputs2": "[3,-1]"
    },
    {
        "id": 500,
        "title": "500. Keyboard Row",
        "description": "Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.",
        "exampleInputs1": "words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]",
        "exampleOutputs1": "[\"Alaska\",\"Dad\"]",
        "exampleInputs2": "words = [\"omk\"]",
        "exampleOutputs2": "[]",
        "exampleInputs3": "words = [\"adsdf\",\"sfd\"]",
        "exampleOutputs3": "[\"adsdf\",\"sfd\"]"
    },
    {
        "id": 501,
        "title": "501. Find Mode in Binary Search Tree",
        "description": "Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.",
        "exampleInputs1": "root = [1,null,2,2]",
        "exampleOutputs1": "[2]",
        "exampleInputs2": "root = [0]",
        "exampleOutputs2": "[0]"
    },
    {
        "id": 504,
        "title": "504. Base 7",
        "description": "Given an integer num, return a string of its base 7 representation.",
        "exampleInputs1": "num = 100",
        "exampleOutputs1": "\"202\"",
        "exampleInputs2": "num = -7",
        "exampleOutputs2": "\"-10\""
    },
    {
        "id": 506,
        "title": "506. Relative Ranks",
        "description": "You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique.",
        "exampleInputs1": "score = [5,4,3,2,1]",
        "exampleOutputs1": "[\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]",
        "exampleInputs2": "score = [10,3,8,9,4]",
        "exampleOutputs2": "[\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]"
    },
    {
        "id": 507,
        "title": "507. Perfect Number",
        "description": "A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly.",
        "exampleInputs1": "num = 28",
        "exampleOutputs1": "true",
        "exampleInputs2": "num = 6",
        "exampleOutputs2": "true",
        "exampleInputs3": "num = 496",
        "exampleOutputs3": "true",
        "exampleInputs4": "num = 8128",
        "exampleOutputs4": "true",
        "exampleInputs5": "num = 2",
        "exampleOutputs5": "false"
    },
    {
        "id": 509,
        "title": "509. Fibonacci Number",
        "description": "The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,",
        "exampleInputs1": "F(0) = 0, F(1) = 1",
        "exampleOutputs1": "F(n) = F(n - 1) + F(n - 2), for n > 1.",
        "exampleInputs2": "n = 2",
        "exampleOutputs2": "1",
        "exampleInputs3": "n = 3",
        "exampleOutputs3": "2",
        "exampleInputs4": "n = 4",
        "exampleOutputs4": "3"
    },
    {
        "id": 520,
        "title": "520. Detect Capital",
        "description": "We define the usage of capitals in a word to be right when one of the following cases holds:",
        "exampleInputs1": "word = \"USA\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "word = \"FlaG\"",
        "exampleOutputs2": "false"
    },
    {
        "id": 521,
        "title": "521. Longest Uncommon Subsequence I",
        "description": "Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If the longest uncommon subsequence does not exist, return -1.",
        "exampleInputs1": "a = \"aba\", b = \"cdc\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "a = \"aaa\", b = \"bbb\"",
        "exampleOutputs2": "3",
        "exampleInputs3": "a = \"aaa\", b = \"aaa\"",
        "exampleOutputs3": "-1"
    },
    {
        "id": 530,
        "title": "530. Minimum Absolute Difference in BST",
        "description": "Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.",
        "exampleInputs1": "root = [4,2,6,1,3]",
        "exampleOutputs1": "1",
        "exampleInputs2": "root = [1,0,48,null,null,12,49]",
        "exampleOutputs2": "1"
    },
    {
        "id": 541,
        "title": "541. Reverse String II",
        "description": "Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.",
        "exampleInputs1": "s = \"abcdefg\", k = 2",
        "exampleOutputs1": "\"bacdfeg\"",
        "exampleInputs2": "s = \"abcd\", k = 2",
        "exampleOutputs2": "\"bacd\""
    },
    {
        "id": 543,
        "title": "543. Diameter of Binary Tree",
        "description": "Given the root of a binary tree, return the length of the diameter of the tree.",
        "exampleInputs1": "root = [1,2,3,4,5]",
        "exampleOutputs1": "3",
        "exampleInputs2": "root = [1,2]",
        "exampleOutputs2": "1"
    },
    {
        "id": 551,
        "title": "551. Student Attendance Record I",
        "description": "You are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:",
        "exampleInputs1": "s = \"PPALLP\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"PPALLL\"",
        "exampleOutputs2": "false"
    },
    {
        "id": 557,
        "title": "557. Reverse Words in a String III",
        "description": "Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.",
        "exampleInputs1": "s = \"Let's take LeetCode contest\"",
        "exampleOutputs1": "\"s'teL ekat edoCteeL tsetnoc\"",
        "exampleInputs2": "s = \"God Ding\"",
        "exampleOutputs2": "\"doG gniD\""
    },
    {
        "id": 559,
        "title": "559. Maximum Depth of N-ary Tree",
        "description": "Given a n-ary tree, find its maximum depth.",
        "exampleInputs1": "root = [1,null,3,2,4,null,5,6]",
        "exampleOutputs1": "3",
        "exampleInputs2": "root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        "exampleOutputs2": "5"
    },
    {
        "id": 561,
        "title": "561. Array Partition I",
        "description": "Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.",
        "exampleInputs1": "nums = [1,4,3,2]",
        "exampleOutputs1": "4",
        "exampleInputs2": "nums = [6,2,6,5,1,2]",
        "exampleOutputs2": "9"
    },
    {
        "id": 563,
        "title": "563. Binary Tree Tilt",
        "description": "Given the root of a binary tree, return the sum of every tree node's tilt.",
        "exampleInputs1": "root = [1,2,3]",
        "exampleOutputs1": "1",
        "exampleInputs2": "root = [4,2,9,3,5,null,7]",
        "exampleOutputs2": "15",
        "exampleInputs3": "root = [21,7,14,1,1,2,2,3,3]",
        "exampleOutputs3": "9"
    },
    {
        "id": 566,
        "title": "566. Reshape the Matrix",
        "description": "In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.",
        "exampleInputs1": "mat = [[1,2],[3,4]], r = 1, c = 4",
        "exampleOutputs1": "[[1,2,3,4]]",
        "exampleInputs2": "mat = [[1,2],[3,4]], r = 2, c = 4",
        "exampleOutputs2": "[[1,2],[3,4]]"
    },
    {
        "id": 572,
        "title": "572. Subtree of Another Tree",
        "description": "Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.",
        "exampleInputs1": "root = [3,4,5,1,2], subRoot = [4,1,2]",
        "exampleOutputs1": "true",
        "exampleInputs2": "root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]",
        "exampleOutputs2": "false"
    },
    {
        "id": 575,
        "title": "575. Distribute Candies",
        "description": "Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor.",
        "exampleInputs1": "candyType = [1,1,2,2,3,3]",
        "exampleOutputs1": "3",
        "exampleInputs2": "candyType = [1,1,2,3]",
        "exampleOutputs2": "2",
        "exampleInputs3": "candyType = [6,6,6,6]",
        "exampleOutputs3": "1"
    },
    {
        "id": 589,
        "title": "589. N-ary Tree Preorder Traversal",
        "description": "Given the root of an n-ary tree, return the preorder traversal of its nodes' values.",
        "exampleInputs1": "root = [1,null,3,2,4,null,5,6]",
        "exampleOutputs1": "[1,3,5,6,2,4]",
        "exampleInputs2": "root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        "exampleOutputs2": "[1,2,3,6,7,11,14,4,8,12,5,9,13,10]"
    },
    {
        "id": 590,
        "title": "590. N-ary Tree Postorder Traversal",
        "description": "Given the root of an n-ary tree, return the postorder traversal of its nodes' values.",
        "exampleInputs1": "root = [1,null,3,2,4,null,5,6]",
        "exampleOutputs1": "[5,6,3,2,4,1]",
        "exampleInputs2": "root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        "exampleOutputs2": "[2,6,14,11,7,3,12,8,4,13,9,10,5,1]"
    },
    {
        "id": 594,
        "title": "594. Longest Harmonious Subsequence",
        "description": "We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.",
        "exampleInputs1": "nums = [1,3,2,2,5,2,3,7]",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [1,2,3,4]",
        "exampleOutputs2": "2",
        "exampleInputs3": "nums = [1,1,1,1]",
        "exampleOutputs3": "0"
    },
    {
        "id": 598,
        "title": "598. Range Addition II",
        "description": "You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.",
        "exampleInputs1": "m = 3, n = 3, ops = [[2,2],[3,3]]",
        "exampleOutputs1": "4",
        "exampleInputs2": "m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]",
        "exampleOutputs2": "4",
        "exampleInputs3": "m = 3, n = 3, ops = []",
        "exampleOutputs3": "9"
    },
    {
        "id": 599,
        "title": "599. Minimum Index Sum of Two Lists",
        "description": "Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.",
        "exampleInputs1": "list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]",
        "exampleOutputs1": "[\"Shogun\"]",
        "exampleInputs2": "list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Shogun\",\"Burger King\"]",
        "exampleOutputs2": "[\"Shogun\"]",
        "exampleInputs3": "list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]",
        "exampleOutputs3": "[\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]",
        "exampleInputs4": "list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KNN\",\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]",
        "exampleOutputs4": "[\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]",
        "exampleInputs5": "list1 = [\"KFC\"], list2 = [\"KFC\"]",
        "exampleOutputs5": "[\"KFC\"]"
    },
    {
        "id": 605,
        "title": "605. Can Place Flowers",
        "description": "You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.",
        "exampleInputs1": "flowerbed = [1,0,0,0,1], n = 1",
        "exampleOutputs1": "true",
        "exampleInputs2": "flowerbed = [1,0,0,0,1], n = 2",
        "exampleOutputs2": "false"
    },
    {
        "id": 606,
        "title": "606. Construct String from Binary Tree",
        "description": "Given the root of a binary tree, construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way, and return it.",
        "exampleInputs1": "root = [1,2,3,4]",
        "exampleOutputs1": "\"1(2(4))(3)\"",
        "exampleInputs2": "root = [1,2,3,null,4]",
        "exampleOutputs2": "\"1(2()(4))(3)\""
    },
    {
        "id": 617,
        "title": "617. Merge Two Binary Trees",
        "description": "You are given two binary trees root1 and root2.",
        "exampleInputs1": "root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]",
        "exampleOutputs1": "[3,4,5,5,4,null,7]",
        "exampleInputs2": "root1 = [1], root2 = [1,2]",
        "exampleOutputs2": "[2,2]"
    },
    {
        "id": 628,
        "title": "628. Maximum Product of Three Numbers",
        "description": "Given an integer array nums, find three numbers whose product is maximum and return the maximum product.",
        "exampleInputs1": "nums = [1,2,3]",
        "exampleOutputs1": "6",
        "exampleInputs2": "nums = [1,2,3,4]",
        "exampleOutputs2": "24",
        "exampleInputs3": "nums = [-1,-2,-3]",
        "exampleOutputs3": "-6"
    },
    {
        "id": 637,
        "title": "637. Average of Levels in Binary Tree",
        "description": "",
        "exampleInputs1": "root = [3,9,20,null,15,7]",
        "exampleOutputs1": "[3.00000,14.50000,11.00000]",
        "exampleInputs2": "root = [3,9,20,15,7]",
        "exampleOutputs2": "[3.00000,14.50000,11.00000]"
    },
    {
        "id": 643,
        "title": "643. Maximum Average Subarray I",
        "description": "You are given an integer array nums consisting of n elements, and an integer k.",
        "exampleInputs1": "nums = [1,12,-5,-6,50,3], k = 4",
        "exampleOutputs1": "12.75000",
        "exampleInputs2": "nums = [5], k = 1",
        "exampleOutputs2": "5.00000"
    },
    {
        "id": 645,
        "title": "645. Set Mismatch",
        "description": "You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.",
        "exampleInputs1": "nums = [1,2,2,4]",
        "exampleOutputs1": "[2,3]",
        "exampleInputs2": "nums = [1,1]",
        "exampleOutputs2": "[1,2]"
    },
    {
        "id": 653,
        "title": "653. Two Sum IV - Input is a BST",
        "description": "Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.",
        "exampleInputs1": "root = [5,3,6,2,4,null,7], k = 9",
        "exampleOutputs1": "true",
        "exampleInputs2": "root = [5,3,6,2,4,null,7], k = 28",
        "exampleOutputs2": "false",
        "exampleInputs3": "root = [2,1,3], k = 4",
        "exampleOutputs3": "true",
        "exampleInputs4": "root = [2,1,3], k = 1",
        "exampleOutputs4": "false",
        "exampleInputs5": "root = [2,1,3], k = 3",
        "exampleOutputs5": "true"
    },
    {
        "id": 657,
        "title": "657. Robot Return to Origin",
        "description": "There is a robot starting at the position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.",
        "exampleInputs1": "moves = \"UD\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "moves = \"LL\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "moves = \"RRDD\"",
        "exampleOutputs3": "false",
        "exampleInputs4": "moves = \"LDRRLRUULR\"",
        "exampleOutputs4": "false"
    },
    {
        "id": 661,
        "title": "661. Image Smoother",
        "description": "An image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).",
        "exampleInputs1": "img = [[1,1,1],[1,0,1],[1,1,1]]",
        "exampleOutputs1": "[[0,0,0],[0,0,0],[0,0,0]]",
        "exampleInputs2": "img = [[100,200,100],[200,50,200],[100,200,100]]",
        "exampleOutputs2": "[[137,141,137],[141,138,141],[137,141,137]]"
    },
    {
        "id": 671,
        "title": "671. Second Minimum Node In a Binary Tree",
        "description": "Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds.",
        "exampleInputs1": "root = [2,2,5,null,null,5,7]",
        "exampleOutputs1": "5",
        "exampleInputs2": "root = [2,2,2]",
        "exampleOutputs2": "-1"
    },
    {
        "id": 674,
        "title": "674. Longest Continuous Increasing Subsequence",
        "description": "Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.",
        "exampleInputs1": "nums = [1,3,5,4,7]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [2,2,2,2,2]",
        "exampleOutputs2": "1"
    },
    {
        "id": 680,
        "title": "680. Valid Palindrome II",
        "description": "Given a string s, return true if the s can be palindrome after deleting at most one character from it.",
        "exampleInputs1": "s = \"aba\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"abca\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "s = \"abc\"",
        "exampleOutputs3": "false"
    },
    {
        "id": 682,
        "title": "682. Baseball Game",
        "description": "You are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds' scores.",
        "exampleInputs1": "ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]",
        "exampleOutputs1": "30",
        "exampleInputs2": "ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]",
        "exampleOutputs2": "27",
        "exampleInputs3": "ops = [\"1\"]",
        "exampleOutputs3": "1"
    },
    {
        "id": 690,
        "title": "690. Employee Importance",
        "description": "You have a data structure of employee information, which includes the employee's unique id, their importance value, and their direct subordinates' id.",
        "exampleInputs1": "employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1",
        "exampleOutputs1": "11",
        "exampleInputs2": "employees = [[1,2,[5]],[5,-3,[]]], id = 5",
        "exampleOutputs2": "-3"
    },
    {
        "id": 693,
        "title": "693. Binary Number with Alternating Bits",
        "description": "Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.",
        "exampleInputs1": "n = 5",
        "exampleOutputs1": "true",
        "exampleInputs2": "n = 7",
        "exampleOutputs2": "false",
        "exampleInputs3": "n = 11",
        "exampleOutputs3": "false",
        "exampleInputs4": "n = 10",
        "exampleOutputs4": "true",
        "exampleInputs5": "n = 3",
        "exampleOutputs5": "false"
    },
    {
        "id": 696,
        "title": "696. Count Binary Substrings",
        "description": "Give a binary string s, return the number of non-empty substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively.",
        "exampleInputs1": "s = \"00110011\"",
        "exampleOutputs1": "6",
        "exampleInputs2": "s = \"10101\"",
        "exampleOutputs2": "4"
    },
    {
        "id": 697,
        "title": "697. Degree of an Array",
        "description": "Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.",
        "exampleInputs1": "nums = [1,2,2,3,1]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,2,2,3,1,4,2]",
        "exampleOutputs2": "6"
    },
    {
        "id": 700,
        "title": "700. Search in a Binary Search Tree",
        "description": "You are given the root of a binary search tree (BST) and an integer val.",
        "exampleInputs1": "root = [4,2,7,1,3], val = 2",
        "exampleOutputs1": "[2,1,3]",
        "exampleInputs2": "root = [4,2,7,1,3], val = 5",
        "exampleOutputs2": "[]"
    },
    {
        "id": 703,
        "title": "703. Kth Largest Element in a Stream",
        "description": "Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]"
    },
    {
        "id": 704,
        "title": "704. Binary Search",
        "description": "Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.",
        "exampleInputs1": "nums = [-1,0,3,5,9,12], target = 9",
        "exampleOutputs1": "4",
        "exampleInputs2": "nums = [-1,0,3,5,9,12], target = 2",
        "exampleOutputs2": "-1"
    },
    {
        "id": 705,
        "title": "705. Design HashSet",
        "description": "Design a HashSet without using any built-in hash table libraries.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]"
    },
    {
        "id": 706,
        "title": "706. Design HashMap",
        "description": "Design a HashMap without using any built-in hash table libraries.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"]"
    },
    {
        "id": 709,
        "title": "709. To Lower Case",
        "description": "Given a string s, return the string after replacing every uppercase letter with the same lowercase letter.",
        "exampleInputs1": "s = \"Hello\"",
        "exampleOutputs1": "\"hello\"",
        "exampleInputs2": "s = \"here\"",
        "exampleOutputs2": "\"here\"",
        "exampleInputs3": "s = \"LOVELY\"",
        "exampleOutputs3": "\"lovely\""
    },
    {
        "id": 717,
        "title": "717. 1-bit and 2-bit Characters",
        "description": "We have two special characters:",
        "exampleInputs1": "bits = [1,0,0]",
        "exampleOutputs1": "true",
        "exampleInputs2": "bits = [1,1,1,0]",
        "exampleOutputs2": "false"
    },
    {
        "id": 724,
        "title": "724. Find Pivot Index",
        "description": "Given an array of integers nums, calculate the pivot index of this array.",
        "exampleInputs1": "nums = [1,7,3,6,5,6]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [1,2,3]",
        "exampleOutputs2": "-1",
        "exampleInputs3": "nums = [2,1,-1]",
        "exampleOutputs3": "0"
    },
    {
        "id": 728,
        "title": "728. Self Dividing Numbers",
        "description": "A self-dividing number is a number that is divisible by every digit it contains.",
        "exampleInputs1": "left = 1, right = 22",
        "exampleOutputs1": "[1,2,3,4,5,6,7,8,9,11,12,15,22]",
        "exampleInputs2": "left = 47, right = 85",
        "exampleOutputs2": "[48,55,66,77]"
    },
    {
        "id": 733,
        "title": "733. Flood Fill",
        "description": "An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.",
        "exampleInputs1": "image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, newColor = 2",
        "exampleOutputs1": "[[2,2,2],[2,2,0],[2,0,1]]",
        "exampleInputs2": "image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, newColor = 2",
        "exampleOutputs2": "[[2,2,2],[2,2,2]]"
    },
    {
        "id": 744,
        "title": "744. Find Smallest Letter Greater Than Target",
        "description": "Given a characters array letters that is sorted in non-decreasing order and a character target, return the smallest character in the array that is larger than target.",
        "exampleInputs1": "letters = [\"c\",\"f\",\"j\"], target = \"a\"",
        "exampleOutputs1": "\"c\"",
        "exampleInputs2": "letters = [\"c\",\"f\",\"j\"], target = \"c\"",
        "exampleOutputs2": "\"f\"",
        "exampleInputs3": "letters = [\"c\",\"f\",\"j\"], target = \"d\"",
        "exampleOutputs3": "\"f\"",
        "exampleInputs4": "letters = [\"c\",\"f\",\"j\"], target = \"g\"",
        "exampleOutputs4": "\"j\"",
        "exampleInputs5": "letters = [\"c\",\"f\",\"j\"], target = \"j\"",
        "exampleOutputs5": "\"c\""
    },
    {
        "id": 746,
        "title": "746. Min Cost Climbing Stairs",
        "description": "You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.",
        "exampleInputs1": "cost = [10,15,20]",
        "exampleOutputs1": "15",
        "exampleInputs2": "cost = [1,100,1,1,1,100,1,1,100,1]",
        "exampleOutputs2": "6"
    },
    {
        "id": 747,
        "title": "747. Largest Number At Least Twice of Others",
        "description": "You are given an integer array nums where the largest integer is unique.",
        "exampleInputs1": "nums = [3,6,1,0]",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [1,2,3,4]",
        "exampleOutputs2": "-1",
        "exampleInputs3": "nums = [1]",
        "exampleOutputs3": "0"
    },
    {
        "id": 748,
        "title": "748. Shortest Completing Word",
        "description": "Given a string licensePlate and an array of strings words, find the shortest completing word in words.",
        "exampleInputs1": "licensePlate = \"1s3 PSt\", words = [\"step\",\"steps\",\"stripe\",\"stepple\"]",
        "exampleOutputs1": "\"steps\"",
        "exampleInputs2": "licensePlate = \"1s3 456\", words = [\"looks\",\"pest\",\"stew\",\"show\"]",
        "exampleOutputs2": "\"pest\"",
        "exampleInputs3": "licensePlate = \"Ah71752\", words = [\"suggest\",\"letter\",\"of\",\"husband\",\"easy\",\"education\",\"drug\",\"prevent\",\"writer\",\"old\"]",
        "exampleOutputs3": "\"husband\"",
        "exampleInputs4": "licensePlate = \"OgEu755\", words = [\"enough\",\"these\",\"play\",\"wide\",\"wonder\",\"box\",\"arrive\",\"money\",\"tax\",\"thus\"]",
        "exampleOutputs4": "\"enough\"",
        "exampleInputs5": "licensePlate = \"iMSlpe4\", words = [\"claim\",\"consumer\",\"student\",\"camera\",\"public\",\"never\",\"wonder\",\"simple\",\"thought\",\"use\"]",
        "exampleOutputs5": "\"simple\""
    },
    {
        "id": 762,
        "title": "762. Prime Number of Set Bits in Binary Representation",
        "description": "Given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.",
        "exampleInputs1": "left = 6, right = 10",
        "exampleOutputs1": "4",
        "exampleInputs2": "left = 10, right = 15",
        "exampleOutputs2": "5"
    },
    {
        "id": 766,
        "title": "766. Toeplitz Matrix",
        "description": "Given an m x n matrix, return true if the matrix is Toeplitz. Otherwise, return false.",
        "exampleInputs1": "matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]",
        "exampleOutputs1": "true",
        "exampleInputs2": "matrix = [[1,2],[2,2]]",
        "exampleOutputs2": "false"
    },
    {
        "id": 771,
        "title": "771. Jewels and Stones",
        "description": "You're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels.",
        "exampleInputs1": "jewels = \"aA\", stones = \"aAAbbbb\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "jewels = \"z\", stones = \"ZZ\"",
        "exampleOutputs2": "0"
    },
    {
        "id": 783,
        "title": "783. Minimum Distance Between BST Nodes",
        "description": "Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.",
        "exampleInputs1": "root = [4,2,6,1,3]",
        "exampleOutputs1": "1",
        "exampleInputs2": "root = [1,0,48,null,null,12,49]",
        "exampleOutputs2": "1"
    },
    {
        "id": 796,
        "title": "796. Rotate String",
        "description": "Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.",
        "exampleInputs1": "s = \"abcde\", goal = \"cdeab\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"abcde\", goal = \"abced\"",
        "exampleOutputs2": "false"
    },
    {
        "id": 804,
        "title": "804. Unique Morse Code Words",
        "description": "International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:",
        "exampleInputs2": "words = [\"gin\",\"zen\",\"gig\",\"msg\"]",
        "exampleOutputs2": "2",
        "exampleInputs3": "words = [\"a\"]",
        "exampleOutputs3": "1"
    },
    {
        "id": 806,
        "title": "806. Number of Lines To Write String",
        "description": "You are given a string s of lowercase English letters and an array widths denoting how many pixels wide each lowercase English letter is. Specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on.",
        "exampleInputs1": "widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\"",
        "exampleOutputs1": "[3,60]",
        "exampleInputs2": "widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\"",
        "exampleOutputs2": "[2,4]"
    },
    {
        "id": 812,
        "title": "812. Largest Triangle Area",
        "description": "Given an array of points on the X-Y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. Answers within 10-5 of the actual answer will be accepted.",
        "exampleInputs1": "points = [[0,0],[0,1],[1,0],[0,2],[2,0]]",
        "exampleOutputs1": "2.00000",
        "exampleInputs2": "points = [[1,0],[0,0],[0,1]]",
        "exampleOutputs2": "0.50000"
    },
    {
        "id": 819,
        "title": "819. Most Common Word",
        "description": "Given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.",
        "exampleInputs1": "paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\", banned = [\"hit\"]",
        "exampleOutputs1": "\"ball\"",
        "exampleInputs2": "paragraph = \"a.\", banned = []",
        "exampleOutputs2": "\"a\""
    },
    {
        "id": 821,
        "title": "821. Shortest Distance to a Character",
        "description": "Given a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length and answer[i] is the distance from index i to the closest occurrence of character c in s.",
        "exampleInputs1": "s = \"loveleetcode\", c = \"e\"",
        "exampleOutputs1": "[3,2,1,0,1,0,0,1,2,2,1,0]",
        "exampleInputs2": "s = \"aaab\", c = \"b\"",
        "exampleOutputs2": "[3,2,1,0]"
    },
    {
        "id": 824,
        "title": "824. Goat Latin",
        "description": "You are given a string sentence that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.",
        "exampleInputs1": "sentence = \"I speak Goat Latin\"",
        "exampleOutputs1": "\"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"",
        "exampleInputs2": "sentence = \"The quick brown fox jumped over the lazy dog\"",
        "exampleOutputs2": "\"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\""
    },
    {
        "id": 830,
        "title": "830. Positions of Large Groups",
        "description": "In a string s of lowercase letters, these letters form consecutive groups of the same character.",
        "exampleInputs1": "s = \"abbxxxxzzy\"",
        "exampleOutputs1": "[[3,6]]",
        "exampleInputs2": "s = \"abc\"",
        "exampleOutputs2": "[]",
        "exampleInputs3": "s = \"abcdddeeeeaabbbcd\"",
        "exampleOutputs3": "[[3,5],[6,9],[12,14]]",
        "exampleInputs4": "s = \"aba\"",
        "exampleOutputs4": "[]"
    },
    {
        "id": 832,
        "title": "832. Flipping an Image",
        "description": "Given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.",
        "exampleInputs1": "image = [[1,1,0],[1,0,1],[0,0,0]]",
        "exampleOutputs1": "[[1,0,0],[0,1,0],[1,1,1]]",
        "exampleInputs2": "image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]",
        "exampleOutputs2": "[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]"
    },
    {
        "id": 836,
        "title": "836. Rectangle Overlap",
        "description": "An axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.",
        "exampleInputs1": "rec1 = [0,0,2,2], rec2 = [1,1,3,3]",
        "exampleOutputs1": "true",
        "exampleInputs2": "rec1 = [0,0,1,1], rec2 = [1,0,2,1]",
        "exampleOutputs2": "false",
        "exampleInputs3": "rec1 = [0,0,1,1], rec2 = [2,2,3,3]",
        "exampleOutputs3": "false"
    },
    {
        "id": 844,
        "title": "844. Backspace String Compare",
        "description": "Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.",
        "exampleInputs1": "s = \"ab#c\", t = \"ad#c\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"ab##\", t = \"c#d#\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "s = \"a##c\", t = \"#a#c\"",
        "exampleOutputs3": "true",
        "exampleInputs4": "s = \"a#c\", t = \"b\"",
        "exampleOutputs4": "false"
    },
    {
        "id": 852,
        "title": "852. Peak Index in a Mountain Array",
        "description": "Let's call an array arr a mountain if the following properties hold:",
        "exampleInputs1": "arr = [0,1,0]",
        "exampleOutputs1": "1",
        "exampleInputs2": "arr = [0,2,1,0]",
        "exampleOutputs2": "1",
        "exampleInputs3": "arr = [0,10,5,2]",
        "exampleOutputs3": "1",
        "exampleInputs4": "arr = [3,4,5,1]",
        "exampleOutputs4": "2",
        "exampleInputs5": "arr = [24,69,100,99,79,78,67,36,26,19]",
        "exampleOutputs5": "2"
    },
    {
        "id": 859,
        "title": "859. Buddy Strings",
        "description": "Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.",
        "exampleInputs1": "s = \"ab\", goal = \"ba\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"ab\", goal = \"ab\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "s = \"aa\", goal = \"aa\"",
        "exampleOutputs3": "true",
        "exampleInputs4": "s = \"aaaaaaabc\", goal = \"aaaaaaacb\"",
        "exampleOutputs4": "true"
    },
    {
        "id": 860,
        "title": "860. Lemonade Change",
        "description": "At a lemonade stand, each lemonade costs $5. Customers are standing in a queue to buy from you, and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. You must provide the correct change to each customer so that the net transaction is that the customer pays $5.",
        "exampleInputs1": "bills = [5,5,5,10,20]",
        "exampleOutputs1": "true",
        "exampleInputs2": "bills = [5,5,10,10,20]",
        "exampleOutputs2": "false",
        "exampleInputs3": "bills = [5,5,10]",
        "exampleOutputs3": "true",
        "exampleInputs4": "bills = [10,10]",
        "exampleOutputs4": "false"
    },
    {
        "id": 867,
        "title": "867. Transpose Matrix",
        "description": "Given a 2D integer array matrix, return the transpose of matrix.",
        "exampleInputs1": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "exampleOutputs1": "[[1,4,7],[2,5,8],[3,6,9]]",
        "exampleInputs2": "matrix = [[1,2,3],[4,5,6]]",
        "exampleOutputs2": "[[1,4],[2,5],[3,6]]"
    },
    {
        "id": 868,
        "title": "868. Binary Gap",
        "description": "Given a positive integer n, find and return the longest distance between any two adjacent 1's in the binary representation of n. If there are no two adjacent 1's, return 0.",
        "exampleInputs1": "n = 22",
        "exampleOutputs1": "2",
        "exampleInputs2": "n = 5",
        "exampleOutputs2": "2",
        "exampleInputs3": "n = 6",
        "exampleOutputs3": "1",
        "exampleInputs4": "n = 8",
        "exampleOutputs4": "0",
        "exampleInputs5": "n = 1",
        "exampleOutputs5": "0"
    },
    {
        "id": 872,
        "title": "872. Leaf-Similar Trees",
        "description": "Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.",
        "exampleInputs1": "root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]",
        "exampleOutputs1": "true",
        "exampleInputs2": "root1 = [1], root2 = [1]",
        "exampleOutputs2": "true",
        "exampleInputs3": "root1 = [1], root2 = [2]",
        "exampleOutputs3": "false",
        "exampleInputs4": "root1 = [1,2], root2 = [2,2]",
        "exampleOutputs4": "true",
        "exampleInputs5": "root1 = [1,2,3], root2 = [1,3,2]",
        "exampleOutputs5": "false"
    },
    {
        "id": 874,
        "title": "874. Walking Robot Simulation",
        "description": "A robot on an infinite XY-plane starts at point (0, 0) and faces north. The robot can receive one of three possible types of commands:",
        "exampleInputs1": "commands = [4,-1,3], obstacles = []",
        "exampleOutputs1": "25",
        "exampleInputs2": "commands = [4,-1,4,-2,4], obstacles = [[2,4]]",
        "exampleOutputs2": "65"
    },
    {
        "id": 876,
        "title": "876. Middle of the Linked List",
        "description": "Given the head of a singly linked list, return the middle node of the linked list.",
        "exampleInputs1": "head = [1,2,3,4,5]",
        "exampleOutputs1": "[3,4,5]",
        "exampleInputs2": "head = [1,2,3,4,5,6]",
        "exampleOutputs2": "[4,5,6]"
    },
    {
        "id": 883,
        "title": "883. Projection Area of 3D Shapes",
        "description": "You are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes.",
        "exampleInputs1": "grid = [[1,2],[3,4]]",
        "exampleOutputs1": "17",
        "exampleInputs2": "grid = [[2]]",
        "exampleOutputs2": "5",
        "exampleInputs3": "grid = [[1,0],[0,2]]",
        "exampleOutputs3": "8",
        "exampleInputs4": "grid = [[1,1,1],[1,0,1],[1,1,1]]",
        "exampleOutputs4": "14",
        "exampleInputs5": "grid = [[2,2,2],[2,1,2],[2,2,2]]",
        "exampleOutputs5": "21"
    },
    {
        "id": 884,
        "title": "884. Uncommon Words from Two Sentences",
        "description": "A sentence is a string of single-space separated words where each word consists only of lowercase letters.",
        "exampleInputs1": "s1 = \"this apple is sweet\", s2 = \"this apple is sour\"",
        "exampleOutputs1": "[\"sweet\",\"sour\"]",
        "exampleInputs2": "s1 = \"apple apple\", s2 = \"banana\"",
        "exampleOutputs2": "[\"banana\"]"
    },
    {
        "id": 888,
        "title": "888. Fair Candy Swap",
        "description": "Alice and Bob have a different total number of candies. You are given two integer arrays aliceSizes and bobSizes where aliceSizes[i] is the number of candies of the ith box of candy that Alice has and bobSizes[j] is the number of candies of the jth box of candy that Bob has.",
        "exampleInputs1": "aliceSizes = [1,1], bobSizes = [2,2]",
        "exampleOutputs1": "[1,2]",
        "exampleInputs2": "aliceSizes = [1,2], bobSizes = [2,3]",
        "exampleOutputs2": "[1,2]",
        "exampleInputs3": "aliceSizes = [2], bobSizes = [1,3]",
        "exampleOutputs3": "[2,3]",
        "exampleInputs4": "aliceSizes = [1,2,5], bobSizes = [2,4]",
        "exampleOutputs4": "[5,4]"
    },
    {
        "id": 892,
        "title": "892. Surface Area of 3D Shapes",
        "description": "You are given an n x n grid where you have placed some 1 x 1 x 1 cubes. Each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j).",
        "exampleInputs1": "grid = [[2]]",
        "exampleOutputs1": "10",
        "exampleInputs2": "grid = [[1,2],[3,4]]",
        "exampleOutputs2": "34",
        "exampleInputs3": "grid = [[1,0],[0,2]]",
        "exampleOutputs3": "16",
        "exampleInputs4": "grid = [[1,1,1],[1,0,1],[1,1,1]]",
        "exampleOutputs4": "32",
        "exampleInputs5": "grid = [[2,2,2],[2,1,2],[2,2,2]]",
        "exampleOutputs5": "46"
    },
    {
        "id": 896,
        "title": "896. Monotonic Array",
        "description": "An array is monotonic if it is either monotone increasing or monotone decreasing.",
        "exampleInputs1": "nums = [1,2,2,3]",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [6,5,4,4]",
        "exampleOutputs2": "true",
        "exampleInputs3": "nums = [1,3,2]",
        "exampleOutputs3": "false",
        "exampleInputs4": "nums = [1,2,4,5]",
        "exampleOutputs4": "true",
        "exampleInputs5": "nums = [1,1,1]",
        "exampleOutputs5": "true"
    },
    {
        "id": 897,
        "title": "897. Increasing Order Search Tree",
        "description": "Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.",
        "exampleInputs1": "root = [5,3,6,2,4,null,8,1,null,null,null,7,9]",
        "exampleOutputs1": "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]",
        "exampleInputs2": "root = [5,1,7]",
        "exampleOutputs2": "[1,null,5,null,7]"
    },
    {
        "id": 905,
        "title": "905. Sort Array By Parity",
        "description": "Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.",
        "exampleInputs1": "nums = [3,1,2,4]",
        "exampleOutputs1": "[2,4,3,1]",
        "exampleInputs2": "nums = [0]",
        "exampleOutputs2": "[0]"
    },
    {
        "id": 908,
        "title": "908. Smallest Range I",
        "description": "You are given an integer array nums and an integer k.",
        "exampleInputs1": "nums = [1], k = 0",
        "exampleOutputs1": "0",
        "exampleInputs2": "nums = [0,10], k = 2",
        "exampleOutputs2": "6",
        "exampleInputs3": "nums = [1,3,6], k = 3",
        "exampleOutputs3": "0"
    },
    {
        "id": 914,
        "title": "914. X of a Kind in a Deck of Cards",
        "description": "In a deck of cards, each card has an integer written on it.",
        "exampleInputs1": "deck = [1,2,3,4,4,3,2,1]",
        "exampleOutputs1": "true",
        "exampleInputs2": "deck = [1,1,1,2,2,2,3,3]",
        "exampleOutputs2": "false",
        "exampleInputs3": "deck = [1]",
        "exampleOutputs3": "false",
        "exampleInputs4": "deck = [1,1]",
        "exampleOutputs4": "true",
        "exampleInputs5": "deck = [1,1,2,2,2,2]",
        "exampleOutputs5": "true"
    },
    {
        "id": 917,
        "title": "917. Reverse Only Letters",
        "description": "Given a string s, reverse the string according to the following rules:",
        "exampleInputs1": "s = \"ab-cd\"",
        "exampleOutputs1": "\"dc-ba\"",
        "exampleInputs2": "s = \"a-bC-dEf-ghIj\"",
        "exampleOutputs2": "\"j-Ih-gfE-dCba\"",
        "exampleInputs3": "s = \"Test1ng-Leet=code-Q!\"",
        "exampleOutputs3": "\"Qedo1ct-eeLg=ntse-T!\""
    },
    {
        "id": 922,
        "title": "922. Sort Array By Parity II",
        "description": "Given an array of integers nums, half of the integers in nums are odd, and the other half are even.",
        "exampleInputs1": "nums = [4,2,5,7]",
        "exampleOutputs1": "[4,5,2,7]",
        "exampleInputs2": "nums = [2,3]",
        "exampleOutputs2": "[2,3]"
    },
    {
        "id": 925,
        "title": "925. Long Pressed Name",
        "description": "Your friend is typing his name into a keyboard. Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.",
        "exampleInputs1": "name = \"alex\", typed = \"aaleex\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "name = \"saeed\", typed = \"ssaaedd\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "name = \"leelee\", typed = \"lleeelee\"",
        "exampleOutputs3": "true",
        "exampleInputs4": "name = \"laiden\", typed = \"laiden\"",
        "exampleOutputs4": "true"
    },
    {
        "id": 929,
        "title": "929. Unique Email Addresses",
        "description": "Every valid email consists of a local name and a domain name, separated by the '@' sign. Besides lowercase letters, the email may contain one or more '.' or '+'.",
        "exampleInputs1": "emails = [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]",
        "exampleOutputs1": "2",
        "exampleInputs2": "emails = [\"a@leetcode.com\",\"b@leetcode.com\",\"c@leetcode.com\"]",
        "exampleOutputs2": "3"
    },
    {
        "id": 933,
        "title": "933. Number of Recent Calls",
        "description": "You have a RecentCounter class which counts the number of recent requests within a certain time frame.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"]"
    },
    {
        "id": 937,
        "title": "937. Reorder Data in Log Files",
        "description": "You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.",
        "exampleInputs1": "logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]",
        "exampleOutputs1": "[\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]",
        "exampleInputs2": "logs = [\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"]",
        "exampleOutputs2": "[\"g1 act car\",\"a8 act zoo\",\"ab1 off key dog\",\"a1 9 2 3 1\",\"zo4 4 7\"]"
    },
    {
        "id": 938,
        "title": "938. Range Sum of BST",
        "description": "Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].",
        "exampleInputs1": "root = [10,5,15,3,7,null,18], low = 7, high = 15",
        "exampleOutputs1": "32",
        "exampleInputs2": "root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10",
        "exampleOutputs2": "23"
    },
    {
        "id": 941,
        "title": "941. Valid Mountain Array",
        "description": "Given an array of integers arr, return true if and only if it is a valid mountain array.",
        "exampleInputs1": "arr = [2,1]",
        "exampleOutputs1": "false",
        "exampleInputs2": "arr = [3,5,5]",
        "exampleOutputs2": "false",
        "exampleInputs3": "arr = [0,3,2,1]",
        "exampleOutputs3": "true"
    },
    {
        "id": 942,
        "title": "942. DI String Match",
        "description": "A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:",
        "exampleInputs1": "s = \"IDID\"",
        "exampleOutputs1": "[0,4,1,3,2]",
        "exampleInputs2": "s = \"III\"",
        "exampleOutputs2": "[0,1,2,3]",
        "exampleInputs3": "s = \"DDI\"",
        "exampleOutputs3": "[3,2,0,1]"
    },
    {
        "id": 944,
        "title": "944. Delete Columns to Make Sorted",
        "description": "You are given an array of n strings strs, all of the same length.",
        "exampleInputs1": "abc",
        "exampleOutputs1": "bce",
        "exampleInputs2": "strs = [\"cba\",\"daf\",\"ghi\"]",
        "exampleOutputs2": "1",
        "exampleInputs3": "strs = [\"a\",\"b\"]",
        "exampleOutputs3": "0",
        "exampleInputs4": "strs = [\"zyx\",\"wvu\",\"tsr\"]",
        "exampleOutputs4": "3"
    },
    {
        "id": 953,
        "title": "953. Verifying an Alien Dictionary",
        "description": "In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different order. The order of the alphabet is some permutation of lowercase letters.",
        "exampleInputs1": "words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\"",
        "exampleOutputs3": "false"
    },
    {
        "id": 961,
        "title": "961. N-Repeated Element in Size 2N Array",
        "description": "You are given an integer array nums with the following properties:",
        "exampleInputs1": "nums = [1,2,3,3]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [2,1,2,5,3,2]",
        "exampleOutputs2": "2",
        "exampleInputs3": "nums = [5,1,5,2,5,3,5,4]",
        "exampleOutputs3": "5"
    },
    {
        "id": 965,
        "title": "965. Univalued Binary Tree",
        "description": "A binary tree is uni-valued if every node in the tree has the same value.",
        "exampleInputs1": "root = [1,1,1,1,1,null,1]",
        "exampleOutputs1": "true",
        "exampleInputs2": "root = [2,2,2,5,2]",
        "exampleOutputs2": "false"
    },
    {
        "id": 976,
        "title": "976. Largest Perimeter Triangle",
        "description": "Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return 0.",
        "exampleInputs1": "nums = [2,1,2]",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [1,2,1]",
        "exampleOutputs2": "0",
        "exampleInputs3": "nums = [3,2,3,4]",
        "exampleOutputs3": "10",
        "exampleInputs4": "nums = [3,6,2,3]",
        "exampleOutputs4": "8"
    },
    {
        "id": 977,
        "title": "977. Squares of a Sorted Array",
        "description": "Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.",
        "exampleInputs1": "nums = [-4,-1,0,3,10]",
        "exampleOutputs1": "[0,1,9,16,100]",
        "exampleInputs2": "nums = [-7,-3,2,3,11]",
        "exampleOutputs2": "[4,9,9,49,121]"
    },
    {
        "id": 989,
        "title": "989. Add to Array-Form of Integer",
        "description": "The array-form of an integer num is an array representing its digits in left to right order.",
        "exampleInputs1": "num = [1,2,0,0], k = 34",
        "exampleOutputs1": "[1,2,3,4]",
        "exampleInputs2": "num = [2,7,4], k = 181",
        "exampleOutputs2": "[4,5,5]",
        "exampleInputs3": "num = [2,1,5], k = 806",
        "exampleOutputs3": "[1,0,2,1]",
        "exampleInputs4": "num = [9,9,9,9,9,9,9,9,9,9], k = 1",
        "exampleOutputs4": "[1,0,0,0,0,0,0,0,0,0,0]"
    },
    {
        "id": 993,
        "title": "993. Cousins in Binary Tree",
        "description": "Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.",
        "exampleInputs1": "root = [1,2,3,4], x = 4, y = 3",
        "exampleOutputs1": "false",
        "exampleInputs2": "root = [1,2,3,null,4,null,5], x = 5, y = 4",
        "exampleOutputs2": "true",
        "exampleInputs3": "root = [1,2,3,null,4], x = 2, y = 3",
        "exampleOutputs3": "false"
    },
    {
        "id": 997,
        "title": "997. Find the Town Judge",
        "description": "In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.",
        "exampleInputs1": "n = 2, trust = [[1,2]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "n = 3, trust = [[1,3],[2,3]]",
        "exampleOutputs2": "3",
        "exampleInputs3": "n = 3, trust = [[1,3],[2,3],[3,1]]",
        "exampleOutputs3": "-1",
        "exampleInputs4": "n = 3, trust = [[1,2],[2,3]]",
        "exampleOutputs4": "-1",
        "exampleInputs5": "n = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]",
        "exampleOutputs5": "3"
    },
    {
        "id": 999,
        "title": "999. Available Captures for Rook",
        "description": "On an 8 x 8 chessboard, there is exactly one white rook 'R' and some number of white bishops 'B', black pawns 'p', and empty squares '.'.",
        "exampleInputs1": "board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"R\",\".\",\".\",\".\",\"p\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"B\",\"R\",\"B\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]",
        "exampleOutputs2": "0",
        "exampleInputs3": "board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\"p\",\"p\",\".\",\"R\",\".\",\"p\",\"B\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]",
        "exampleOutputs3": "3"
    },
    {
        "id": 1002,
        "title": "1002. Find Common Characters",
        "description": "Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order.",
        "exampleInputs1": "words = [\"bella\",\"label\",\"roller\"]",
        "exampleOutputs1": "[\"e\",\"l\",\"l\"]",
        "exampleInputs2": "words = [\"cool\",\"lock\",\"cook\"]",
        "exampleOutputs2": "[\"c\",\"o\"]"
    },
    {
        "id": 1005,
        "title": "1005. Maximize Sum Of Array After K Negations",
        "description": "Given an integer array nums and an integer k, modify the array in the following way:",
        "exampleInputs1": "nums = [4,2,3], k = 1",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [3,-1,0,2], k = 3",
        "exampleOutputs2": "6",
        "exampleInputs3": "nums = [2,-3,-1,5,-4], k = 2",
        "exampleOutputs3": "13"
    },
    {
        "id": 1009,
        "title": "1009. Complement of Base 10 Integer",
        "description": "The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.",
        "exampleInputs1": "n = 5",
        "exampleOutputs1": "2",
        "exampleInputs2": "n = 7",
        "exampleOutputs2": "0",
        "exampleInputs3": "n = 10",
        "exampleOutputs3": "5"
    },
    {
        "id": 1013,
        "title": "1013. Partition Array Into Three Parts With Equal Sum",
        "description": "Given an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums.",
        "exampleInputs1": "arr = [0,2,1,-6,6,-7,9,1,2,0,1]",
        "exampleOutputs1": "true",
        "exampleInputs2": "arr = [0,2,1,-6,6,7,9,-1,2,0,1]",
        "exampleOutputs2": "false",
        "exampleInputs3": "arr = [3,3,6,5,-2,2,5,1,-9,4]",
        "exampleOutputs3": "true"
    },
    {
        "id": 1018,
        "title": "1018. Binary Prefix Divisible By 5",
        "description": "You are given a binary array nums (0-indexed).",
        "exampleInputs1": "nums = [0,1,1]",
        "exampleOutputs1": "[true,false,false]",
        "exampleInputs2": "nums = [1,1,1]",
        "exampleOutputs2": "[false,false,false]",
        "exampleInputs3": "nums = [0,1,1,1,1,1]",
        "exampleOutputs3": "[true,false,false,false,true,false]",
        "exampleInputs4": "nums = [1,1,1,0,1]",
        "exampleOutputs4": "[false,false,false,false,false]"
    },
    {
        "id": 1021,
        "title": "1021. Remove Outermost Parentheses",
        "description": "A valid parentheses string is either empty \"\", \"(\" + A + \")\", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.",
        "exampleInputs1": "s = \"(()())(())\"",
        "exampleOutputs1": "\"()()()\"",
        "exampleInputs2": "s = \"(()())(())(()(()))\"",
        "exampleOutputs2": "\"()()()()(())\"",
        "exampleInputs3": "s = \"()()\"",
        "exampleOutputs3": "\"\""
    },
    {
        "id": 1022,
        "title": "1022. Sum of Root To Leaf Binary Numbers",
        "description": "You are given the root of a binary tree where each node has a value 0 or 1.  Each root-to-leaf path represents a binary number starting with the most significant bit.  For example, if the path is 0 -> 1 -> 1 -> 0 -> 1, then this could represent 01101 in binary, which is 13.",
        "exampleInputs1": "root = [1,0,1,0,1,0,1]",
        "exampleOutputs1": "22",
        "exampleInputs2": "root = [0]",
        "exampleOutputs2": "0",
        "exampleInputs3": "root = [1]",
        "exampleOutputs3": "1",
        "exampleInputs4": "root = [1,1]",
        "exampleOutputs4": "3"
    },
    {
        "id": 1025,
        "title": "1025. Divisor Game",
        "description": "Alice and Bob take turns playing a game, with Alice starting first.",
        "exampleInputs1": "n = 2",
        "exampleOutputs1": "true",
        "exampleInputs2": "n = 3",
        "exampleOutputs2": "false"
    },
    {
        "id": 1030,
        "title": "1030. Matrix Cells in Distance Order",
        "description": "You are given four integers row, cols, rCenter, and cCenter. There is a rows x cols matrix and you are on the cell with the coordinates (rCenter, cCenter).",
        "exampleInputs1": "rows = 1, cols = 2, rCenter = 0, cCenter = 0",
        "exampleOutputs1": "[[0,0],[0,1]]",
        "exampleInputs2": "rows = 2, cols = 2, rCenter = 0, cCenter = 1",
        "exampleOutputs2": "[[0,1],[0,0],[1,1],[1,0]]",
        "exampleInputs3": "rows = 2, cols = 3, rCenter = 1, cCenter = 2",
        "exampleOutputs3": "[[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]"
    },
    {
        "id": 1037,
        "title": "1037. Valid Boomerang",
        "description": "Given an array points where points[i] = [xi, yi] represents a point on the X-Y plane, return true if these points are a boomerang.",
        "exampleInputs1": "points = [[1,1],[2,3],[3,2]]",
        "exampleOutputs1": "true",
        "exampleInputs2": "points = [[1,1],[2,2],[3,3]]",
        "exampleOutputs2": "false"
    },
    {
        "id": 1046,
        "title": "1046. Last Stone Weight",
        "description": "You are given an array of integers stones where stones[i] is the weight of the ith stone.",
        "exampleInputs1": "stones = [2,7,4,1,8,1]",
        "exampleOutputs1": "1",
        "exampleInputs2": "stones = [1]",
        "exampleOutputs2": "1"
    },
    {
        "id": 1047,
        "title": "1047. Remove All Adjacent Duplicates In String",
        "description": "You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.",
        "exampleInputs1": "s = \"abbaca\"",
        "exampleOutputs1": "\"ca\"",
        "exampleInputs2": "s = \"azxxzy\"",
        "exampleOutputs2": "\"ay\""
    },
    {
        "id": 1051,
        "title": "1051. Height Checker",
        "description": "A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line.",
        "exampleInputs1": "heights = [1,1,4,2,1,3]",
        "exampleOutputs1": "3",
        "exampleInputs2": "heights = [5,1,2,3,4]",
        "exampleOutputs2": "5",
        "exampleInputs3": "heights = [1,2,3,4,5]",
        "exampleOutputs3": "0"
    },
    {
        "id": 1071,
        "title": "1071. Greatest Common Divisor of Strings",
        "description": "For two strings s and t, we say \"t divides s\" if and only if s = t + ... + t  (t concatenated with itself 1 or more times)",
        "exampleInputs1": "str1 = \"ABCABC\", str2 = \"ABC\"",
        "exampleOutputs1": "\"ABC\"",
        "exampleInputs2": "str1 = \"ABABAB\", str2 = \"ABAB\"",
        "exampleOutputs2": "\"AB\"",
        "exampleInputs3": "str1 = \"LEET\", str2 = \"CODE\"",
        "exampleOutputs3": "\"\"",
        "exampleInputs4": "str1 = \"ABCDEF\", str2 = \"ABC\"",
        "exampleOutputs4": "\"\""
    },
    {
        "id": 1078,
        "title": "1078. Occurrences After Bigram",
        "description": "Given two strings first and second, consider occurrences in some text of the form \"first second third\", where second comes immediately after first, and third comes immediately after second.",
        "exampleInputs1": "text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\"",
        "exampleOutputs1": "[\"girl\",\"student\"]",
        "exampleInputs2": "text = \"we will we will rock you\", first = \"we\", second = \"will\"",
        "exampleOutputs2": "[\"we\",\"rock\"]"
    },
    {
        "id": 1089,
        "title": "1089. Duplicate Zeros",
        "description": "Given a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right.",
        "exampleInputs1": "arr = [1,0,2,3,0,4,5,0]",
        "exampleOutputs1": "[1,0,0,2,3,0,0,4]",
        "exampleInputs2": "arr = [1,2,3]",
        "exampleOutputs2": "[1,2,3]"
    },
    {
        "id": 1103,
        "title": "1103. Distribute Candies to People",
        "description": "We distribute some number of candies, to a row of n = num_people people in the following way:",
        "exampleInputs1": "candies = 7, num_people = 4",
        "exampleOutputs1": "[1,2,3,1]",
        "exampleInputs2": "candies = 10, num_people = 3",
        "exampleOutputs2": "[5,2,3]"
    },
    {
        "id": 1108,
        "title": "1108. Defanging an IP Address",
        "description": "Given a valid (IPv4) IP address, return a defanged version of that IP address.",
        "exampleInputs1": "address = \"1.1.1.1\"",
        "exampleOutputs1": "\"1[.]1[.]1[.]1\"",
        "exampleInputs2": "address = \"255.100.50.0\"",
        "exampleOutputs2": "\"255[.]100[.]50[.]0\""
    },
    {
        "id": 1122,
        "title": "1122. Relative Sort Array",
        "description": "Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1.",
        "exampleInputs1": "arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]",
        "exampleOutputs1": "[2,2,2,1,4,3,3,9,6,7,19]",
        "exampleInputs2": "arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]",
        "exampleOutputs2": "[22,28,8,6,17,44]"
    },
    {
        "id": 1128,
        "title": "1128. Number of Equivalent Domino Pairs",
        "description": "Given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - that is, one domino can be rotated to be equal to another domino.",
        "exampleInputs1": "dominoes = [[1,2],[2,1],[3,4],[5,6]]",
        "exampleOutputs1": "1",
        "exampleInputs2": "dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]",
        "exampleOutputs2": "3"
    },
    {
        "id": 1137,
        "title": "1137. N-th Tribonacci Number",
        "description": "The Tribonacci sequence Tn is defined as follows:",
        "exampleInputs1": "n = 4",
        "exampleOutputs1": "4",
        "exampleInputs2": "n = 25",
        "exampleOutputs2": "1389537"
    },
    {
        "id": 1154,
        "title": "1154. Day of the Year",
        "description": "Given a string date representing a Gregorian calendar date formatted as YYYY-MM-DD, return the day number of the year.",
        "exampleInputs1": "date = \"2019-01-09\"",
        "exampleOutputs1": "9",
        "exampleInputs2": "date = \"2019-02-10\"",
        "exampleOutputs2": "41",
        "exampleInputs3": "date = \"2003-03-01\"",
        "exampleOutputs3": "60",
        "exampleInputs4": "date = \"2004-03-01\"",
        "exampleOutputs4": "61"
    },
    {
        "id": 1160,
        "title": "1160. Find Words That Can Be Formed by Characters",
        "description": "You are given an array of strings words and a string chars.",
        "exampleInputs1": "words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\"",
        "exampleOutputs1": "6",
        "exampleInputs2": "words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\"",
        "exampleOutputs2": "10"
    },
    {
        "id": 1175,
        "title": "1175. Prime Arrangements",
        "description": "Return the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.)",
        "exampleInputs1": "n = 5",
        "exampleOutputs1": "12",
        "exampleInputs2": "n = 100",
        "exampleOutputs2": "682289015"
    },
    {
        "id": 1184,
        "title": "1184. Distance Between Bus Stops",
        "description": "A bus has n stops numbered from 0 to n - 1 that form a circle. We know the distance between all pairs of neighboring stops where distance[i] is the distance between the stops number i and (i + 1) % n.",
        "exampleInputs1": "distance = [1,2,3,4], start = 0, destination = 1",
        "exampleOutputs1": "1",
        "exampleInputs2": "distance = [1,2,3,4], start = 0, destination = 2",
        "exampleOutputs2": "3",
        "exampleInputs3": "distance = [1,2,3,4], start = 0, destination = 3",
        "exampleOutputs3": "4"
    },
    {
        "id": 1185,
        "title": "1185. Day of the Week",
        "description": "Given a date, return the corresponding day of the week for that date.",
        "exampleInputs1": "day = 31, month = 8, year = 2019",
        "exampleOutputs1": "\"Saturday\"",
        "exampleInputs2": "day = 18, month = 7, year = 1999",
        "exampleOutputs2": "\"Sunday\"",
        "exampleInputs3": "day = 15, month = 8, year = 1993",
        "exampleOutputs3": "\"Sunday\""
    },
    {
        "id": 1189,
        "title": "1189. Maximum Number of Balloons",
        "description": "Given a string text, you want to use the characters of text to form as many instances of the word \"balloon\" as possible.",
        "exampleInputs1": "text = \"nlaebolko\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "text = \"loonbalxballpoon\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "text = \"leetcode\"",
        "exampleOutputs3": "0"
    },
    {
        "id": 1200,
        "title": "1200. Minimum Absolute Difference",
        "description": "Given an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements.",
        "exampleInputs1": "arr = [4,2,1,3]",
        "exampleOutputs1": "[[1,2],[2,3],[3,4]]",
        "exampleInputs2": "arr = [1,3,6,10,15]",
        "exampleOutputs2": "[[1,3]]",
        "exampleInputs3": "arr = [3,8,-10,23,19,-4,-14,27]",
        "exampleOutputs3": "[[-14,-10],[19,23],[23,27]]"
    },
    {
        "id": 1207,
        "title": "1207. Unique Number of Occurrences",
        "description": "Given an array of integers arr, write a function that returns true if and only if the number of occurrences of each value in the array is unique.",
        "exampleInputs1": "arr = [1,2,2,1,1,3]",
        "exampleOutputs1": "true",
        "exampleInputs2": "arr = [1,2]",
        "exampleOutputs2": "false",
        "exampleInputs3": "arr = [-3,0,1,-3,1,1,1,-3,10,0]",
        "exampleOutputs3": "true"
    },
    {
        "id": 1217,
        "title": "1217. Minimum Cost to Move Chips to The Same Position",
        "description": "We have n chips, where the position of the ith chip is position[i].",
        "exampleInputs1": "position = [1,2,3]",
        "exampleOutputs1": "1",
        "exampleInputs2": "position = [2,2,2,3,3]",
        "exampleOutputs2": "2",
        "exampleInputs3": "position = [1,1000000000]",
        "exampleOutputs3": "1"
    },
    {
        "id": 1221,
        "title": "1221. Split a String in Balanced Strings",
        "description": "Balanced strings are those that have an equal quantity of 'L' and 'R' characters.",
        "exampleInputs1": "s = \"RLRRLLRLRL\"",
        "exampleOutputs1": "4",
        "exampleInputs2": "s = \"RLLLLRRRLR\"",
        "exampleOutputs2": "3",
        "exampleInputs3": "s = \"LLLLRRRR\"",
        "exampleOutputs3": "1",
        "exampleInputs4": "s = \"RLRRRLLRLL\"",
        "exampleOutputs4": "2"
    },
    {
        "id": 1232,
        "title": "1232. Check If It Is a Straight Line",
        "description": "You are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points make a straight line in the XY plane.",
        "exampleInputs1": "coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "exampleOutputs1": "true",
        "exampleInputs2": "coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]",
        "exampleOutputs2": "false"
    },
    {
        "id": 1252,
        "title": "1252. Cells with Odd Values in a Matrix",
        "description": "There is an m x n matrix that is initialized to all 0's. There is also a 2D array indices where each indices[i] = [ri, ci] represents a 0-indexed location to perform some increment operations on the matrix.",
        "exampleInputs1": "m = 2, n = 3, indices = [[0,1],[1,1]]",
        "exampleOutputs1": "6",
        "exampleInputs2": "m = 2, n = 2, indices = [[1,1],[0,0]]",
        "exampleOutputs2": "0"
    },
    {
        "id": 1260,
        "title": "1260. Shift 2D Grid",
        "description": "Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.",
        "exampleInputs1": "grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1",
        "exampleOutputs1": "[[9,1,2],[3,4,5],[6,7,8]]",
        "exampleInputs2": "grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4",
        "exampleOutputs2": "[[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]",
        "exampleInputs3": "grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9",
        "exampleOutputs3": "[[1,2,3],[4,5,6],[7,8,9]]"
    },
    {
        "id": 1266,
        "title": "1266. Minimum Time Visiting All Points",
        "description": "On a 2D plane, there are n points with integer coordinates points[i] = [xi, yi]. Return the minimum time in seconds to visit all the points in the order given by points.",
        "exampleInputs1": "points = [[1,1],[3,4],[-1,0]]",
        "exampleOutputs1": "7",
        "exampleInputs2": "points = [[3,2],[-2,2]]",
        "exampleOutputs2": "5"
    },
    {
        "id": 1275,
        "title": "1275. Find Winner on a Tic Tac Toe Game",
        "description": "Tic-tac-toe is played by two players A and B on a 3 x 3 grid.",
        "exampleInputs1": "moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]",
        "exampleOutputs1": "\"A\"",
        "exampleInputs2": "moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]",
        "exampleOutputs2": "\"B\"",
        "exampleInputs3": "moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]",
        "exampleOutputs3": "\"Draw\"",
        "exampleInputs4": "moves = [[0,0],[1,1]]",
        "exampleOutputs4": "\"Pending\""
    },
    {
        "id": 1281,
        "title": "1281. Subtract the Product and Sum of Digits of an Integer",
        "description": "",
        "exampleInputs1": "n = 234",
        "exampleOutputs1": "15",
        "exampleInputs2": "n = 4421",
        "exampleOutputs2": "21"
    },
    {
        "id": 1287,
        "title": "1287. Element Appearing More Than 25% In Sorted Array",
        "description": "Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.",
        "exampleInputs1": "arr = [1,2,2,6,6,6,6,7,10]",
        "exampleOutputs1": "6",
        "exampleInputs2": "arr = [1,1]",
        "exampleOutputs2": "1"
    },
    {
        "id": 1290,
        "title": "1290. Convert Binary Number in a Linked List to Integer",
        "description": "Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.",
        "exampleInputs1": "head = [1,0,1]",
        "exampleOutputs1": "5",
        "exampleInputs2": "head = [0]",
        "exampleOutputs2": "0",
        "exampleInputs3": "head = [1]",
        "exampleOutputs3": "1",
        "exampleInputs4": "head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]",
        "exampleOutputs4": "18880",
        "exampleInputs5": "head = [0,0]",
        "exampleOutputs5": "0"
    },
    {
        "id": 1295,
        "title": "1295. Find Numbers with Even Number of Digits",
        "description": "",
        "exampleInputs1": "nums = [12,345,2,6,7896]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [555,901,482,1771]",
        "exampleOutputs2": "1"
    },
    {
        "id": 1299,
        "title": "1299. Replace Elements with Greatest Element on Right Side",
        "description": "Given an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1.",
        "exampleInputs1": "arr = [17,18,5,4,6,1]",
        "exampleOutputs1": "[18,6,6,6,1,-1]",
        "exampleInputs2": "arr = [400]",
        "exampleOutputs2": "[-1]"
    },
    {
        "id": 1304,
        "title": "1304. Find N Unique Integers Sum up to Zero",
        "description": "Given an integer n, return any array containing n unique integers such that they add up to 0.",
        "exampleInputs1": "n = 5",
        "exampleOutputs1": "[-7,-1,1,3,4]",
        "exampleInputs2": "n = 3",
        "exampleOutputs2": "[-1,0,1]",
        "exampleInputs3": "n = 1",
        "exampleOutputs3": "[0]"
    },
    {
        "id": 1309,
        "title": "1309. Decrypt String from Alphabet to Integer Mapping",
        "description": "Given a string s formed by digits ('0' - '9') and '#' . We want to map s to English lowercase characters as follows:",
        "exampleInputs1": "s = \"10#11#12\"",
        "exampleOutputs1": "\"jkab\"",
        "exampleInputs2": "s = \"1326#\"",
        "exampleOutputs2": "\"acz\"",
        "exampleInputs3": "s = \"25#\"",
        "exampleOutputs3": "\"y\"",
        "exampleInputs4": "s = \"12345678910#11#12#13#14#15#16#17#18#19#20#21#22#23#24#25#26#\"",
        "exampleOutputs4": "\"abcdefghijklmnopqrstuvwxyz\""
    },
    {
        "id": 1313,
        "title": "1313. Decompress Run-Length Encoded List",
        "description": "We are given a list nums of integers representing a list compressed with run-length encoding.",
        "exampleInputs1": "nums = [1,2,3,4]",
        "exampleOutputs1": "[2,4,4,4]",
        "exampleInputs2": "nums = [1,1,2,3]",
        "exampleOutputs2": "[1,3,3]"
    },
    {
        "id": 1317,
        "title": "1317. Convert Integer to the Sum of Two No-Zero Integers",
        "description": "Given an integer n. No-Zero integer is a positive integer which doesn't contain any 0 in its decimal representation.",
        "exampleInputs1": "n = 2",
        "exampleOutputs1": "[1,1]",
        "exampleInputs2": "n = 11",
        "exampleOutputs2": "[2,9]",
        "exampleInputs3": "n = 10000",
        "exampleOutputs3": "[1,9999]",
        "exampleInputs4": "n = 69",
        "exampleOutputs4": "[1,68]",
        "exampleInputs5": "n = 1010",
        "exampleOutputs5": "[11,999]"
    },
    {
        "id": 1323,
        "title": "1323. Maximum 69 Number",
        "description": "Given a positive integer num consisting only of digits 6 and 9.",
        "exampleInputs1": "num = 9669",
        "exampleOutputs1": "9969",
        "exampleInputs2": "num = 9996",
        "exampleOutputs2": "9999",
        "exampleInputs3": "num = 9999",
        "exampleOutputs3": "9999"
    },
    {
        "id": 1331,
        "title": "1331. Rank Transform of an Array",
        "description": "Given an array of integers arr, replace each element with its rank.",
        "exampleInputs1": "arr = [40,10,20,30]",
        "exampleOutputs1": "[4,1,2,3]",
        "exampleInputs2": "arr = [100,100,100]",
        "exampleOutputs2": "[1,1,1]",
        "exampleInputs3": "arr = [37,12,28,9,100,56,80,5,12]",
        "exampleOutputs3": "[5,3,4,2,8,6,7,1,3]"
    },
    {
        "id": 1332,
        "title": "1332. Remove Palindromic Subsequences",
        "description": "You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.",
        "exampleInputs1": "s = \"ababa\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "s = \"abb\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "s = \"baabb\"",
        "exampleOutputs3": "2"
    },
    {
        "id": 1337,
        "title": "1337. The K Weakest Rows in a Matrix",
        "description": "You are given an m x n binary matrix mat of 1's (representing soldiers) and 0's (representing civilians). The soldiers are positioned in front of the civilians. That is, all the 1's will appear to the left of all the 0's in each row.",
        "exampleInputs1": "mat =",
        "exampleOutputs1": "[[1,1,0,0,0],",
        "exampleInputs2": "mat =",
        "exampleOutputs2": "[[1,0,0,0],"
    },
    {
        "id": 1342,
        "title": "1342. Number of Steps to Reduce a Number to Zero",
        "description": "Given an integer num, return the number of steps to reduce it to zero.",
        "exampleInputs1": "num = 14",
        "exampleOutputs1": "6",
        "exampleInputs2": "num = 8",
        "exampleOutputs2": "4",
        "exampleInputs3": "num = 123",
        "exampleOutputs3": "12"
    },
    {
        "id": 1346,
        "title": "1346. Check If N and Its Double Exist",
        "description": "Given an array arr of integers, check if there exists two integers N and M such that N is the double of M ( i.e. N = 2 * M).",
        "exampleInputs1": "arr = [10,2,5,3]",
        "exampleOutputs1": "true",
        "exampleInputs2": "arr = [7,1,14,11]",
        "exampleOutputs2": "true",
        "exampleInputs3": "arr = [3,1,7,11]",
        "exampleOutputs3": "false"
    },
    {
        "id": 1351,
        "title": "1351. Count Negative Numbers in a Sorted Matrix",
        "description": "Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.",
        "exampleInputs1": "grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]",
        "exampleOutputs1": "8",
        "exampleInputs2": "grid = [[3,2],[1,0]]",
        "exampleOutputs2": "0",
        "exampleInputs3": "grid = [[1,-1],[-1,-1]]",
        "exampleOutputs3": "3",
        "exampleInputs4": "grid = [[-1]]",
        "exampleOutputs4": "1"
    },
    {
        "id": 1356,
        "title": "1356. Sort Integers by The Number of 1 Bits",
        "description": "Given an integer array arr. You have to sort the integers in the array in ascending order by the number of 1's in their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order.",
        "exampleInputs1": "arr = [0,1,2,3,4,5,6,7,8]",
        "exampleOutputs1": "[0,1,2,4,8,3,5,6,7]",
        "exampleInputs2": "arr = [1024,512,256,128,64,32,16,8,4,2,1]",
        "exampleOutputs2": "[1,2,4,8,16,32,64,128,256,512,1024]",
        "exampleInputs3": "arr = [10000,10000]",
        "exampleOutputs3": "[10000,10000]",
        "exampleInputs4": "arr = [2,3,5,7,11,13,17,19]",
        "exampleOutputs4": "[2,3,5,17,7,11,13,19]",
        "exampleInputs5": "arr = [10,100,1000,10000]",
        "exampleOutputs5": "[10,100,10000,1000]"
    },
    {
        "id": 1360,
        "title": "1360. Number of Days Between Two Dates",
        "description": "Write a program to count the number of days between two dates.",
        "exampleInputs1": "date1 = \"2019-06-29\", date2 = \"2019-06-30\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "date1 = \"2020-01-15\", date2 = \"2019-12-31\"",
        "exampleOutputs2": "15"
    },
    {
        "id": 1365,
        "title": "1365. How Many Numbers Are Smaller Than the Current Number",
        "description": "Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].",
        "exampleInputs1": "nums = [8,1,2,2,3]",
        "exampleOutputs1": "[4,0,1,1,3]",
        "exampleInputs2": "nums = [6,5,4,8]",
        "exampleOutputs2": "[2,1,0,3]",
        "exampleInputs3": "nums = [7,7,7,7]",
        "exampleOutputs3": "[0,0,0,0]"
    },
    {
        "id": 1370,
        "title": "1370. Increasing Decreasing String",
        "description": "Given a string s. You should re-order the string using the following algorithm:",
        "exampleInputs1": "s = \"aaaabbbbcccc\"",
        "exampleOutputs1": "\"abccbaabccba\"",
        "exampleInputs2": "s = \"rat\"",
        "exampleOutputs2": "\"art\"",
        "exampleInputs3": "s = \"leetcode\"",
        "exampleOutputs3": "\"cdelotee\"",
        "exampleInputs4": "s = \"ggggggg\"",
        "exampleOutputs4": "\"ggggggg\"",
        "exampleInputs5": "s = \"spo\"",
        "exampleOutputs5": "\"ops\""
    },
    {
        "id": 1374,
        "title": "1374. Generate a String With Characters That Have Odd Counts",
        "description": "Given an integer n, return a string with n characters such that each character in such string occurs an odd number of times.",
        "exampleInputs1": "n = 4",
        "exampleOutputs1": "\"pppz\"",
        "exampleInputs2": "n = 2",
        "exampleOutputs2": "\"xy\"",
        "exampleInputs3": "n = 7",
        "exampleOutputs3": "\"holasss\""
    },
    {
        "id": 1380,
        "title": "1380. Lucky Numbers in a Matrix",
        "description": "Given a m * n matrix of distinct numbers, return all lucky numbers in the matrix in any order.",
        "exampleInputs1": "matrix = [[3,7,8],[9,11,13],[15,16,17]]",
        "exampleOutputs1": "[15]",
        "exampleInputs2": "matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]",
        "exampleOutputs2": "[12]",
        "exampleInputs3": "matrix = [[7,8],[1,2]]",
        "exampleOutputs3": "[7]"
    },
    {
        "id": 1385,
        "title": "1385. Find the Distance Value Between Two Arrays",
        "description": "Given two integer arrays arr1 and arr2, and the integer d, return the distance value between the two arrays.",
        "exampleInputs1": "arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2",
        "exampleOutputs1": "2",
        "exampleInputs2": "arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3",
        "exampleOutputs2": "2",
        "exampleInputs3": "arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6",
        "exampleOutputs3": "1"
    },
    {
        "id": 1389,
        "title": "1389. Create Target Array in the Given Order",
        "description": "Given two arrays of integers nums and index. Your task is to create target array under the following rules:",
        "exampleInputs1": "nums = [0,1,2,3,4], index = [0,1,2,2,1]",
        "exampleOutputs1": "[0,4,1,3,2]",
        "exampleInputs2": "nums = [1,2,3,4,0], index = [0,1,2,3,0]",
        "exampleOutputs2": "[0,1,2,3,4]",
        "exampleInputs3": "nums = [1], index = [0]",
        "exampleOutputs3": "[1]"
    },
    {
        "id": 1394,
        "title": "1394. Find Lucky Integer in an Array",
        "description": "Given an array of integers arr, a lucky integer is an integer which has a frequency in the array equal to its value.",
        "exampleInputs1": "arr = [2,2,3,4]",
        "exampleOutputs1": "2",
        "exampleInputs2": "arr = [1,2,2,3,3,3]",
        "exampleOutputs2": "3",
        "exampleInputs3": "arr = [2,2,2,3,3]",
        "exampleOutputs3": "-1",
        "exampleInputs4": "arr = [5]",
        "exampleOutputs4": "-1",
        "exampleInputs5": "arr = [7,7,7,7,7,7,7]",
        "exampleOutputs5": "7"
    },
    {
        "id": 1399,
        "title": "1399. Count Largest Group",
        "description": "Given an integer n. Each number from 1 to n is grouped according to the sum of its digits.",
        "exampleInputs1": "n = 13",
        "exampleOutputs1": "4",
        "exampleInputs2": "n = 2",
        "exampleOutputs2": "2",
        "exampleInputs3": "n = 15",
        "exampleOutputs3": "6",
        "exampleInputs4": "n = 24",
        "exampleOutputs4": "5"
    },
    {
        "id": 1403,
        "title": "1403. Minimum Subsequence in Non-Increasing Order",
        "description": "Given the array nums, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non included elements in such subsequence.",
        "exampleInputs1": "nums = [4,3,10,9,8]",
        "exampleOutputs1": "[10,9]",
        "exampleInputs2": "nums = [4,4,7,6,7]",
        "exampleOutputs2": "[7,7,6]",
        "exampleInputs3": "nums = [6]",
        "exampleOutputs3": "[6]"
    },
    {
        "id": 1408,
        "title": "1408. String Matching in an Array",
        "description": "Given an array of string words. Return all strings in words which is substring of another word in any order.",
        "exampleInputs1": "words = [\"mass\",\"as\",\"hero\",\"superhero\"]",
        "exampleOutputs1": "[\"as\",\"hero\"]",
        "exampleInputs2": "words = [\"leetcode\",\"et\",\"code\"]",
        "exampleOutputs2": "[\"et\",\"code\"]",
        "exampleInputs3": "words = [\"blue\",\"green\",\"bu\"]",
        "exampleOutputs3": "[]"
    },
    {
        "id": 1413,
        "title": "1413. Minimum Value to Get Positive Step by Step Sum",
        "description": "Given an array of integers nums, you start with an initial positive value startValue.",
        "exampleInputs1": "nums = [-3,2,-3,4,2]",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [1,2]",
        "exampleOutputs2": "1",
        "exampleInputs3": "nums = [1,-2,-3]",
        "exampleOutputs3": "5"
    },
    {
        "id": 1417,
        "title": "1417. Reformat The String",
        "description": "Given alphanumeric string s. (Alphanumeric string is a string consisting of lowercase English letters and digits).",
        "exampleInputs1": "s = \"a0b1c2\"",
        "exampleOutputs1": "\"0a1b2c\"",
        "exampleInputs2": "s = \"leetcode\"",
        "exampleOutputs2": "\"\"",
        "exampleInputs3": "s = \"1229857369\"",
        "exampleOutputs3": "\"\"",
        "exampleInputs4": "s = \"covid2019\"",
        "exampleOutputs4": "\"c2o0v1i9d\"",
        "exampleInputs5": "s = \"ab123\"",
        "exampleOutputs5": "\"1a2b3\""
    },
    {
        "id": 1422,
        "title": "1422. Maximum Score After Splitting a String",
        "description": "Given a string s of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring).",
        "exampleInputs1": "s = \"011101\"",
        "exampleOutputs1": "5",
        "exampleInputs2": "s = \"00111\"",
        "exampleOutputs2": "5",
        "exampleInputs3": "s = \"1111\"",
        "exampleOutputs3": "3"
    },
    {
        "id": 1431,
        "title": "1431. Kids With the Greatest Number of Candies",
        "description": "There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extraCandies, denoting the number of extra candies that you have.",
        "exampleInputs1": "candies = [2,3,5,1,3], extraCandies = 3",
        "exampleOutputs1": "[true,true,true,false,true]",
        "exampleInputs2": "candies = [4,2,1,1,2], extraCandies = 1",
        "exampleOutputs2": "[true,false,false,false,false]",
        "exampleInputs3": "candies = [12,1,12], extraCandies = 10",
        "exampleOutputs3": "[true,false,true]"
    },
    {
        "id": 1436,
        "title": "1436. Destination City",
        "description": "You are given the array paths, where paths[i] = [cityAi, cityBi] means there exists a direct path going from cityAi to cityBi. Return the destination city, that is, the city without any path outgoing to another city.",
        "exampleInputs1": "paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]",
        "exampleOutputs1": "\"Sao Paulo\"",
        "exampleInputs2": "paths = [[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]]",
        "exampleOutputs2": "\"A\"",
        "exampleInputs3": "paths = [[\"A\",\"Z\"]]",
        "exampleOutputs3": "\"Z\""
    },
    {
        "id": 1437,
        "title": "1437. Check If All 1's Are at Least Length K Places Away",
        "description": "Given an array nums of 0s and 1s and an integer k, return True if all 1's are at least k places away from each other, otherwise return False.",
        "exampleInputs1": "nums = [1,0,0,0,1,0,0,1], k = 2",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [1,0,0,1,0,1], k = 2",
        "exampleOutputs2": "false",
        "exampleInputs3": "nums = [1,1,1,1,1], k = 0",
        "exampleOutputs3": "true",
        "exampleInputs4": "nums = [0,1,0,1], k = 1",
        "exampleOutputs4": "true"
    },
    {
        "id": 1441,
        "title": "1441. Build an Array With Stack Operations",
        "description": "Given an array target and an integer n. In each iteration, you will read a number from  list = {1,2,3..., n}.",
        "exampleInputs1": "target = [1,3], n = 3",
        "exampleOutputs1": "[\"Push\",\"Push\",\"Pop\",\"Push\"]",
        "exampleInputs2": "target = [1,2,3], n = 3",
        "exampleOutputs2": "[\"Push\",\"Push\",\"Push\"]",
        "exampleInputs3": "target = [1,2], n = 4",
        "exampleOutputs3": "[\"Push\",\"Push\"]",
        "exampleInputs4": "target = [2,3,4], n = 4",
        "exampleOutputs4": "[\"Push\",\"Pop\",\"Push\",\"Push\",\"Push\"]"
    },
    {
        "id": 1446,
        "title": "1446. Consecutive Characters",
        "description": "The power of the string is the maximum length of a non-empty substring that contains only one unique character.",
        "exampleInputs1": "s = \"leetcode\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"abbcccddddeeeeedcba\"",
        "exampleOutputs2": "5",
        "exampleInputs3": "s = \"triplepillooooow\"",
        "exampleOutputs3": "5",
        "exampleInputs4": "s = \"hooraaaaaaaaaaay\"",
        "exampleOutputs4": "11",
        "exampleInputs5": "s = \"tourist\"",
        "exampleOutputs5": "1"
    },
    {
        "id": 1450,
        "title": "1450. Number of Students Doing Homework at a Given Time",
        "description": "Given two integer arrays startTime and endTime and given an integer queryTime.",
        "exampleInputs1": "startTime = [1,2,3], endTime = [3,2,7], queryTime = 4",
        "exampleOutputs1": "1",
        "exampleInputs2": "startTime = [4], endTime = [4], queryTime = 4",
        "exampleOutputs2": "1",
        "exampleInputs3": "startTime = [4], endTime = [4], queryTime = 5",
        "exampleOutputs3": "0",
        "exampleInputs4": "startTime = [1,1,1,1], endTime = [1,3,2,4], queryTime = 7",
        "exampleOutputs4": "0",
        "exampleInputs5": "startTime = [9,8,7,6,5,4,3,2,1], endTime = [10,10,10,10,10,10,10,10,10], queryTime = 5",
        "exampleOutputs5": "5"
    },
    {
        "id": 1455,
        "title": "1455. Check If a Word Occurs As a Prefix of Any Word in a Sentence",
        "description": "Given a sentence that consists of some words separated by a single space, and a searchWord, check if searchWord is a prefix of any word in sentence.",
        "exampleInputs1": "sentence = \"i love eating burger\", searchWord = \"burg\"",
        "exampleOutputs1": "4",
        "exampleInputs2": "sentence = \"this problem is an easy problem\", searchWord = \"pro\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "sentence = \"i am tired\", searchWord = \"you\"",
        "exampleOutputs3": "-1",
        "exampleInputs4": "sentence = \"i use triple pillow\", searchWord = \"pill\"",
        "exampleOutputs4": "4",
        "exampleInputs5": "sentence = \"hello from the other side\", searchWord = \"they\"",
        "exampleOutputs5": "-1"
    },
    {
        "id": 1460,
        "title": "1460. Make Two Arrays Equal by Reversing Sub-arrays",
        "description": "Given two integer arrays of equal length target and arr.",
        "exampleInputs1": "target = [1,2,3,4], arr = [2,4,1,3]",
        "exampleOutputs1": "true",
        "exampleInputs2": "target = [7], arr = [7]",
        "exampleOutputs2": "true",
        "exampleInputs3": "target = [1,12], arr = [12,1]",
        "exampleOutputs3": "true",
        "exampleInputs4": "target = [3,7,9], arr = [3,7,11]",
        "exampleOutputs4": "false",
        "exampleInputs5": "target = [1,1,1,1,1], arr = [1,1,1,1,1]",
        "exampleOutputs5": "true"
    },
    {
        "id": 1464,
        "title": "1464. Maximum Product of Two Elements in an Array",
        "description": "",
        "exampleInputs1": "nums = [3,4,5,2]",
        "exampleOutputs1": "12",
        "exampleInputs2": "nums = [1,5,4,5]",
        "exampleOutputs2": "16",
        "exampleInputs3": "nums = [3,7]",
        "exampleOutputs3": "12"
    },
    {
        "id": 1470,
        "title": "1470. Shuffle the Array",
        "description": "Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].",
        "exampleInputs1": "nums = [2,5,1,3,4,7], n = 3",
        "exampleOutputs1": "[2,3,5,4,1,7]",
        "exampleInputs2": "nums = [1,2,3,4,4,3,2,1], n = 4",
        "exampleOutputs2": "[1,4,2,3,3,2,4,1]",
        "exampleInputs3": "nums = [1,1,2,2], n = 2",
        "exampleOutputs3": "[1,2,1,2]"
    },
    {
        "id": 1475,
        "title": "1475. Final Prices With a Special Discount in a Shop",
        "description": "Given the array prices where prices[i] is the price of the ith item in a shop. There is a special discount for items in the shop, if you buy the ith item, then you will receive a discount equivalent to prices[j] where j is the minimum index such that j > i and prices[j] <= prices[i], otherwise, you will not receive any discount at all.",
        "exampleInputs1": "prices = [8,4,6,2,3]",
        "exampleOutputs1": "[4,2,4,2,3]",
        "exampleInputs2": "prices = [1,2,3,4,5]",
        "exampleOutputs2": "[1,2,3,4,5]",
        "exampleInputs3": "prices = [10,1,1,6]",
        "exampleOutputs3": "[9,0,1,6]"
    },
    {
        "id": 1480,
        "title": "1480. Running Sum of 1d Array",
        "description": "Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]).",
        "exampleInputs1": "nums = [1,2,3,4]",
        "exampleOutputs1": "[1,3,6,10]",
        "exampleInputs2": "nums = [1,1,1,1,1]",
        "exampleOutputs2": "[1,2,3,4,5]",
        "exampleInputs3": "nums = [3,1,2,10,1]",
        "exampleOutputs3": "[3,4,6,16,17]"
    },
    {
        "id": 1486,
        "title": "1486. XOR Operation in an Array",
        "description": "Given an integer n and an integer start.",
        "exampleInputs1": "n = 5, start = 0",
        "exampleOutputs1": "8",
        "exampleInputs2": "n = 4, start = 3",
        "exampleOutputs2": "8",
        "exampleInputs3": "n = 1, start = 7",
        "exampleOutputs3": "7",
        "exampleInputs4": "n = 10, start = 5",
        "exampleOutputs4": "2"
    },
    {
        "id": 1491,
        "title": "1491. Average Salary Excluding the Minimum and Maximum Salary",
        "description": "Given an array of unique integers salary where salary[i] is the salary of the employee i.",
        "exampleInputs1": "salary = [4000,3000,1000,2000]",
        "exampleOutputs1": "2500.00000",
        "exampleInputs2": "salary = [1000,2000,3000]",
        "exampleOutputs2": "2000.00000",
        "exampleInputs3": "salary = [6000,5000,4000,3000,2000,1000]",
        "exampleOutputs3": "3500.00000",
        "exampleInputs4": "salary = [8000,9000,2000,3000,6000,1000]",
        "exampleOutputs4": "4750.00000"
    },
    {
        "id": 1496,
        "title": "1496. Path Crossing",
        "description": "Given a string path, where path[i] = 'N', 'S', 'E' or 'W', each representing moving one unit north, south, east, or west, respectively. You start at the origin (0, 0) on a 2D plane and walk on the path specified by path.",
        "exampleInputs1": "path = \"NES\"",
        "exampleOutputs1": "false",
        "exampleInputs2": "path = \"NESWW\"",
        "exampleOutputs2": "true"
    },
    {
        "id": 1502,
        "title": "1502. Can Make Arithmetic Progression From Sequence",
        "description": "A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.",
        "exampleInputs1": "arr = [3,5,1]",
        "exampleOutputs1": "true",
        "exampleInputs2": "arr = [1,2,4]",
        "exampleOutputs2": "false"
    },
    {
        "id": 1507,
        "title": "1507. Reformat Date",
        "description": "Given a date string in the form Day Month Year, where:",
        "exampleInputs1": "date = \"20th Oct 2052\"",
        "exampleOutputs1": "\"2052-10-20\"",
        "exampleInputs2": "date = \"6th Jun 1933\"",
        "exampleOutputs2": "\"1933-06-06\"",
        "exampleInputs3": "date = \"26th May 1960\"",
        "exampleOutputs3": "\"1960-05-26\""
    },
    {
        "id": 1512,
        "title": "1512. Number of Good Pairs",
        "description": "Given an array of integers nums, return the number of good pairs.",
        "exampleInputs1": "nums = [1,2,3,1,1,3]",
        "exampleOutputs1": "4",
        "exampleInputs2": "nums = [1,1,1,1]",
        "exampleOutputs2": "6",
        "exampleInputs3": "nums = [1,2,3]",
        "exampleOutputs3": "0"
    },
    {
        "id": 1518,
        "title": "1518. Water Bottles",
        "description": "Given numBottles full water bottles, you can exchange numExchange empty water bottles for one full water bottle.",
        "exampleInputs1": "numBottles = 9, numExchange = 3",
        "exampleOutputs1": "13",
        "exampleInputs2": "numBottles = 15, numExchange = 4",
        "exampleOutputs2": "19",
        "exampleInputs3": "numBottles = 5, numExchange = 5",
        "exampleOutputs3": "6",
        "exampleInputs4": "numBottles = 2, numExchange = 3",
        "exampleOutputs4": "2"
    },
    {
        "id": 1523,
        "title": "1523. Count Odd Numbers in an Interval Range",
        "description": "Given two non-negative integers low and high. Return the count of odd numbers between low and high (inclusive).",
        "exampleInputs1": "low = 3, high = 7",
        "exampleOutputs1": "3",
        "exampleInputs2": "low = 8, high = 10",
        "exampleOutputs2": "1"
    },
    {
        "id": 1528,
        "title": "1528. Shuffle String",
        "description": "Given a string s and an integer array indices of the same length.",
        "exampleInputs1": "s = \"codeleet\", indices = [4,5,6,7,0,2,1,3]",
        "exampleOutputs1": "\"leetcode\"",
        "exampleInputs2": "s = \"abc\", indices = [0,1,2]",
        "exampleOutputs2": "\"abc\"",
        "exampleInputs3": "s = \"aiohn\", indices = [3,1,4,2,0]",
        "exampleOutputs3": "\"nihao\"",
        "exampleInputs4": "s = \"aaiougrt\", indices = [4,0,2,6,7,3,1,5]",
        "exampleOutputs4": "\"arigatou\"",
        "exampleInputs5": "s = \"art\", indices = [1,0,2]",
        "exampleOutputs5": "\"rat\""
    },
    {
        "id": 1534,
        "title": "1534. Count Good Triplets",
        "description": "Given an array of integers arr, and three integers a, b and c. You need to find the number of good triplets.",
        "exampleInputs1": "arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3",
        "exampleOutputs1": "4",
        "exampleInputs2": "arr = [1,1,2,2,3], a = 0, b = 0, c = 1",
        "exampleOutputs2": "0"
    },
    {
        "id": 1539,
        "title": "1539. Kth Missing Positive Number",
        "description": "Given an array arr of positive integers sorted in a strictly increasing order, and an integer k.",
        "exampleInputs1": "arr = [2,3,4,7,11], k = 5",
        "exampleOutputs1": "9",
        "exampleInputs2": "arr = [1,2,3,4], k = 2",
        "exampleOutputs2": "6"
    },
    {
        "id": 1544,
        "title": "1544. Make The String Great",
        "description": "Given a string s of lower and upper case English letters.",
        "exampleInputs1": "s = \"leEeetcode\"",
        "exampleOutputs1": "\"leetcode\"",
        "exampleInputs2": "s = \"abBAcC\"",
        "exampleOutputs2": "\"\"",
        "exampleInputs3": "s = \"s\"",
        "exampleOutputs3": "\"s\""
    },
    {
        "id": 1550,
        "title": "1550. Three Consecutive Odds",
        "description": "",
        "exampleInputs1": "arr = [2,6,4,1]",
        "exampleOutputs1": "false",
        "exampleInputs2": "arr = [1,2,34,3,4,5,7,23,12]",
        "exampleOutputs2": "true"
    },
    {
        "id": 1556,
        "title": "1556. Thousand Separator",
        "description": "Given an integer n, add a dot (\".\") as the thousands separator and return it in string format.",
        "exampleInputs1": "n = 987",
        "exampleOutputs1": "\"987\"",
        "exampleInputs2": "n = 1234",
        "exampleOutputs2": "\"1.234\"",
        "exampleInputs3": "n = 123456789",
        "exampleOutputs3": "\"123.456.789\"",
        "exampleInputs4": "n = 0",
        "exampleOutputs4": "\"0\""
    },
    {
        "id": 1560,
        "title": "1560. Most Visited Sector in  a Circular Track",
        "description": "Given an integer n and an integer array rounds. We have a circular track which consists of n sectors labeled from 1 to n. A marathon will be held on this track, the marathon consists of m rounds. The ith round starts at sector rounds[i - 1] and ends at sector rounds[i]. For example, round 1 starts at sector rounds[0] and ends at sector rounds[1]",
        "exampleInputs1": "n = 4, rounds = [1,3,1,2]",
        "exampleOutputs1": "[1,2]",
        "exampleInputs2": "n = 2, rounds = [2,1,2,1,2,1,2,1,2]",
        "exampleOutputs2": "[2]",
        "exampleInputs3": "n = 7, rounds = [1,3,5,7]",
        "exampleOutputs3": "[1,2,3,4,5,6,7]"
    },
    {
        "id": 1566,
        "title": "1566. Detect Pattern of Length M Repeated K or More Times",
        "description": "Given an array of positive integers arr,  find a pattern of length m that is repeated k or more times.",
        "exampleInputs1": "arr = [1,2,4,4,4,4], m = 1, k = 3",
        "exampleOutputs1": "true",
        "exampleInputs2": "arr = [1,2,1,2,1,1,1,3], m = 2, k = 2",
        "exampleOutputs2": "true",
        "exampleInputs3": "arr = [1,2,1,2,1,3], m = 2, k = 3",
        "exampleOutputs3": "false",
        "exampleInputs4": "arr = [1,2,3,1,2], m = 2, k = 2",
        "exampleOutputs4": "false",
        "exampleInputs5": "arr = [2,2,2,2], m = 2, k = 3",
        "exampleOutputs5": "false"
    },
    {
        "id": 1572,
        "title": "1572. Matrix Diagonal Sum",
        "description": "Given a square matrix mat, return the sum of the matrix diagonals.",
        "exampleInputs1": "mat = [[1,2,3],",
        "exampleOutputs1": "[4,5,6],",
        "exampleInputs2": "mat = [[1,1,1,1],",
        "exampleOutputs2": "[1,1,1,1],",
        "exampleInputs3": "mat = [[5]]",
        "exampleOutputs3": "5"
    },
    {
        "id": 1576,
        "title": "1576. Replace All ?'s to Avoid Consecutive Repeating Characters",
        "description": "Given a string s containing only lowercase English letters and the '?' character, convert all the '?' characters into lowercase letters such that the final string does not contain any consecutive repeating characters. You cannot modify the non '?' characters.",
        "exampleInputs1": "s = \"?zs\"",
        "exampleOutputs1": "\"azs\"",
        "exampleInputs2": "s = \"ubv?w\"",
        "exampleOutputs2": "\"ubvaw\"",
        "exampleInputs3": "s = \"j?qg??b\"",
        "exampleOutputs3": "\"jaqgacb\"",
        "exampleInputs4": "s = \"??yw?ipkj?\"",
        "exampleOutputs4": "\"acywaipkja\""
    },
    {
        "id": 1582,
        "title": "1582. Special Positions in a Binary Matrix",
        "description": "Given a rows x cols matrix mat, where mat[i][j] is either 0 or 1, return the number of special positions in mat.",
        "exampleInputs1": "mat = [[1,0,0],",
        "exampleOutputs1": "[0,0,1],",
        "exampleInputs2": "mat = [[1,0,0],",
        "exampleOutputs2": "[0,1,0],",
        "exampleInputs3": "mat = [[0,0,0,1],",
        "exampleOutputs3": "[1,0,0,0],",
        "exampleInputs4": "mat = [[0,0,0,0,0],",
        "exampleOutputs4": "[1,0,0,0,0],"
    },
    {
        "id": 1588,
        "title": "1588. Sum of All Odd Length Subarrays",
        "description": "Given an array of positive integers arr, calculate the sum of all possible odd-length subarrays.",
        "exampleInputs1": "arr = [1,4,2,5,3]",
        "exampleOutputs1": "58",
        "exampleInputs2": "arr = [1,2]",
        "exampleOutputs2": "3",
        "exampleInputs3": "arr = [10,11,12]",
        "exampleOutputs3": "66"
    },
    {
        "id": 1592,
        "title": "1592. Rearrange Spaces Between Words",
        "description": "You are given a string text of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It's guaranteed that text contains at least one word.",
        "exampleInputs1": "text = \"  this   is  a sentence \"",
        "exampleOutputs1": "\"this   is   a   sentence\"",
        "exampleInputs2": "text = \" practice   makes   perfect\"",
        "exampleOutputs2": "\"practice   makes   perfect \"",
        "exampleInputs3": "text = \"hello   world\"",
        "exampleOutputs3": "\"hello   world\"",
        "exampleInputs4": "text = \"  walks  udp package   into  bar a\"",
        "exampleOutputs4": "\"walks  udp  package  into  bar  a \"",
        "exampleInputs5": "text = \"a\"",
        "exampleOutputs5": "\"a\""
    },
    {
        "id": 1598,
        "title": "1598. Crawler Log Folder",
        "description": "The Leetcode file system keeps a log each time some user performs a change folder operation.",
        "exampleInputs1": "logs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]",
        "exampleOutputs1": "2",
        "exampleInputs2": "logs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"]",
        "exampleOutputs2": "3",
        "exampleInputs3": "logs = [\"d1/\",\"../\",\"../\",\"../\"]",
        "exampleOutputs3": "0"
    },
    {
        "id": 1603,
        "title": "1603. Design Parking System",
        "description": "Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"ParkingSystem\", \"addCar\", \"addCar\", \"addCar\", \"addCar\"]"
    },
    {
        "id": 1608,
        "title": "1608. Special Array With X Elements Greater Than or Equal X",
        "description": "You are given an array nums of non-negative integers. nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x.",
        "exampleInputs1": "nums = [3,5]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [0,0]",
        "exampleOutputs2": "-1",
        "exampleInputs3": "nums = [0,4,3,0,4]",
        "exampleOutputs3": "3",
        "exampleInputs4": "nums = [3,6,7,7,0]",
        "exampleOutputs4": "-1"
    },
    {
        "id": 1614,
        "title": "1614. Maximum Nesting Depth of the Parentheses",
        "description": "A string is a valid parentheses string (denoted VPS) if it meets one of the following:",
        "exampleInputs1": "s = \"(1+(2*3)+((8)/4))+1\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "s = \"(1)+((2))+(((3)))\"",
        "exampleOutputs2": "3",
        "exampleInputs3": "s = \"1+(2*3)/(2-1)\"",
        "exampleOutputs3": "1",
        "exampleInputs4": "s = \"1\"",
        "exampleOutputs4": "0"
    },
    {
        "id": 1619,
        "title": "1619. Mean of Array After Removing Some Elements",
        "description": "Given an integer array arr, return the mean of the remaining integers after removing the smallest 5% and the largest 5% of the elements.",
        "exampleInputs1": "arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]",
        "exampleOutputs1": "2.00000",
        "exampleInputs2": "arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]",
        "exampleOutputs2": "4.00000",
        "exampleInputs3": "arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]",
        "exampleOutputs3": "4.77778",
        "exampleInputs4": "arr = [9,7,8,7,7,8,4,4,6,8,8,7,6,8,8,9,2,6,0,0,1,10,8,6,3,3,5,1,10,9,0,7,10,0,10,4,1,10,6,9,3,6,0,0,2,7,0,6,7,2,9,7,7,3,0,1,6,1,10,3]",
        "exampleOutputs4": "5.27778",
        "exampleInputs5": "arr = [4,8,4,10,0,7,1,3,7,8,8,3,4,1,6,2,1,1,8,0,9,8,0,3,9,10,3,10,1,10,7,3,2,1,4,9,10,7,6,4,0,8,5,1,2,1,6,2,5,0,7,10,9,10,3,7,10,5,8,5,7,6,7,6,10,9,5,10,5,5,7,2,10,7,7,8,2,0,1,1]",
        "exampleOutputs5": "5.29167"
    },
    {
        "id": 1624,
        "title": "1624. Largest Substring Between Two Equal Characters",
        "description": "Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.",
        "exampleInputs1": "s = \"aa\"",
        "exampleOutputs1": "0",
        "exampleInputs2": "s = \"abca\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "s = \"cbzxy\"",
        "exampleOutputs3": "-1",
        "exampleInputs4": "s = \"cabbac\"",
        "exampleOutputs4": "4"
    },
    {
        "id": 1629,
        "title": "1629. Slowest Key",
        "description": "A newly designed keypad was tested, where a tester pressed a sequence of n keys, one at a time.",
        "exampleInputs1": "releaseTimes = [9,29,49,50], keysPressed = \"cbcd\"",
        "exampleOutputs1": "\"c\"",
        "exampleInputs2": "releaseTimes = [12,23,36,46,62], keysPressed = \"spuda\"",
        "exampleOutputs2": "\"a\""
    },
    {
        "id": 1636,
        "title": "1636. Sort Array by Increasing Frequency",
        "description": "Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.",
        "exampleInputs1": "nums = [1,1,2,2,2,3]",
        "exampleOutputs1": "[3,1,1,2,2,2]",
        "exampleInputs2": "nums = [2,3,1,3,2]",
        "exampleOutputs2": "[1,3,3,2,2]",
        "exampleInputs3": "nums = [-1,1,-6,4,5,-6,1,4,1]",
        "exampleOutputs3": "[5,-1,4,4,-6,-6,1,1,1]"
    },
    {
        "id": 1640,
        "title": "1640. Check Array Formation Through Concatenation",
        "description": "You are given an array of distinct integers arr and an array of integer arrays pieces, where the integers in pieces are distinct. Your goal is to form arr by concatenating the arrays in pieces in any order. However, you are not allowed to reorder the integers in each array pieces[i].",
        "exampleInputs1": "arr = [85], pieces = [[85]]",
        "exampleOutputs1": "true",
        "exampleInputs2": "arr = [15,88], pieces = [[88],[15]]",
        "exampleOutputs2": "true",
        "exampleInputs3": "arr = [49,18,16], pieces = [[16,18,49]]",
        "exampleOutputs3": "false",
        "exampleInputs4": "arr = [91,4,64,78], pieces = [[78],[4,64],[91]]",
        "exampleOutputs4": "true",
        "exampleInputs5": "arr = [1,3,5,7], pieces = [[2,4,6,8]]",
        "exampleOutputs5": "false"
    },
    {
        "id": 1646,
        "title": "1646. Get Maximum in Generated Array",
        "description": "You are given an integer n. An array nums of length n + 1 is generated in the following way:",
        "exampleInputs1": "n = 7",
        "exampleOutputs1": "3",
        "exampleInputs2": "n = 2",
        "exampleOutputs2": "1",
        "exampleInputs3": "n = 3",
        "exampleOutputs3": "2"
    },
    {
        "id": 1652,
        "title": "1652. Defuse the Bomb",
        "description": "You have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array code of length of n and a key k.",
        "exampleInputs1": "code = [5,7,1,4], k = 3",
        "exampleOutputs1": "[12,10,16,13]",
        "exampleInputs2": "code = [1,2,3,4], k = 0",
        "exampleOutputs2": "[0,0,0,0]",
        "exampleInputs3": "code = [2,4,9,3], k = -2",
        "exampleOutputs3": "[12,5,6,13]"
    },
    {
        "id": 1656,
        "title": "1656. Design an Ordered Stream",
        "description": "There is a stream of n (idKey, value) pairs arriving in an arbitrary order, where idKey is an integer between 1 and n and value is a string. No two pairs have the same id.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"OrderedStream\", \"insert\", \"insert\", \"insert\", \"insert\", \"insert\"]"
    },
    {
        "id": 1662,
        "title": "1662. Check If Two String Arrays are Equivalent",
        "description": "Given two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.",
        "exampleInputs1": "word1 = [\"ab\", \"c\"], word2 = [\"a\", \"bc\"]",
        "exampleOutputs1": "true",
        "exampleInputs2": "word1 = [\"a\", \"cb\"], word2 = [\"ab\", \"c\"]",
        "exampleOutputs2": "false",
        "exampleInputs3": "word1  = [\"abc\", \"d\", \"defg\"], word2 = [\"abcddefg\"]",
        "exampleOutputs3": "true"
    },
    {
        "id": 1668,
        "title": "1668. Maximum Repeating Substring",
        "description": "For a string sequence, a string word is k-repeating if word concatenated k times is a substring of sequence. The word's maximum k-repeating value is the highest value k where word is k-repeating in sequence. If word is not a substring of sequence, word's maximum k-repeating value is 0.",
        "exampleInputs1": "sequence = \"ababc\", word = \"ab\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "sequence = \"ababc\", word = \"ba\"",
        "exampleOutputs2": "1",
        "exampleInputs3": "sequence = \"ababc\", word = \"ac\"",
        "exampleOutputs3": "0"
    },
    {
        "id": 1672,
        "title": "1672. Richest Customer Wealth",
        "description": "You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. Return the wealth that the richest customer has.",
        "exampleInputs1": "accounts = [[1,2,3],[3,2,1]]",
        "exampleOutputs1": "6",
        "exampleInputs2": "accounts = [[1,5],[7,3],[3,5]]",
        "exampleOutputs2": "10",
        "exampleInputs3": "accounts = [[2,8,7],[7,1,3],[1,9,5]]",
        "exampleOutputs3": "17"
    },
    {
        "id": 1678,
        "title": "1678. Goal Parser Interpretation",
        "description": "You own a Goal Parser that can interpret a string command. The command consists of an alphabet of \"G\", \"()\" and/or \"(al)\" in some order. The Goal Parser will interpret \"G\" as the string \"G\", \"()\" as the string \"o\", and \"(al)\" as the string \"al\". The interpreted strings are then concatenated in the original order.",
        "exampleInputs1": "command = \"G()(al)\"",
        "exampleOutputs1": "\"Goal\"",
        "exampleInputs2": "command = \"G()()()()(al)\"",
        "exampleOutputs2": "\"Gooooal\"",
        "exampleInputs3": "command = \"(al)G(al)()()G\"",
        "exampleOutputs3": "\"alGalooG\""
    },
    {
        "id": 1684,
        "title": "1684. Count the Number of Consistent Strings",
        "description": "You are given a string allowed consisting of distinct characters and an array of strings words. A string is consistent if all characters in the string appear in the string allowed.",
        "exampleInputs1": "allowed = \"ab\", words = [\"ad\",\"bd\",\"aaab\",\"baa\",\"badab\"]",
        "exampleOutputs1": "2",
        "exampleInputs2": "allowed = \"abc\", words = [\"a\",\"b\",\"c\",\"ab\",\"ac\",\"bc\",\"abc\"]",
        "exampleOutputs2": "7",
        "exampleInputs3": "allowed = \"cad\", words = [\"cc\",\"acd\",\"b\",\"ba\",\"bac\",\"bad\",\"ac\",\"d\"]",
        "exampleOutputs3": "4"
    },
    {
        "id": 1688,
        "title": "1688. Count of Matches in Tournament",
        "description": "You are given an integer n, the number of teams in a tournament that has strange rules:",
        "exampleInputs1": "n = 7",
        "exampleOutputs1": "6",
        "exampleInputs2": "n = 14",
        "exampleOutputs2": "13"
    },
    {
        "id": 1694,
        "title": "1694. Reformat Phone Number",
        "description": "You are given a phone number as a string number. number consists of digits, spaces ' ', and/or dashes '-'.",
        "exampleInputs1": "number = \"1-23-45 6\"",
        "exampleOutputs1": "\"123-456\"",
        "exampleInputs2": "number = \"123 4-567\"",
        "exampleOutputs2": "\"123-45-67\"",
        "exampleInputs3": "number = \"123 4-5678\"",
        "exampleOutputs3": "\"123-456-78\"",
        "exampleInputs4": "number = \"12\"",
        "exampleOutputs4": "\"12\"",
        "exampleInputs5": "number = \"--17-5 229 35-39475 \"",
        "exampleOutputs5": "\"175-229-353-94-75\""
    },
    {
        "id": 1700,
        "title": "1700. Number of Students Unable to Eat Lunch",
        "description": "The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.",
        "exampleInputs1": "students = [1,1,0,0], sandwiches = [0,1,0,1]",
        "exampleOutputs1": "0",
        "exampleInputs2": "students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]",
        "exampleOutputs2": "3"
    },
    {
        "id": 1704,
        "title": "1704. Determine if String Halves Are Alike",
        "description": "You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.",
        "exampleInputs1": "s = \"book\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"textbook\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "s = \"MerryChristmas\"",
        "exampleOutputs3": "false",
        "exampleInputs4": "s = \"AbCdEfGh\"",
        "exampleOutputs4": "true"
    },
    {
        "id": 1710,
        "title": "1710. Maximum Units on a Truck",
        "description": "You are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:",
        "exampleInputs1": "boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4",
        "exampleOutputs1": "8",
        "exampleInputs2": "boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10",
        "exampleOutputs2": "91"
    },
    {
        "id": 1716,
        "title": "1716. Calculate Money in Leetcode Bank",
        "description": "Hercy wants to save money for his first car. He puts money in the Leetcode bank every day.",
        "exampleInputs1": "n = 4",
        "exampleOutputs1": "10",
        "exampleInputs2": "n = 10",
        "exampleOutputs2": "37",
        "exampleInputs3": "n = 20",
        "exampleOutputs3": "96"
    },
    {
        "id": 1720,
        "title": "1720. Decode XORed Array",
        "description": "There is a hidden integer array arr that consists of n non-negative integers.",
        "exampleInputs1": "encoded = [1,2,3], first = 1",
        "exampleOutputs1": "[1,0,2,1]",
        "exampleInputs2": "encoded = [6,2,7,3], first = 4",
        "exampleOutputs2": "[4,2,0,7,4]"
    },
    {
        "id": 1725,
        "title": "1725. Number Of Rectangles That Can Form The Largest Square",
        "description": "You are given an array rectangles where rectangles[i] = [li, wi] represents the ith rectangle of length li and width wi.",
        "exampleInputs1": "rectangles = [[5,8],[3,9],[5,12],[16,5]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "rectangles = [[2,3],[3,7],[4,3],[3,7]]",
        "exampleOutputs2": "3"
    },
    {
        "id": 1732,
        "title": "1732. Find the Highest Altitude",
        "description": "There is a biker going on a road trip. The road trip consists of n + 1 points at different altitudes. The biker starts his trip on point 0 with altitude equal 0.",
        "exampleInputs1": "gain = [-5,1,5,0,-7]",
        "exampleOutputs1": "1",
        "exampleInputs2": "gain = [-4,-3,-2,-1,4,3,2]",
        "exampleOutputs2": "0"
    },
    {
        "id": 1736,
        "title": "1736. Latest Time by Replacing Hidden Digits",
        "description": "You are given a string time in the form of  hh:mm, where some of the digits in the string are hidden (represented by ?).",
        "exampleInputs1": "time = \"2?:?0\"",
        "exampleOutputs1": "\"23:50\"",
        "exampleInputs2": "time = \"0?:3?\"",
        "exampleOutputs2": "\"09:39\"",
        "exampleInputs3": "time = \"1?:22\"",
        "exampleOutputs3": "\"19:22\""
    },
    {
        "id": 1742,
        "title": "1742. Maximum Number of Balls in a Box",
        "description": "You are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive (i.e., n == highLimit - lowLimit + 1), and an infinite number of boxes numbered from 1 to infinity.",
        "exampleInputs1": "lowLimit = 1, highLimit = 10",
        "exampleOutputs1": "2",
        "exampleInputs2": "lowLimit = 5, highLimit = 15",
        "exampleOutputs2": "2",
        "exampleInputs3": "lowLimit = 19, highLimit = 28",
        "exampleOutputs3": "2"
    },
    {
        "id": 1748,
        "title": "1748. Sum of Unique Elements",
        "description": "You are given an integer array nums. The unique elements of an array are the elements that appear exactly once in the array.",
        "exampleInputs1": "nums = [1,2,3,2]",
        "exampleOutputs1": "4",
        "exampleInputs2": "nums = [1,1,1,1,1]",
        "exampleOutputs2": "0",
        "exampleInputs3": "nums = [1,2,3,4,5]",
        "exampleOutputs3": "15"
    },
    {
        "id": 1752,
        "title": "1752. Check if Array Is Sorted and Rotated",
        "description": "Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.",
        "exampleInputs1": "nums = [3,4,5,1,2]",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [2,1,3,4]",
        "exampleOutputs2": "false",
        "exampleInputs3": "nums = [1,2,3]",
        "exampleOutputs3": "true",
        "exampleInputs4": "nums = [1,1,1]",
        "exampleOutputs4": "true",
        "exampleInputs5": "nums = [2,1]",
        "exampleOutputs5": "true"
    },
    {
        "id": 1758,
        "title": "1758. Minimum Changes To Make Alternating Binary String",
        "description": "You are given a string s consisting only of the characters '0' and '1'. In one operation, you can change any '0' to '1' or vice versa.",
        "exampleInputs1": "s = \"0100\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "s = \"10\"",
        "exampleOutputs2": "0",
        "exampleInputs3": "s = \"1111\"",
        "exampleOutputs3": "2"
    },
    {
        "id": 1763,
        "title": "1763. Longest Nice Substring",
        "description": "A string s is nice if, for every letter of the alphabet that s contains, it appears both in uppercase and lowercase. For example, \"abABB\" is nice because 'A' and 'a' appear, and 'B' and 'b' appear. However, \"abA\" is not because 'b' appears, but 'B' does not.",
        "exampleInputs1": "s = \"YazaAay\"",
        "exampleOutputs1": "\"aAa\"",
        "exampleInputs2": "s = \"Bb\"",
        "exampleOutputs2": "\"Bb\"",
        "exampleInputs3": "s = \"c\"",
        "exampleOutputs3": "\"\"",
        "exampleInputs4": "s = \"dDzeE\"",
        "exampleOutputs4": "\"dD\""
    },
    {
        "id": 1768,
        "title": "1768. Merge Strings Alternately",
        "description": "You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.",
        "exampleInputs1": "word1 = \"abc\", word2 = \"pqr\"",
        "exampleOutputs1": "\"apbqcr\"",
        "exampleInputs2": "word1 = \"ab\", word2 = \"pqrs\"",
        "exampleOutputs2": "\"apbqrs\"",
        "exampleInputs3": "word1 = \"abcd\", word2 = \"pq\"",
        "exampleOutputs3": "\"apbqcd\""
    },
    {
        "id": 1773,
        "title": "1773. Count Items Matching a Rule",
        "description": "You are given an array items, where each items[i] = [typei, colori, namei] describes the type, color, and name of the ith item. You are also given a rule represented by two strings, ruleKey and ruleValue.",
        "exampleInputs1": "items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"lenovo\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"color\", ruleValue = \"silver\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"phone\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"type\", ruleValue = \"phone\"",
        "exampleOutputs2": "2"
    },
    {
        "id": 1779,
        "title": "1779. Find Nearest Point That Has the Same X or Y Coordinate",
        "description": "You are given two integers, x and y, which represent your current location on a Cartesian grid: (x, y). You are also given an array points where each points[i] = [ai, bi] represents that a point exists at (ai, bi). A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.",
        "exampleInputs1": "x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "x = 3, y = 4, points = [[3,4]]",
        "exampleOutputs2": "0",
        "exampleInputs3": "x = 3, y = 4, points = [[2,3]]",
        "exampleOutputs3": "-1"
    },
    {
        "id": 1784,
        "title": "1784. Check if Binary String Has at Most One Segment of Ones",
        "description": "Given a binary string s ​​​​​without leading zeros, return true​​​ if s contains at most one contiguous segment of ones. Otherwise, return false.",
        "exampleInputs1": "s = \"1001\"",
        "exampleOutputs1": "false",
        "exampleInputs2": "s = \"110\"",
        "exampleOutputs2": "true"
    },
    {
        "id": 1790,
        "title": "1790. Check if One String Swap Can Make Strings Equal",
        "description": "You are given two strings s1 and s2 of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.",
        "exampleInputs1": "s1 = \"bank\", s2 = \"kanb\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s1 = \"attack\", s2 = \"defend\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "s1 = \"kelb\", s2 = \"kelb\"",
        "exampleOutputs3": "true",
        "exampleInputs4": "s1 = \"abcd\", s2 = \"dcba\"",
        "exampleOutputs4": "false"
    },
    {
        "id": 1791,
        "title": "1791. Find Center of Star Graph",
        "description": "There is an undirected star graph consisting of n nodes labeled from 1 to n. A star graph is a graph where there is one center node and exactly n - 1 edges that connect the center node with every other node.",
        "exampleInputs1": "edges = [[1,2],[2,3],[4,2]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "edges = [[1,2],[5,1],[1,3],[1,4]]",
        "exampleOutputs2": "1"
    },
    {
        "id": 1796,
        "title": "1796. Second Largest Digit in a String",
        "description": "Given an alphanumeric string s, return the second largest numerical digit that appears in s, or -1 if it does not exist.",
        "exampleInputs1": "s = \"dfa12321afd\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"abc1111\"",
        "exampleOutputs2": "-1"
    },
    {
        "id": 1800,
        "title": "1800. Maximum Ascending Subarray Sum",
        "description": "Given an array of positive integers nums, return the maximum possible sum of an ascending subarray in nums.",
        "exampleInputs1": "nums = [10,20,30,5,10,50]",
        "exampleOutputs1": "65",
        "exampleInputs2": "nums = [10,20,30,40,50]",
        "exampleOutputs2": "150",
        "exampleInputs3": "nums = [12,17,15,13,10,11,12]",
        "exampleOutputs3": "33",
        "exampleInputs4": "nums = [100,10,1]",
        "exampleOutputs4": "100"
    },
    {
        "id": 1805,
        "title": "1805. Number of Different Integers in a String",
        "description": "You are given a string word that consists of digits and lowercase English letters.",
        "exampleInputs1": "word = \"a123bc34d8ef34\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "word = \"leet1234code234\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "word = \"a1b01c001\"",
        "exampleOutputs3": "1"
    },
    {
        "id": 1812,
        "title": "1812. Determine Color of a Chessboard Square",
        "description": "You are given coordinates, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.",
        "exampleInputs1": "coordinates = \"a1\"",
        "exampleOutputs1": "false",
        "exampleInputs2": "coordinates = \"h3\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "coordinates = \"c7\"",
        "exampleOutputs3": "false"
    },
    {
        "id": 1816,
        "title": "1816. Truncate Sentence",
        "description": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of only uppercase and lowercase English letters (no punctuation).",
        "exampleInputs1": "s = \"Hello how are you Contestant\", k = 4",
        "exampleOutputs1": "\"Hello how are you\"",
        "exampleInputs2": "s = \"What is the solution to this problem\", k = 4",
        "exampleOutputs2": "\"What is the solution\"",
        "exampleInputs3": "s = \"chopper is not a tanuki\", k = 5",
        "exampleOutputs3": "\"chopper is not a tanuki\""
    },
    {
        "id": 1822,
        "title": "1822. Sign of the Product of an Array",
        "description": "There is a function signFunc(x) that returns:",
        "exampleInputs1": "nums = [-1,-2,-3,-4,3,2,1]",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [1,5,0,2,-3]",
        "exampleOutputs2": "0",
        "exampleInputs3": "nums = [-1,1,-1,1,-1]",
        "exampleOutputs3": "-1"
    },
    {
        "id": 1827,
        "title": "1827. Minimum Operations to Make the Array Increasing",
        "description": "You are given an integer array nums (0-indexed). In one operation, you can choose an element of the array and increment it by 1.",
        "exampleInputs1": "nums = [1,1,1]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [1,5,2,4,1]",
        "exampleOutputs2": "14",
        "exampleInputs3": "nums = [8]",
        "exampleOutputs3": "0"
    },
    {
        "id": 1832,
        "title": "1832. Check if the Sentence Is Pangram",
        "description": "A pangram is a sentence where every letter of the English alphabet appears at least once.",
        "exampleInputs1": "sentence = \"thequickbrownfoxjumpsoverthelazydog\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "sentence = \"leetcode\"",
        "exampleOutputs2": "false"
    },
    {
        "id": 1837,
        "title": "1837. Sum of Digits in Base K",
        "description": "Given an integer n (in base 10) and a base k, return the sum of the digits of n after converting n from base 10 to base k.",
        "exampleInputs1": "n = 34, k = 6",
        "exampleOutputs1": "9",
        "exampleInputs2": "n = 10, k = 10",
        "exampleOutputs2": "1"
    },
    {
        "id": 1844,
        "title": "1844. Replace All Digits with Characters",
        "description": "You are given a 0-indexed string s that has lowercase English letters in its even indices and digits in its odd indices.",
        "exampleInputs1": "s = \"a1c1e1\"",
        "exampleOutputs1": "\"abcdef\"",
        "exampleInputs2": "s = \"a1b2c3d4e\"",
        "exampleOutputs2": "\"abbdcfdhe\""
    },
    {
        "id": 1848,
        "title": "1848. Minimum Distance to the Target Element",
        "description": "Given an integer array nums (0-indexed) and two integers target and start, find an index i such that nums[i] == target and abs(i - start) is minimized. Note that abs(x) is the absolute value of x.",
        "exampleInputs1": "nums = [1,2,3,4,5], target = 5, start = 3",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [1], target = 1, start = 0",
        "exampleOutputs2": "0",
        "exampleInputs3": "nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0",
        "exampleOutputs3": "0"
    },
    {
        "id": 1854,
        "title": "1854. Maximum Population Year",
        "description": "You are given a 2D integer array logs where each logs[i] = [birthi, deathi] indicates the birth and death years of the ith person.",
        "exampleInputs1": "logs = [[1993,1999],[2000,2010]]",
        "exampleOutputs1": "1993",
        "exampleInputs2": "logs = [[1950,1961],[1960,1971],[1970,1981]]",
        "exampleOutputs2": "1960"
    },
    {
        "id": 1859,
        "title": "1859. Sorting the Sentence",
        "description": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.",
        "exampleInputs1": "s = \"is2 sentence4 This1 a3\"",
        "exampleOutputs1": "\"This is a sentence\"",
        "exampleInputs2": "s = \"Myself2 Me1 I4 and3\"",
        "exampleOutputs2": "\"Me Myself and I\""
    },
    {
        "id": 1863,
        "title": "1863. Sum of All Subset XOR Totals",
        "description": "The XOR total of an array is defined as the bitwise XOR of all its elements, or 0 if the array is empty.",
        "exampleInputs1": "nums = [1,3]",
        "exampleOutputs1": "6",
        "exampleInputs2": "nums = [5,1,6]",
        "exampleOutputs2": "28",
        "exampleInputs3": "nums = [3,4,5,6,7,8]",
        "exampleOutputs3": "480"
    },
    {
        "id": 1869,
        "title": "1869. Longer Contiguous Segments of Ones than Zeros",
        "description": "Given a binary string s, return true if the longest contiguous segment of 1s is strictly longer than the longest contiguous segment of 0s in s. Return false otherwise.",
        "exampleInputs1": "s = \"1101\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"111000\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "s = \"110100010\"",
        "exampleOutputs3": "false"
    },
    {
        "id": 1876,
        "title": "1876. Substrings of Size Three with Distinct Characters",
        "description": "A string is good if there are no repeated characters.",
        "exampleInputs1": "s = \"xyzzaz\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "s = \"aababcabc\"",
        "exampleOutputs2": "4"
    },
    {
        "id": 1880,
        "title": "1880. Check if Word Equals Summation of Two Words",
        "description": "The letter value of a letter is its position in the alphabet starting from 0 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, etc.).",
        "exampleInputs1": "firstWord = \"acb\", secondWord = \"cba\", targetWord = \"cdb\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aab\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aaaa\"",
        "exampleOutputs3": "true"
    },
    {
        "id": 1886,
        "title": "1886. Determine Whether Matrix Can Be Obtained By Rotation",
        "description": "Given two n x n binary matrices mat and target, return true if it is possible to make mat equal to target by rotating mat in 90-degree increments, or false otherwise.",
        "exampleInputs1": "mat = [[0,1],[1,0]], target = [[1,0],[0,1]]",
        "exampleOutputs1": "true",
        "exampleInputs2": "mat = [[0,1],[1,1]], target = [[1,0],[0,1]]",
        "exampleOutputs2": "false",
        "exampleInputs3": "mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]",
        "exampleOutputs3": "true"
    },
    {
        "id": 1893,
        "title": "1893. Check if All the Integers in a Range Are Covered",
        "description": "You are given a 2D integer array ranges and two integers left and right. Each ranges[i] = [starti, endi] represents an inclusive interval between starti and endi.",
        "exampleInputs1": "ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5",
        "exampleOutputs1": "true",
        "exampleInputs2": "ranges = [[1,10],[10,20]], left = 21, right = 21",
        "exampleOutputs2": "false"
    },
    {
        "id": 1897,
        "title": "1897. Redistribute Characters to Make All Strings Equal",
        "description": "You are given an array of strings words (0-indexed).",
        "exampleInputs1": "words = [\"abc\",\"aabc\",\"bc\"]",
        "exampleOutputs1": "true",
        "exampleInputs2": "words = [\"ab\",\"a\"]",
        "exampleOutputs2": "false"
    },
    {
        "id": 1903,
        "title": "1903. Largest Odd Number in String",
        "description": "You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string \"\" if no odd integer exists.",
        "exampleInputs1": "num = \"52\"",
        "exampleOutputs1": "\"5\"",
        "exampleInputs2": "num = \"4206\"",
        "exampleOutputs2": "\"\"",
        "exampleInputs3": "num = \"35427\"",
        "exampleOutputs3": "\"35427\""
    },
    {
        "id": 1909,
        "title": "1909. Remove One Element to Make the Array Strictly Increasing",
        "description": "Given a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. If the array is already strictly increasing, return true.",
        "exampleInputs1": "nums = [1,2,10,5,7]",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [2,3,1,2]",
        "exampleOutputs2": "false",
        "exampleInputs3": "nums = [1,1,1]",
        "exampleOutputs3": "false",
        "exampleInputs4": "nums = [1,2,3]",
        "exampleOutputs4": "true"
    },
    {
        "id": 1913,
        "title": "1913. Maximum Product Difference Between Two Pairs",
        "description": "The product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d).",
        "exampleInputs1": "nums = [5,6,2,7,4]",
        "exampleOutputs1": "34",
        "exampleInputs2": "nums = [4,2,5,9,7,4,8]",
        "exampleOutputs2": "64"
    },
    {
        "id": 1920,
        "title": "1920. Build Array from Permutation",
        "description": "Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.",
        "exampleInputs1": "nums = [0,2,1,5,3,4]",
        "exampleOutputs1": "[0,1,2,4,5,3]",
        "exampleInputs2": "nums = [5,0,1,2,3,4]",
        "exampleOutputs2": "[4,5,0,1,2,3]"
    },
    {
        "id": 1925,
        "title": "1925. Count Square Sum Triples",
        "description": "A square triple (a,b,c) is a triple where a, b, and c are integers and a2 + b2 = c2.",
        "exampleInputs1": "n = 5",
        "exampleOutputs1": "2",
        "exampleInputs2": "n = 10",
        "exampleOutputs2": "4"
    },
    {
        "id": 1929,
        "title": "1929. Concatenation of Array",
        "description": "Given an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed).",
        "exampleInputs1": "nums = [1,2,1]",
        "exampleOutputs1": "[1,2,1,1,2,1]",
        "exampleInputs2": "nums = [1,3,2,1]",
        "exampleOutputs2": "[1,3,2,1,1,3,2,1]"
    },
    {
        "id": 1935,
        "title": "1935. Maximum Number of Words You Can Type",
        "description": "There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.",
        "exampleInputs1": "text = \"hello world\", brokenLetters = \"ad\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "text = \"leet code\", brokenLetters = \"lt\"",
        "exampleOutputs2": "1",
        "exampleInputs3": "text = \"leet code\", brokenLetters = \"e\"",
        "exampleOutputs3": "0"
    },
    {
        "id": 1941,
        "title": "1941. Check if All Characters Have Equal Number of Occurrences",
        "description": "Given a string s, return true if s is a good string, or false otherwise.",
        "exampleInputs1": "s = \"abacbc\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"aaabb\"",
        "exampleOutputs2": "false"
    },
    {
        "id": 1945,
        "title": "1945. Sum of Digits of String After Convert",
        "description": "You are given a string s consisting of lowercase English letters, and an integer k.",
        "exampleInputs1": "s = \"iiii\", k = 1",
        "exampleOutputs1": "36",
        "exampleInputs2": "s = \"leetcode\", k = 2",
        "exampleOutputs2": "6",
        "exampleInputs3": "s = \"zbax\", k = 2",
        "exampleOutputs3": "8"
    },
    {
        "id": 1952,
        "title": "1952. Three Divisors",
        "description": "Given an integer n, return true if n has exactly three positive divisors. Otherwise, return false.",
        "exampleInputs1": "n = 2",
        "exampleOutputs1": "false",
        "exampleInputs2": "n = 4",
        "exampleOutputs2": "true"
    },
    {
        "id": 1957,
        "title": "1957. Delete Characters to Make Fancy String",
        "description": "A fancy string is a string where no three consecutive characters are equal.",
        "exampleInputs1": "s = \"leeetcode\"",
        "exampleOutputs1": "\"leetcode\"",
        "exampleInputs2": "s = \"aaabaaaa\"",
        "exampleOutputs2": "\"aabaa\"",
        "exampleInputs3": "s = \"aab\"",
        "exampleOutputs3": "\"aab\""
    },
    {
        "id": 1961,
        "title": "1961. Check If String Is a Prefix of Array",
        "description": "Given a string s and an array of strings words, determine whether s is a prefix string of words.",
        "exampleInputs1": "s = \"iloveleetcode\", words = [\"i\",\"love\",\"leetcode\",\"apples\"]",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"iloveleetcode\", words = [\"apples\",\"i\",\"love\",\"leetcode\"]",
        "exampleOutputs2": "false"
    },
    {
        "id": 1967,
        "title": "1967. Number of Strings That Appear as Substrings in Word",
        "description": "Given an array of strings patterns and a string word, return the number of strings in patterns that exist as a substring in word.",
        "exampleInputs1": "patterns = [\"a\",\"abc\",\"bc\",\"d\"], word = \"abc\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "patterns = [\"a\",\"b\",\"c\"], word = \"aaaaabbbbb\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "patterns = [\"a\",\"a\",\"a\"], word = \"ab\"",
        "exampleOutputs3": "3"
    },
    {
        "id": 1971,
        "title": "1971. Find if Path Exists in Graph",
        "description": "There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.",
        "exampleInputs1": "n = 3, edges = [[0,1],[1,2],[2,0]], start = 0, end = 2",
        "exampleOutputs1": "true",
        "exampleInputs2": "n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], start = 0, end = 5",
        "exampleOutputs2": "false"
    },
    {
        "id": 1974,
        "title": "1974. Minimum Time to Type Word Using Special Typewriter",
        "description": "There is a special typewriter with lowercase English letters 'a' to 'z' arranged in a circle with a pointer. A character can only be typed if the pointer is pointing to that character. The pointer is initially pointing to the character 'a'.",
        "exampleInputs1": "word = \"abc\"",
        "exampleOutputs1": "5",
        "exampleInputs2": "word = \"bza\"",
        "exampleOutputs2": "7",
        "exampleInputs3": "word = \"zjpc\"",
        "exampleOutputs3": "34"
    },
    {
        "id": 1979,
        "title": "1979. Find Greatest Common Divisor of Array",
        "description": "Given an integer array nums, return the greatest common divisor of the smallest number and largest number in nums.",
        "exampleInputs1": "nums = [2,5,6,9,10]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [7,5,6,8,3]",
        "exampleOutputs2": "1",
        "exampleInputs3": "nums = [3,3]",
        "exampleOutputs3": "3"
    },
    {
        "id": 2,
        "title": "2. Add Two Numbers",
        "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.",
        "exampleInputs1": "l1 = [2,4,3], l2 = [5,6,4]",
        "exampleOutputs1": "[7,0,8]",
        "exampleInputs2": "l1 = [0], l2 = [0]",
        "exampleOutputs2": "[0]",
        "exampleInputs3": "l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]",
        "exampleOutputs3": "[8,9,9,9,0,0,0,1]"
    },
    {
        "id": 3,
        "title": "3. Longest Substring Without Repeating Characters",
        "description": "Given a string s, find the length of the longest substring without repeating characters.",
        "exampleInputs1": "s = \"abcabcbb\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "s = \"bbbbb\"",
        "exampleOutputs2": "1",
        "exampleInputs3": "s = \"pwwkew\"",
        "exampleOutputs3": "3",
        "exampleInputs4": "s = \"\"",
        "exampleOutputs4": "0"
    },
    {
        "id": 5,
        "title": "5. Longest Palindromic Substring",
        "description": "Given a string s, return the longest palindromic substring in s.",
        "exampleInputs1": "s = \"babad\"",
        "exampleOutputs1": "\"bab\"",
        "exampleInputs2": "s = \"cbbd\"",
        "exampleOutputs2": "\"bb\"",
        "exampleInputs3": "s = \"a\"",
        "exampleOutputs3": "\"a\"",
        "exampleInputs4": "s = \"ac\"",
        "exampleOutputs4": "\"a\""
    },
    {
        "id": 6,
        "title": "6. ZigZag Conversion",
        "description": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)",
        "exampleInputs1": "P   A   H   N",
        "exampleOutputs1": "A P L S I I G",
        "exampleInputs3": "s = \"PAYPALISHIRING\", numRows = 3",
        "exampleOutputs3": "\"PAHNAPLSIIGYIR\"",
        "exampleInputs4": "s = \"PAYPALISHIRING\", numRows = 4",
        "exampleOutputs4": "\"PINALSIGYAHRPI\"",
        "exampleInputs5": "s = \"A\", numRows = 1",
        "exampleOutputs5": "\"A\""
    },
    {
        "id": 8,
        "title": "8. String to Integer (atoi)",
        "description": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).",
        "exampleInputs1": "s = \"42\"",
        "exampleOutputs1": "42",
        "exampleInputs2": "s = \"   -42\"",
        "exampleOutputs2": "-42",
        "exampleInputs3": "s = \"4193 with words\"",
        "exampleOutputs3": "4193",
        "exampleInputs4": "s = \"words and 987\"",
        "exampleOutputs4": "0",
        "exampleInputs5": "s = \"-91283472332\"",
        "exampleOutputs5": "-2147483648"
    },
    {
        "id": 11,
        "title": "11. Container With Most Water",
        "description": "Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.",
        "exampleInputs1": "height = [1,8,6,2,5,4,8,3,7]",
        "exampleOutputs1": "49",
        "exampleInputs2": "height = [1,1]",
        "exampleOutputs2": "1",
        "exampleInputs3": "height = [4,3,2,1,4]",
        "exampleOutputs3": "16",
        "exampleInputs4": "height = [1,2,1]",
        "exampleOutputs4": "2"
    },
    {
        "id": 12,
        "title": "12. Integer to Roman",
        "description": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.",
        "exampleInputs1": "Symbol       Value",
        "exampleOutputs1": "I             1",
        "exampleInputs2": "num = 3",
        "exampleOutputs2": "\"III\"",
        "exampleInputs3": "num = 4",
        "exampleOutputs3": "\"IV\"",
        "exampleInputs4": "num = 9",
        "exampleOutputs4": "\"IX\"",
        "exampleInputs5": "num = 58",
        "exampleOutputs5": "\"LVIII\"",
        "exampleInputs6": "num = 1994",
        "exampleOutputs6": "\"MCMXCIV\""
    },
    {
        "id": 15,
        "title": "15. 3Sum",
        "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.",
        "exampleInputs1": "nums = [-1,0,1,2,-1,-4]",
        "exampleOutputs1": "[[-1,-1,2],[-1,0,1]]",
        "exampleInputs2": "nums = []",
        "exampleOutputs2": "[]",
        "exampleInputs3": "nums = [0]",
        "exampleOutputs3": "[]"
    },
    {
        "id": 16,
        "title": "16. 3Sum Closest",
        "description": "Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.",
        "exampleInputs1": "nums = [-1,2,1,-4], target = 1",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [0,0,0], target = 1",
        "exampleOutputs2": "0"
    },
    {
        "id": 17,
        "title": "17. Letter Combinations of a Phone Number",
        "description": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.",
        "exampleInputs1": "digits = \"23\"",
        "exampleOutputs1": "[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]",
        "exampleInputs2": "digits = \"\"",
        "exampleOutputs2": "[]",
        "exampleInputs3": "digits = \"2\"",
        "exampleOutputs3": "[\"a\",\"b\",\"c\"]"
    },
    {
        "id": 18,
        "title": "18. 4Sum",
        "description": "Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:",
        "exampleInputs1": "nums = [1,0,-1,0,-2,2], target = 0",
        "exampleOutputs1": "[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]",
        "exampleInputs2": "nums = [2,2,2,2,2], target = 8",
        "exampleOutputs2": "[[2,2,2,2]]"
    },
    {
        "id": 19,
        "title": "19. Remove Nth Node From End of List",
        "description": "Given the head of a linked list, remove the nth node from the end of the list and return its head.",
        "exampleInputs1": "head = [1,2,3,4,5], n = 2",
        "exampleOutputs1": "[1,2,3,5]",
        "exampleInputs2": "head = [1], n = 1",
        "exampleOutputs2": "[]",
        "exampleInputs3": "head = [1,2], n = 1",
        "exampleOutputs3": "[1]"
    },
    {
        "id": 22,
        "title": "22. Generate Parentheses",
        "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.",
        "exampleInputs1": "n = 3",
        "exampleOutputs1": "[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]",
        "exampleInputs2": "n = 1",
        "exampleOutputs2": "[\"()\"]"
    },
    {
        "id": 24,
        "title": "24. Swap Nodes in Pairs",
        "description": "Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)",
        "exampleInputs1": "head = [1,2,3,4]",
        "exampleOutputs1": "[2,1,4,3]",
        "exampleInputs2": "head = []",
        "exampleOutputs2": "[]",
        "exampleInputs3": "head = [1]",
        "exampleOutputs3": "[1]"
    },
    {
        "id": 29,
        "title": "29. Divide Two Integers",
        "description": "Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.",
        "exampleInputs1": "dividend = 10, divisor = 3",
        "exampleOutputs1": "3",
        "exampleInputs2": "dividend = 7, divisor = -3",
        "exampleOutputs2": "-2",
        "exampleInputs3": "dividend = 0, divisor = 1",
        "exampleOutputs3": "0",
        "exampleInputs4": "dividend = 1, divisor = 1",
        "exampleOutputs4": "1"
    },
    {
        "id": 31,
        "title": "31. Next Permutation",
        "description": "Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.",
        "exampleInputs1": "nums = [1,2,3]",
        "exampleOutputs1": "[1,3,2]",
        "exampleInputs2": "nums = [3,2,1]",
        "exampleOutputs2": "[1,2,3]",
        "exampleInputs3": "nums = [1,1,5]",
        "exampleOutputs3": "[1,5,1]",
        "exampleInputs4": "nums = [1]",
        "exampleOutputs4": "[1]"
    },
    {
        "id": 33,
        "title": "33. Search in Rotated Sorted Array",
        "description": "There is an integer array nums sorted in ascending order (with distinct values).",
        "exampleInputs1": "nums = [4,5,6,7,0,1,2], target = 0",
        "exampleOutputs1": "4",
        "exampleInputs2": "nums = [4,5,6,7,0,1,2], target = 3",
        "exampleOutputs2": "-1",
        "exampleInputs3": "nums = [1], target = 0",
        "exampleOutputs3": "-1"
    },
    {
        "id": 34,
        "title": "34. Find First and Last Position of Element in Sorted Array",
        "description": "Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.",
        "exampleInputs1": "nums = [5,7,7,8,8,10], target = 8",
        "exampleOutputs1": "[3,4]",
        "exampleInputs2": "nums = [5,7,7,8,8,10], target = 6",
        "exampleOutputs2": "[-1,-1]",
        "exampleInputs3": "nums = [], target = 0",
        "exampleOutputs3": "[-1,-1]"
    },
    {
        "id": 36,
        "title": "36. Valid Sudoku",
        "description": "Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:",
        "exampleInputs1": "board =",
        "exampleOutputs1": "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]",
        "exampleInputs2": "board =",
        "exampleOutputs2": "[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]"
    },
    {
        "id": 38,
        "title": "38. Count and Say",
        "description": "The count-and-say sequence is a sequence of digit strings defined by the recursive formula:",
        "exampleInputs1": "n = 1",
        "exampleOutputs1": "\"1\"",
        "exampleInputs2": "n = 4",
        "exampleOutputs2": "\"1211\""
    },
    {
        "id": 39,
        "title": "39. Combination Sum",
        "description": "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.",
        "exampleInputs1": "candidates = [2,3,6,7], target = 7",
        "exampleOutputs1": "[[2,2,3],[7]]",
        "exampleInputs2": "candidates = [2,3,5], target = 8",
        "exampleOutputs2": "[[2,2,2,2],[2,3,3],[3,5]]",
        "exampleInputs3": "candidates = [2], target = 1",
        "exampleOutputs3": "[]",
        "exampleInputs4": "candidates = [1], target = 1",
        "exampleOutputs4": "[[1]]",
        "exampleInputs5": "candidates = [1], target = 2",
        "exampleOutputs5": "[[1,1]]"
    },
    {
        "id": 40,
        "title": "40. Combination Sum II",
        "description": "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.",
        "exampleInputs1": "candidates = [10,1,2,7,6,1,5], target = 8",
        "exampleOutputs1": "",
        "exampleInputs2": "candidates = [2,5,2,1,2], target = 5",
        "exampleOutputs2": ""
    },
    {
        "id": 43,
        "title": "43. Multiply Strings",
        "description": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.",
        "exampleInputs1": "num1 = \"2\", num2 = \"3\"",
        "exampleOutputs1": "\"6\"",
        "exampleInputs2": "num1 = \"123\", num2 = \"456\"",
        "exampleOutputs2": "\"56088\""
    },
    {
        "id": 45,
        "title": "45. Jump Game II",
        "description": "Given an array of non-negative integers nums, you are initially positioned at the first index of the array.",
        "exampleInputs1": "nums = [2,3,1,1,4]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [2,3,0,1,4]",
        "exampleOutputs2": "2"
    },
    {
        "id": 46,
        "title": "46. Permutations",
        "description": "Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.",
        "exampleInputs1": "nums = [1,2,3]",
        "exampleOutputs1": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
        "exampleInputs2": "nums = [0,1]",
        "exampleOutputs2": "[[0,1],[1,0]]",
        "exampleInputs3": "nums = [1]",
        "exampleOutputs3": "[[1]]"
    },
    {
        "id": 47,
        "title": "47. Permutations II",
        "description": "Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.",
        "exampleInputs1": "nums = [1,1,2]",
        "exampleOutputs1": "",
        "exampleInputs2": "nums = [1,2,3]",
        "exampleOutputs2": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]"
    },
    {
        "id": 48,
        "title": "48. Rotate Image",
        "description": "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).",
        "exampleInputs1": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "exampleOutputs1": "[[7,4,1],[8,5,2],[9,6,3]]",
        "exampleInputs2": "matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]",
        "exampleOutputs2": "[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]",
        "exampleInputs3": "matrix = [[1]]",
        "exampleOutputs3": "[[1]]",
        "exampleInputs4": "matrix = [[1,2],[3,4]]",
        "exampleOutputs4": "[[3,1],[4,2]]"
    },
    {
        "id": 49,
        "title": "49. Group Anagrams",
        "description": "Given an array of strings strs, group the anagrams together. You can return the answer in any order.",
        "exampleInputs1": "strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]",
        "exampleOutputs1": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
        "exampleInputs2": "strs = [\"\"]",
        "exampleOutputs2": "[[\"\"]]",
        "exampleInputs3": "strs = [\"a\"]",
        "exampleOutputs3": "[[\"a\"]]"
    },
    {
        "id": 50,
        "title": "50. Pow(x, n)",
        "description": "Implement pow(x, n), which calculates x raised to the power n (i.e., xn).",
        "exampleInputs1": "x = 2.00000, n = 10",
        "exampleOutputs1": "1024.00000",
        "exampleInputs2": "x = 2.10000, n = 3",
        "exampleOutputs2": "9.26100",
        "exampleInputs3": "x = 2.00000, n = -2",
        "exampleOutputs3": "0.25000"
    },
    {
        "id": 54,
        "title": "54. Spiral Matrix",
        "description": "Given an m x n matrix, return all elements of the matrix in spiral order.",
        "exampleInputs1": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "exampleOutputs1": "[1,2,3,6,9,8,7,4,5]",
        "exampleInputs2": "matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
        "exampleOutputs2": "[1,2,3,4,8,12,11,10,9,5,6,7]"
    },
    {
        "id": 55,
        "title": "55. Jump Game",
        "description": "You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.",
        "exampleInputs1": "nums = [2,3,1,1,4]",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [3,2,1,0,4]",
        "exampleOutputs2": "false"
    },
    {
        "id": 56,
        "title": "56. Merge Intervals",
        "description": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
        "exampleInputs1": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
        "exampleOutputs1": "[[1,6],[8,10],[15,18]]",
        "exampleInputs2": "intervals = [[1,4],[4,5]]",
        "exampleOutputs2": "[[1,5]]"
    },
    {
        "id": 57,
        "title": "57. Insert Interval",
        "description": "You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.",
        "exampleInputs1": "intervals = [[1,3],[6,9]], newInterval = [2,5]",
        "exampleOutputs1": "[[1,5],[6,9]]",
        "exampleInputs2": "intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]",
        "exampleOutputs2": "[[1,2],[3,10],[12,16]]",
        "exampleInputs3": "intervals = [], newInterval = [5,7]",
        "exampleOutputs3": "[[5,7]]",
        "exampleInputs4": "intervals = [[1,5]], newInterval = [2,3]",
        "exampleOutputs4": "[[1,5]]",
        "exampleInputs5": "intervals = [[1,5]], newInterval = [2,7]",
        "exampleOutputs5": "[[1,7]]"
    },
    {
        "id": 59,
        "title": "59. Spiral Matrix II",
        "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
        "exampleInputs1": "n = 3",
        "exampleOutputs1": "[[1,2,3],[8,9,4],[7,6,5]]",
        "exampleInputs2": "n = 1",
        "exampleOutputs2": "[[1]]"
    },
    {
        "id": 61,
        "title": "61. Rotate List",
        "description": "Given the head of a linked list, rotate the list to the right by k places.",
        "exampleInputs1": "head = [1,2,3,4,5], k = 2",
        "exampleOutputs1": "[4,5,1,2,3]",
        "exampleInputs2": "head = [0,1,2], k = 4",
        "exampleOutputs2": "[2,0,1]"
    },
    {
        "id": 62,
        "title": "62. Unique Paths",
        "description": "A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).",
        "exampleInputs1": "m = 3, n = 7",
        "exampleOutputs1": "28",
        "exampleInputs2": "m = 3, n = 2",
        "exampleOutputs2": "3",
        "exampleInputs3": "m = 7, n = 3",
        "exampleOutputs3": "28",
        "exampleInputs4": "m = 3, n = 3",
        "exampleOutputs4": "6"
    },
    {
        "id": 63,
        "title": "63. Unique Paths II",
        "description": "A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).",
        "exampleInputs1": "obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "obstacleGrid = [[0,1],[0,0]]",
        "exampleOutputs2": "1"
    },
    {
        "id": 64,
        "title": "64. Minimum Path Sum",
        "description": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.",
        "exampleInputs1": "grid = [[1,3,1],[1,5,1],[4,2,1]]",
        "exampleOutputs1": "7",
        "exampleInputs2": "grid = [[1,2,3],[4,5,6]]",
        "exampleOutputs2": "12"
    },
    {
        "id": 71,
        "title": "71. Simplify Path",
        "description": "Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.",
        "exampleInputs1": "path = \"/home/\"",
        "exampleOutputs1": "\"/home\"",
        "exampleInputs2": "path = \"/../\"",
        "exampleOutputs2": "\"/\"",
        "exampleInputs3": "path = \"/home//foo/\"",
        "exampleOutputs3": "\"/home/foo\"",
        "exampleInputs4": "path = \"/a/./b/../../c/\"",
        "exampleOutputs4": "\"/c\""
    },
    {
        "id": 73,
        "title": "73. Set Matrix Zeroes",
        "description": "Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's, and return the matrix.",
        "exampleInputs1": "matrix = [[1,1,1],[1,0,1],[1,1,1]]",
        "exampleOutputs1": "[[1,0,1],[0,0,0],[1,0,1]]",
        "exampleInputs2": "matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]",
        "exampleOutputs2": "[[0,0,0,0],[0,4,5,0],[0,3,1,0]]"
    },
    {
        "id": 74,
        "title": "74. Search a 2D Matrix",
        "description": "Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:",
        "exampleInputs1": "matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3",
        "exampleOutputs1": "true",
        "exampleInputs2": "matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13",
        "exampleOutputs2": "false"
    },
    {
        "id": 75,
        "title": "75. Sort Colors",
        "description": "Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.",
        "exampleInputs1": "nums = [2,0,2,1,1,0]",
        "exampleOutputs1": "[0,0,1,1,2,2]",
        "exampleInputs2": "nums = [2,0,1]",
        "exampleOutputs2": "[0,1,2]",
        "exampleInputs3": "nums = [0]",
        "exampleOutputs3": "[0]",
        "exampleInputs4": "nums = [1]",
        "exampleOutputs4": "[1]"
    },
    {
        "id": 77,
        "title": "77. Combinations",
        "description": "Given two integers n and k, return all possible combinations of k numbers out of the range [1, n].",
        "exampleInputs1": "n = 4, k = 2",
        "exampleOutputs1": "",
        "exampleInputs2": "n = 1, k = 1",
        "exampleOutputs2": "[[1]]"
    },
    {
        "id": 78,
        "title": "78. Subsets",
        "description": "Given an integer array nums of unique elements, return all possible subsets (the power set).",
        "exampleInputs1": "nums = [1,2,3]",
        "exampleOutputs1": "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]",
        "exampleInputs2": "nums = [0]",
        "exampleOutputs2": "[[],[0]]"
    },
    {
        "id": 79,
        "title": "79. Word Search",
        "description": "Given an m x n grid of characters board and a string word, return true if word exists in the grid.",
        "exampleInputs1": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"",
        "exampleOutputs3": "false"
    },
    {
        "id": 80,
        "title": "80. Remove Duplicates from Sorted Array II",
        "description": "Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.",
        "exampleInputs1": "int[] nums = [...]; // Input array",
        "exampleOutputs1": "int[] expectedNums = [...]; // The expected answer with correct length",
        "exampleInputs2": "nums = [1,1,1,2,2,3]",
        "exampleOutputs2": "5, nums = [1,1,2,2,3,_]",
        "exampleInputs3": "nums = [0,0,1,1,1,1,2,3,3]",
        "exampleOutputs3": "7, nums = [0,0,1,1,2,3,3,_,_]"
    },
    {
        "id": 81,
        "title": "81. Search in Rotated Sorted Array II",
        "description": "There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).",
        "exampleInputs1": "nums = [2,5,6,0,0,1,2], target = 0",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [2,5,6,0,0,1,2], target = 3",
        "exampleOutputs2": "false"
    },
    {
        "id": 82,
        "title": "82. Remove Duplicates from Sorted List II",
        "description": "Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.",
        "exampleInputs1": "head = [1,2,3,3,4,4,5]",
        "exampleOutputs1": "[1,2,5]",
        "exampleInputs2": "head = [1,1,1,2,3]",
        "exampleOutputs2": "[2,3]"
    },
    {
        "id": 86,
        "title": "86. Partition List",
        "description": "Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.",
        "exampleInputs1": "head = [1,4,3,2,5,2], x = 3",
        "exampleOutputs1": "[1,2,2,4,3,5]",
        "exampleInputs2": "head = [2,1], x = 2",
        "exampleOutputs2": "[1,2]"
    },
    {
        "id": 89,
        "title": "89. Gray Code",
        "description": "An n-bit gray code sequence is a sequence of 2n integers where:",
        "exampleInputs1": "n = 2",
        "exampleOutputs1": "[0,1,3,2]",
        "exampleInputs2": "n = 1",
        "exampleOutputs2": "[0,1]"
    },
    {
        "id": 90,
        "title": "90. Subsets II",
        "description": "Given an integer array nums that may contain duplicates, return all possible subsets (the power set).",
        "exampleInputs1": "nums = [1,2,2]",
        "exampleOutputs1": "[[],[1],[1,2],[1,2,2],[2],[2,2]]",
        "exampleInputs2": "nums = [0]",
        "exampleOutputs2": "[[],[0]]"
    },
    {
        "id": 91,
        "title": "91. Decode Ways",
        "description": "A message containing letters from A-Z can be encoded into numbers using the following mapping:",
        "exampleInputs1": "'A' -> \"1\"",
        "exampleOutputs1": "'B' -> \"2\"",
        "exampleInputs2": "s = \"12\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "s = \"226\"",
        "exampleOutputs3": "3",
        "exampleInputs4": "s = \"0\"",
        "exampleOutputs4": "0",
        "exampleInputs5": "s = \"06\"",
        "exampleOutputs5": "0"
    },
    {
        "id": 92,
        "title": "92. Reverse Linked List II",
        "description": "Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.",
        "exampleInputs1": "head = [1,2,3,4,5], left = 2, right = 4",
        "exampleOutputs1": "[1,4,3,2,5]",
        "exampleInputs2": "head = [5], left = 1, right = 1",
        "exampleOutputs2": "[5]"
    },
    {
        "id": 93,
        "title": "93. Restore IP Addresses",
        "description": "Given a string s containing only digits, return all possible valid IP addresses that can be obtained from s. You can return them in any order.",
        "exampleInputs1": "s = \"25525511135\"",
        "exampleOutputs1": "[\"255.255.11.135\",\"255.255.111.35\"]",
        "exampleInputs2": "s = \"0000\"",
        "exampleOutputs2": "[\"0.0.0.0\"]",
        "exampleInputs3": "s = \"1111\"",
        "exampleOutputs3": "[\"1.1.1.1\"]",
        "exampleInputs4": "s = \"010010\"",
        "exampleOutputs4": "[\"0.10.0.10\",\"0.100.1.0\"]",
        "exampleInputs5": "s = \"101023\"",
        "exampleOutputs5": "[\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]"
    },
    {
        "id": 95,
        "title": "95. Unique Binary Search Trees II",
        "description": "Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.",
        "exampleInputs1": "n = 3",
        "exampleOutputs1": "[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]",
        "exampleInputs2": "n = 1",
        "exampleOutputs2": "[[1]]"
    },
    {
        "id": 96,
        "title": "96. Unique Binary Search Trees",
        "description": "Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.",
        "exampleInputs1": "n = 3",
        "exampleOutputs1": "5",
        "exampleInputs2": "n = 1",
        "exampleOutputs2": "1"
    },
    {
        "id": 97,
        "title": "97. Interleaving String",
        "description": "Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.",
        "exampleInputs1": "s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "s1 = \"\", s2 = \"\", s3 = \"\"",
        "exampleOutputs3": "true"
    },
    {
        "id": 98,
        "title": "98. Validate Binary Search Tree",
        "description": "Given the root of a binary tree, determine if it is a valid binary search tree (BST).",
        "exampleInputs1": "root = [2,1,3]",
        "exampleOutputs1": "true",
        "exampleInputs2": "root = [5,1,4,null,null,3,6]",
        "exampleOutputs2": "false"
    },
    {
        "id": 99,
        "title": "99. Recover Binary Search Tree",
        "description": "You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.",
        "exampleInputs1": "root = [1,3,null,null,2]",
        "exampleOutputs1": "[3,1,null,null,2]",
        "exampleInputs2": "root = [3,1,4,null,null,2]",
        "exampleOutputs2": "[2,1,4,null,null,3]"
    },
    {
        "id": 102,
        "title": "102. Binary Tree Level Order Traversal",
        "description": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).",
        "exampleInputs1": "root = [3,9,20,null,null,15,7]",
        "exampleOutputs1": "[[3],[9,20],[15,7]]",
        "exampleInputs2": "root = [1]",
        "exampleOutputs2": "[[1]]",
        "exampleInputs3": "root = []",
        "exampleOutputs3": "[]"
    },
    {
        "id": 103,
        "title": "103. Binary Tree Zigzag Level Order Traversal",
        "description": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).",
        "exampleInputs1": "root = [3,9,20,null,null,15,7]",
        "exampleOutputs1": "[[3],[20,9],[15,7]]",
        "exampleInputs2": "root = [1]",
        "exampleOutputs2": "[[1]]",
        "exampleInputs3": "root = []",
        "exampleOutputs3": "[]"
    },
    {
        "id": 105,
        "title": "105. Construct Binary Tree from Preorder and Inorder Traversal",
        "description": "Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.",
        "exampleInputs1": "preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]",
        "exampleOutputs1": "[3,9,20,null,null,15,7]",
        "exampleInputs2": "preorder = [-1], inorder = [-1]",
        "exampleOutputs2": "[-1]"
    },
    {
        "id": 106,
        "title": "106. Construct Binary Tree from Inorder and Postorder Traversal",
        "description": "Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.",
        "exampleInputs1": "inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]",
        "exampleOutputs1": "[3,9,20,null,null,15,7]",
        "exampleInputs2": "inorder = [-1], postorder = [-1]",
        "exampleOutputs2": "[-1]"
    },
    {
        "id": 107,
        "title": "107. Binary Tree Level Order Traversal II",
        "description": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).",
        "exampleInputs1": "root = [3,9,20,null,null,15,7]",
        "exampleOutputs1": "[[15,7],[9,20],[3]]",
        "exampleInputs2": "root = [1]",
        "exampleOutputs2": "[[1]]",
        "exampleInputs3": "root = []",
        "exampleOutputs3": "[]"
    },
    {
        "id": 109,
        "title": "109. Convert Sorted List to Binary Search Tree",
        "description": "Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.",
        "exampleInputs1": "head = [-10,-3,0,5,9]",
        "exampleOutputs1": "[0,-3,9,-10,null,5]",
        "exampleInputs2": "head = []",
        "exampleOutputs2": "[]",
        "exampleInputs3": "head = [0]",
        "exampleOutputs3": "[0]",
        "exampleInputs4": "head = [1,3]",
        "exampleOutputs4": "[3,1]"
    },
    {
        "id": 113,
        "title": "113. Path Sum II",
        "description": "Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.",
        "exampleInputs1": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22",
        "exampleOutputs1": "[[5,4,11,2],[5,8,4,5]]",
        "exampleInputs2": "root = [1,2,3], targetSum = 5",
        "exampleOutputs2": "[]",
        "exampleInputs3": "root = [1,2], targetSum = 0",
        "exampleOutputs3": "[]"
    },
    {
        "id": 114,
        "title": "114. Flatten Binary Tree to Linked List",
        "description": "Given the root of a binary tree, flatten the tree into a \"linked list\":",
        "exampleInputs1": "root = [1,2,5,3,4,null,6]",
        "exampleOutputs1": "[1,null,2,null,3,null,4,null,5,null,6]",
        "exampleInputs2": "root = []",
        "exampleOutputs2": "[]",
        "exampleInputs3": "root = [0]",
        "exampleOutputs3": "[0]"
    },
    {
        "id": 116,
        "title": "116. Populating Next Right Pointers in Each Node",
        "description": "You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:",
        "exampleInputs1": "struct Node {",
        "exampleOutputs1": "int val;",
        "exampleInputs2": "root = [1,2,3,4,5,6,7]",
        "exampleOutputs2": "[1,#,2,3,#,4,5,6,7,#]",
        "exampleInputs3": "root = []",
        "exampleOutputs3": "[]"
    },
    {
        "id": 117,
        "title": "117. Populating Next Right Pointers in Each Node II",
        "description": "Given a binary tree",
        "exampleInputs1": "struct Node {",
        "exampleOutputs1": "int val;",
        "exampleInputs2": "root = [1,2,3,4,5,null,7]",
        "exampleOutputs2": "[1,#,2,3,#,4,5,7,#]",
        "exampleInputs3": "root = []",
        "exampleOutputs3": "[]"
    },
    {
        "id": 120,
        "title": "120. Triangle",
        "description": "Given a triangle array, return the minimum path sum from top to bottom.",
        "exampleInputs1": "triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]",
        "exampleOutputs1": "11",
        "exampleInputs2": "triangle = [[-10]]",
        "exampleOutputs2": "-10"
    },
    {
        "id": 128,
        "title": "128. Longest Consecutive Sequence",
        "description": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.",
        "exampleInputs1": "nums = [100,4,200,1,3,2]",
        "exampleOutputs1": "4",
        "exampleInputs2": "nums = [0,3,7,2,5,8,4,6,0,1]",
        "exampleOutputs2": "9"
    },
    {
        "id": 129,
        "title": "129. Sum Root to Leaf Numbers",
        "description": "You are given the root of a binary tree containing digits from 0 to 9 only.",
        "exampleInputs1": "root = [1,2,3]",
        "exampleOutputs1": "25",
        "exampleInputs2": "root = [4,9,0,5,1]",
        "exampleOutputs2": "1026"
    },
    {
        "id": 130,
        "title": "130. Surrounded Regions",
        "description": "Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.",
        "exampleInputs1": "board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]",
        "exampleOutputs1": "[[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]",
        "exampleInputs2": "board = [[\"X\"]]",
        "exampleOutputs2": "[[\"X\"]]"
    },
    {
        "id": 131,
        "title": "131. Palindrome Partitioning",
        "description": "Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.",
        "exampleInputs1": "s = \"aab\"",
        "exampleOutputs1": "[[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]",
        "exampleInputs2": "s = \"a\"",
        "exampleOutputs2": "[[\"a\"]]"
    },
    {
        "id": 133,
        "title": "133. Clone Graph",
        "description": "Given a reference of a node in a connected undirected graph.",
        "exampleInputs1": "class Node {",
        "exampleOutputs1": "public int val;",
        "exampleInputs2": "adjList = [[2,4],[1,3],[2,4],[1,3]]",
        "exampleOutputs2": "[[2,4],[1,3],[2,4],[1,3]]",
        "exampleInputs3": "adjList = [[]]",
        "exampleOutputs3": "[[]]",
        "exampleInputs4": "adjList = []",
        "exampleOutputs4": "[]",
        "exampleInputs5": "adjList = [[2],[1]]",
        "exampleOutputs5": "[[2],[1]]"
    },
    {
        "id": 134,
        "title": "134. Gas Station",
        "description": "There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].",
        "exampleInputs1": "gas = [1,2,3,4,5], cost = [3,4,5,1,2]",
        "exampleOutputs1": "3",
        "exampleInputs2": "gas = [2,3,4], cost = [3,4,3]",
        "exampleOutputs2": "-1"
    },
    {
        "id": 137,
        "title": "137. Single Number II",
        "description": "Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.",
        "exampleInputs1": "nums = [2,2,3,2]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [0,1,0,1,0,1,99]",
        "exampleOutputs2": "99"
    },
    {
        "id": 138,
        "title": "138. Copy List with Random Pointer",
        "description": "A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.",
        "exampleInputs1": "head = [[7,null],[13,0],[11,4],[10,2],[1,0]]",
        "exampleOutputs1": "[[7,null],[13,0],[11,4],[10,2],[1,0]]",
        "exampleInputs2": "head = [[1,1],[2,1]]",
        "exampleOutputs2": "[[1,1],[2,1]]",
        "exampleInputs3": "head = [[3,null],[3,0],[3,null]]",
        "exampleOutputs3": "[[3,null],[3,0],[3,null]]",
        "exampleInputs4": "head = []",
        "exampleOutputs4": "[]"
    },
    {
        "id": 139,
        "title": "139. Word Break",
        "description": "Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.",
        "exampleInputs1": "s = \"leetcode\", wordDict = [\"leet\",\"code\"]",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]",
        "exampleOutputs2": "true",
        "exampleInputs3": "s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]",
        "exampleOutputs3": "false"
    },
    {
        "id": 142,
        "title": "142. Linked List Cycle II",
        "description": "Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.",
        "exampleInputs1": "head = [3,2,0,-4], pos = 1",
        "exampleOutputs1": "tail connects to node index 1",
        "exampleInputs2": "head = [1,2], pos = 0",
        "exampleOutputs2": "tail connects to node index 0",
        "exampleInputs3": "head = [1], pos = -1",
        "exampleOutputs3": "no cycle"
    },
    {
        "id": 143,
        "title": "143. Reorder List",
        "description": "You are given the head of a singly linked-list. The list can be represented as:",
        "exampleInputs3": "head = [1,2,3,4]",
        "exampleOutputs3": "[1,4,2,3]",
        "exampleInputs4": "head = [1,2,3,4,5]",
        "exampleOutputs4": "[1,5,2,4,3]"
    },
    {
        "id": 146,
        "title": "146. LRU Cache",
        "description": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]"
    },
    {
        "id": 147,
        "title": "147. Insertion Sort List",
        "description": "Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.",
        "exampleInputs1": "head = [4,2,1,3]",
        "exampleOutputs1": "[1,2,3,4]",
        "exampleInputs2": "head = [-1,5,3,4,0]",
        "exampleOutputs2": "[-1,0,3,4,5]"
    },
    {
        "id": 148,
        "title": "148. Sort List",
        "description": "Given the head of a linked list, return the list after sorting it in ascending order.",
        "exampleInputs1": "head = [4,2,1,3]",
        "exampleOutputs1": "[1,2,3,4]",
        "exampleInputs2": "head = [-1,5,3,4,0]",
        "exampleOutputs2": "[-1,0,3,4,5]",
        "exampleInputs3": "head = []",
        "exampleOutputs3": "[]"
    },
    {
        "id": 150,
        "title": "150. Evaluate Reverse Polish Notation",
        "description": "Evaluate the value of an arithmetic expression in Reverse Polish Notation.",
        "exampleInputs1": "tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]",
        "exampleOutputs1": "9",
        "exampleInputs2": "tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]",
        "exampleOutputs2": "6",
        "exampleInputs3": "tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]",
        "exampleOutputs3": "22"
    },
    {
        "id": 151,
        "title": "151. Reverse Words in a String",
        "description": "Given an input string s, reverse the order of the words.",
        "exampleInputs1": "s = \"the sky is blue\"",
        "exampleOutputs1": "\"blue is sky the\"",
        "exampleInputs2": "s = \"  hello world  \"",
        "exampleOutputs2": "\"world hello\"",
        "exampleInputs3": "s = \"a good   example\"",
        "exampleOutputs3": "\"example good a\"",
        "exampleInputs4": "s = \"  Bob    Loves  Alice   \"",
        "exampleOutputs4": "\"Alice Loves Bob\"",
        "exampleInputs5": "s = \"Alice does not even like bob\"",
        "exampleOutputs5": "\"bob like even not does Alice\""
    },
    {
        "id": 152,
        "title": "152. Maximum Product Subarray",
        "description": "Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.",
        "exampleInputs1": "nums = [2,3,-2,4]",
        "exampleOutputs1": "6",
        "exampleInputs2": "nums = [-2,0,-1]",
        "exampleOutputs2": "0"
    },
    {
        "id": 153,
        "title": "153. Find Minimum in Rotated Sorted Array",
        "description": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:",
        "exampleInputs1": "nums = [3,4,5,1,2]",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [4,5,6,7,0,1,2]",
        "exampleOutputs2": "0",
        "exampleInputs3": "nums = [11,13,15,17]",
        "exampleOutputs3": "11"
    },
    {
        "id": 162,
        "title": "162. Find Peak Element",
        "description": "A peak element is an element that is strictly greater than its neighbors.",
        "exampleInputs1": "nums = [1,2,3,1]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,2,1,3,5,6,4]",
        "exampleOutputs2": "5"
    },
    {
        "id": 165,
        "title": "165. Compare Version Numbers",
        "description": "Given two version numbers, version1 and version2, compare them.",
        "exampleInputs1": "version1 = \"1.01\", version2 = \"1.001\"",
        "exampleOutputs1": "0",
        "exampleInputs2": "version1 = \"1.0\", version2 = \"1.0.0\"",
        "exampleOutputs2": "0",
        "exampleInputs3": "version1 = \"0.1\", version2 = \"1.1\"",
        "exampleOutputs3": "-1",
        "exampleInputs4": "version1 = \"1.0.1\", version2 = \"1\"",
        "exampleOutputs4": "1",
        "exampleInputs5": "version1 = \"7.5.2.4\", version2 = \"7.5.3\"",
        "exampleOutputs5": "-1"
    },
    {
        "id": 166,
        "title": "166. Fraction to Recurring Decimal",
        "description": "Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.",
        "exampleInputs1": "numerator = 1, denominator = 2",
        "exampleOutputs1": "\"0.5\"",
        "exampleInputs2": "numerator = 2, denominator = 1",
        "exampleOutputs2": "\"2\"",
        "exampleInputs3": "numerator = 2, denominator = 3",
        "exampleOutputs3": "\"0.(6)\"",
        "exampleInputs4": "numerator = 4, denominator = 333",
        "exampleOutputs4": "\"0.(012)\"",
        "exampleInputs5": "numerator = 1, denominator = 5",
        "exampleOutputs5": "\"0.2\""
    },
    {
        "id": 173,
        "title": "173. Binary Search Tree Iterator",
        "description": "Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]"
    },
    {
        "id": 179,
        "title": "179. Largest Number",
        "description": "Given a list of non-negative integers nums, arrange them such that they form the largest number.",
        "exampleInputs1": "nums = [10,2]",
        "exampleOutputs1": "\"210\"",
        "exampleInputs2": "nums = [3,30,34,5,9]",
        "exampleOutputs2": "\"9534330\"",
        "exampleInputs3": "nums = [1]",
        "exampleOutputs3": "\"1\"",
        "exampleInputs4": "nums = [10]",
        "exampleOutputs4": "\"10\""
    },
    {
        "id": 187,
        "title": "187. Repeated DNA Sequences",
        "description": "The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.",
        "exampleInputs1": "s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"",
        "exampleOutputs1": "[\"AAAAACCCCC\",\"CCCCCAAAAA\"]",
        "exampleInputs2": "s = \"AAAAAAAAAAAAA\"",
        "exampleOutputs2": "[\"AAAAAAAAAA\"]"
    },
    {
        "id": 189,
        "title": "189. Rotate Array",
        "description": "Given an array, rotate the array to the right by k steps, where k is non-negative.",
        "exampleInputs1": "nums = [1,2,3,4,5,6,7], k = 3",
        "exampleOutputs1": "[5,6,7,1,2,3,4]",
        "exampleInputs2": "nums = [-1,-100,3,99], k = 2",
        "exampleOutputs2": "[3,99,-1,-100]"
    },
    {
        "id": 198,
        "title": "198. House Robber",
        "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.",
        "exampleInputs1": "nums = [1,2,3,1]",
        "exampleOutputs1": "4",
        "exampleInputs2": "nums = [2,7,9,3,1]",
        "exampleOutputs2": "12"
    },
    {
        "id": 199,
        "title": "199. Binary Tree Right Side View",
        "description": "Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.",
        "exampleInputs1": "root = [1,2,3,null,5,null,4]",
        "exampleOutputs1": "[1,3,4]",
        "exampleInputs2": "root = [1,null,3]",
        "exampleOutputs2": "[1,3]",
        "exampleInputs3": "root = []",
        "exampleOutputs3": "[]"
    },
    {
        "id": 200,
        "title": "200. Number of Islands",
        "description": "Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.",
        "exampleInputs1": "grid = [",
        "exampleOutputs1": "[\"1\",\"1\",\"1\",\"1\",\"0\"],",
        "exampleInputs2": "grid = [",
        "exampleOutputs2": "[\"1\",\"1\",\"0\",\"0\",\"0\"],"
    },
    {
        "id": 201,
        "title": "201. Bitwise AND of Numbers Range",
        "description": "Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.",
        "exampleInputs1": "left = 5, right = 7",
        "exampleOutputs1": "4",
        "exampleInputs2": "left = 0, right = 0",
        "exampleOutputs2": "0",
        "exampleInputs3": "left = 1, right = 2147483647",
        "exampleOutputs3": "0"
    },
    {
        "id": 207,
        "title": "207. Course Schedule",
        "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.",
        "exampleInputs1": "numCourses = 2, prerequisites = [[1,0]]",
        "exampleOutputs1": "true",
        "exampleInputs2": "numCourses = 2, prerequisites = [[1,0],[0,1]]",
        "exampleOutputs2": "false"
    },
    {
        "id": 208,
        "title": "208. Implement Trie (Prefix Tree)",
        "description": "A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]"
    },
    {
        "id": 209,
        "title": "209. Minimum Size Subarray Sum",
        "description": "Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr] of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.",
        "exampleInputs1": "target = 7, nums = [2,3,1,2,4,3]",
        "exampleOutputs1": "2",
        "exampleInputs2": "target = 4, nums = [1,4,4]",
        "exampleOutputs2": "1",
        "exampleInputs3": "target = 11, nums = [1,1,1,1,1,1,1,1]",
        "exampleOutputs3": "0"
    },
    {
        "id": 210,
        "title": "210. Course Schedule II",
        "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.",
        "exampleInputs1": "numCourses = 2, prerequisites = [[1,0]]",
        "exampleOutputs1": "[0,1]",
        "exampleInputs2": "numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]",
        "exampleOutputs2": "[0,2,1,3]",
        "exampleInputs3": "numCourses = 1, prerequisites = []",
        "exampleOutputs3": "[0]"
    },
    {
        "id": 211,
        "title": "211. Design Add and Search Words Data Structure",
        "description": "Design a data structure that supports adding new words and finding if a string matches any previously added string.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]"
    },
    {
        "id": 213,
        "title": "213. House Robber II",
        "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.",
        "exampleInputs1": "nums = [2,3,2]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [1,2,3,1]",
        "exampleOutputs2": "4",
        "exampleInputs3": "nums = [1,2,3]",
        "exampleOutputs3": "3"
    },
    {
        "id": 215,
        "title": "215. Kth Largest Element in an Array",
        "description": "Given an integer array nums and an integer k, return the kth largest element in the array.",
        "exampleInputs1": "nums = [3,2,1,5,6,4], k = 2",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [3,2,3,1,2,4,5,5,6], k = 4",
        "exampleOutputs2": "4"
    },
    {
        "id": 216,
        "title": "216. Combination Sum III",
        "description": "Find all valid combinations of k numbers that sum up to n such that the following conditions are true:",
        "exampleInputs1": "k = 3, n = 7",
        "exampleOutputs1": "[[1,2,4]]",
        "exampleInputs2": "k = 3, n = 9",
        "exampleOutputs2": "[[1,2,6],[1,3,5],[2,3,4]]",
        "exampleInputs3": "k = 4, n = 1",
        "exampleOutputs3": "[]",
        "exampleInputs4": "k = 3, n = 2",
        "exampleOutputs4": "[]",
        "exampleInputs5": "k = 9, n = 45",
        "exampleOutputs5": "[[1,2,3,4,5,6,7,8,9]]"
    },
    {
        "id": 220,
        "title": "220. Contains Duplicate III",
        "description": "Given an integer array nums and two integers k and t, return true if there are two distinct indices i and j in the array such that abs(nums[i] - nums[j]) <= t and abs(i - j) <= k.",
        "exampleInputs1": "nums = [1,2,3,1], k = 3, t = 0",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [1,0,1,1], k = 1, t = 2",
        "exampleOutputs2": "true",
        "exampleInputs3": "nums = [1,5,9,1,5,9], k = 2, t = 3",
        "exampleOutputs3": "false"
    },
    {
        "id": 221,
        "title": "221. Maximal Square",
        "description": "Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.",
        "exampleInputs1": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]",
        "exampleOutputs1": "4",
        "exampleInputs2": "matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]",
        "exampleOutputs2": "1",
        "exampleInputs3": "matrix = [[\"0\"]]",
        "exampleOutputs3": "0"
    },
    {
        "id": 222,
        "title": "222. Count Complete Tree Nodes",
        "description": "Given the root of a complete binary tree, return the number of the nodes in the tree.",
        "exampleInputs1": "root = [1,2,3,4,5,6]",
        "exampleOutputs1": "6",
        "exampleInputs2": "root = []",
        "exampleOutputs2": "0",
        "exampleInputs3": "root = [1]",
        "exampleOutputs3": "1"
    },
    {
        "id": 223,
        "title": "223. Rectangle Area",
        "description": "Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.",
        "exampleInputs1": "ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2",
        "exampleOutputs1": "45",
        "exampleInputs2": "ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2",
        "exampleOutputs2": "16"
    },
    {
        "id": 227,
        "title": "227. Basic Calculator II",
        "description": "Given a string s which represents an expression, evaluate this expression and return its value.",
        "exampleInputs1": "s = \"3+2*2\"",
        "exampleOutputs1": "7",
        "exampleInputs2": "s = \" 3/2 \"",
        "exampleOutputs2": "1",
        "exampleInputs3": "s = \" 3+5 / 2 \"",
        "exampleOutputs3": "5"
    },
    {
        "id": 229,
        "title": "229. Majority Element II",
        "description": "Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.",
        "exampleInputs1": "nums = [3,2,3]",
        "exampleOutputs1": "[3]",
        "exampleInputs2": "nums = [1]",
        "exampleOutputs2": "[1]",
        "exampleInputs3": "nums = [1,2]",
        "exampleOutputs3": "[1,2]"
    },
    {
        "id": 230,
        "title": "230. Kth Smallest Element in a BST",
        "description": "Given the root of a binary search tree, and an integer k, return the kth (1-indexed) smallest element in the tree.",
        "exampleInputs1": "root = [3,1,4,null,2], k = 1",
        "exampleOutputs1": "1",
        "exampleInputs2": "root = [5,3,6,2,4,null,null,1], k = 3",
        "exampleOutputs2": "3"
    },
    {
        "id": 236,
        "title": "236. Lowest Common Ancestor of a Binary Tree",
        "description": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.",
        "exampleInputs1": "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1",
        "exampleOutputs1": "3",
        "exampleInputs2": "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4",
        "exampleOutputs2": "5",
        "exampleInputs3": "root = [1,2], p = 1, q = 2",
        "exampleOutputs3": "1"
    },
    {
        "id": 238,
        "title": "238. Product of Array Except Self",
        "description": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].",
        "exampleInputs1": "nums = [1,2,3,4]",
        "exampleOutputs1": "[24,12,8,6]",
        "exampleInputs2": "nums = [-1,1,0,-3,3]",
        "exampleOutputs2": "[0,0,9,0,0]"
    },
    {
        "id": 240,
        "title": "240. Search a 2D Matrix II",
        "description": "Write an efficient algorithm that searches for a target value in an m x n integer matrix. The matrix has the following properties:",
        "exampleInputs1": "matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5",
        "exampleOutputs1": "true",
        "exampleInputs2": "matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20",
        "exampleOutputs2": "false"
    },
    {
        "id": 241,
        "title": "241. Different Ways to Add Parentheses",
        "description": "Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.",
        "exampleInputs1": "expression = \"2-1-1\"",
        "exampleOutputs1": "[0,2]",
        "exampleInputs2": "expression = \"2*3-4*5\"",
        "exampleOutputs2": "[-34,-14,-10,-10,10]"
    },
    {
        "id": 260,
        "title": "260. Single Number III",
        "description": "Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.",
        "exampleInputs1": "nums = [1,2,1,3,2,5]",
        "exampleOutputs1": "[3,5]",
        "exampleInputs2": "nums = [-1,0]",
        "exampleOutputs2": "[-1,0]",
        "exampleInputs3": "nums = [0,1]",
        "exampleOutputs3": "[1,0]"
    },
    {
        "id": 264,
        "title": "264. Ugly Number II",
        "description": "An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.",
        "exampleInputs1": "n = 10",
        "exampleOutputs1": "12",
        "exampleInputs2": "n = 1",
        "exampleOutputs2": "1"
    },
    {
        "id": 274,
        "title": "274. H-Index",
        "description": "Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return compute the researcher's h-index.",
        "exampleInputs1": "citations = [3,0,6,1,5]",
        "exampleOutputs1": "3",
        "exampleInputs2": "citations = [1,3,1]",
        "exampleOutputs2": "1"
    },
    {
        "id": 275,
        "title": "275. H-Index II",
        "description": "Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations is sorted in an ascending order, return compute the researcher's h-index.",
        "exampleInputs1": "citations = [0,1,3,5,6]",
        "exampleOutputs1": "3",
        "exampleInputs2": "citations = [1,2,100]",
        "exampleOutputs2": "2"
    },
    {
        "id": 279,
        "title": "279. Perfect Squares",
        "description": "Given an integer n, return the least number of perfect square numbers that sum to n.",
        "exampleInputs1": "n = 12",
        "exampleOutputs1": "3",
        "exampleInputs2": "n = 13",
        "exampleOutputs2": "2"
    },
    {
        "id": 284,
        "title": "284. Peeking Iterator",
        "description": "Design an iterator that supports the peek operation on a list in addition to the hasNext and the next operations.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"PeekingIterator\", \"next\", \"peek\", \"next\", \"next\", \"hasNext\"]"
    },
    {
        "id": 287,
        "title": "287. Find the Duplicate Number",
        "description": "Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.",
        "exampleInputs1": "nums = [1,3,4,2,2]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [3,1,3,4,2]",
        "exampleOutputs2": "3",
        "exampleInputs3": "nums = [1,1]",
        "exampleOutputs3": "1",
        "exampleInputs4": "nums = [1,1,2]",
        "exampleOutputs4": "1"
    },
    {
        "id": 289,
        "title": "289. Game of Life",
        "description": "According to Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"",
        "exampleInputs1": "board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]",
        "exampleOutputs1": "[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]",
        "exampleInputs2": "board = [[1,1],[1,0]]",
        "exampleOutputs2": "[[1,1],[1,1]]"
    },
    {
        "id": 299,
        "title": "299. Bulls and Cows",
        "description": "You are playing the Bulls and Cows game with your friend.",
        "exampleInputs1": "secret = \"1807\", guess = \"7810\"",
        "exampleOutputs1": "\"1A3B\"",
        "exampleInputs2": "secret = \"1123\", guess = \"0111\"",
        "exampleOutputs2": "\"1A1B\"",
        "exampleInputs3": "secret = \"1\", guess = \"0\"",
        "exampleOutputs3": "\"0A0B\"",
        "exampleInputs4": "secret = \"1\", guess = \"1\"",
        "exampleOutputs4": "\"1A0B\""
    },
    {
        "id": 300,
        "title": "300. Longest Increasing Subsequence",
        "description": "Given an integer array nums, return the length of the longest strictly increasing subsequence.",
        "exampleInputs1": "nums = [10,9,2,5,3,7,101,18]",
        "exampleOutputs1": "4",
        "exampleInputs2": "nums = [0,1,0,3,2,3]",
        "exampleOutputs2": "4",
        "exampleInputs3": "nums = [7,7,7,7,7,7,7]",
        "exampleOutputs3": "1"
    },
    {
        "id": 304,
        "title": "304. Range Sum Query 2D - Immutable",
        "description": "Given a 2D matrix matrix, handle multiple queries of the following type:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"]"
    },
    {
        "id": 306,
        "title": "306. Additive Number",
        "description": "Additive number is a string whose digits can form additive sequence.",
        "exampleInputs1": "\"112358\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "\"199100199\"",
        "exampleOutputs2": "true"
    },
    {
        "id": 307,
        "title": "307. Range Sum Query - Mutable",
        "description": "Given an integer array nums, handle multiple queries of the following types:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]"
    },
    {
        "id": 309,
        "title": "309. Best Time to Buy and Sell Stock with Cooldown",
        "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day.",
        "exampleInputs1": "prices = [1,2,3,0,2]",
        "exampleOutputs1": "3",
        "exampleInputs2": "prices = [1]",
        "exampleOutputs2": "0"
    },
    {
        "id": 310,
        "title": "310. Minimum Height Trees",
        "description": "A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.",
        "exampleInputs1": "n = 4, edges = [[1,0],[1,2],[1,3]]",
        "exampleOutputs1": "[1]",
        "exampleInputs2": "n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]",
        "exampleOutputs2": "[3,4]",
        "exampleInputs3": "n = 1, edges = []",
        "exampleOutputs3": "[0]",
        "exampleInputs4": "n = 2, edges = [[0,1]]",
        "exampleOutputs4": "[0,1]"
    },
    {
        "id": 313,
        "title": "313. Super Ugly Number",
        "description": "A super ugly number is a positive integer whose prime factors are in the array primes.",
        "exampleInputs1": "n = 12, primes = [2,7,13,19]",
        "exampleOutputs1": "32",
        "exampleInputs2": "n = 1, primes = [2,3,5]",
        "exampleOutputs2": "1"
    },
    {
        "id": 316,
        "title": "316. Remove Duplicate Letters",
        "description": "Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.",
        "exampleInputs1": "s = \"bcabc\"",
        "exampleOutputs1": "\"abc\"",
        "exampleInputs2": "s = \"cbacdcbc\"",
        "exampleOutputs2": "\"acdb\""
    },
    {
        "id": 318,
        "title": "318. Maximum Product of Word Lengths",
        "description": "Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.",
        "exampleInputs1": "words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]",
        "exampleOutputs1": "16",
        "exampleInputs2": "words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]",
        "exampleOutputs2": "4",
        "exampleInputs3": "words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]",
        "exampleOutputs3": "0"
    },
    {
        "id": 319,
        "title": "319. Bulb Switcher",
        "description": "There are n bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.",
        "exampleInputs1": "n = 3",
        "exampleOutputs1": "1",
        "exampleInputs2": "n = 0",
        "exampleOutputs2": "0",
        "exampleInputs3": "n = 1",
        "exampleOutputs3": "1"
    },
    {
        "id": 322,
        "title": "322. Coin Change",
        "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.",
        "exampleInputs1": "coins = [1,2,5], amount = 11",
        "exampleOutputs1": "3",
        "exampleInputs2": "coins = [2], amount = 3",
        "exampleOutputs2": "-1",
        "exampleInputs3": "coins = [1], amount = 0",
        "exampleOutputs3": "0",
        "exampleInputs4": "coins = [1], amount = 1",
        "exampleOutputs4": "1",
        "exampleInputs5": "coins = [1], amount = 2",
        "exampleOutputs5": "2"
    },
    {
        "id": 324,
        "title": "324. Wiggle Sort II",
        "description": "Given an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....",
        "exampleInputs1": "nums = [1,5,1,1,6,4]",
        "exampleOutputs1": "[1,6,1,5,1,4]",
        "exampleInputs2": "nums = [1,3,2,2,3,1]",
        "exampleOutputs2": "[2,3,1,3,1,2]"
    },
    {
        "id": 328,
        "title": "328. Odd Even Linked List",
        "description": "Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.",
        "exampleInputs1": "head = [1,2,3,4,5]",
        "exampleOutputs1": "[1,3,5,2,4]",
        "exampleInputs2": "head = [2,1,3,5,6,4,7]",
        "exampleOutputs2": "[2,3,6,7,1,5,4]"
    },
    {
        "id": 331,
        "title": "331. Verify Preorder Serialization of a Binary Tree",
        "description": "One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as '#'.",
        "exampleInputs1": "preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "preorder = \"1,#\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "preorder = \"9,#,#,1\"",
        "exampleOutputs3": "false"
    },
    {
        "id": 332,
        "title": "332. Reconstruct Itinerary",
        "description": "You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.",
        "exampleInputs1": "tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]",
        "exampleOutputs1": "[\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]",
        "exampleInputs2": "tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]",
        "exampleOutputs2": "[\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]"
    },
    {
        "id": 334,
        "title": "334. Increasing Triplet Subsequence",
        "description": "Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.",
        "exampleInputs1": "nums = [1,2,3,4,5]",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [5,4,3,2,1]",
        "exampleOutputs2": "false",
        "exampleInputs3": "nums = [2,1,5,0,4,6]",
        "exampleOutputs3": "true"
    },
    {
        "id": 337,
        "title": "337. House Robber III",
        "description": "The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.",
        "exampleInputs1": "root = [3,2,3,null,3,null,1]",
        "exampleOutputs1": "7",
        "exampleInputs2": "root = [3,4,5,1,3,null,1]",
        "exampleOutputs2": "9"
    },
    {
        "id": 341,
        "title": "341. Flatten Nested List Iterator",
        "description": "You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.",
        "exampleInputs1": "initialize iterator with nestedList",
        "exampleOutputs1": "res = []",
        "exampleInputs2": "nestedList = [[1,1],2,[1,1]]",
        "exampleOutputs2": "[1,1,2,1,1]",
        "exampleInputs3": "nestedList = [1,[4,[6]]]",
        "exampleOutputs3": "[1,4,6]"
    },
    {
        "id": 343,
        "title": "343. Integer Break",
        "description": "Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.",
        "exampleInputs1": "n = 2",
        "exampleOutputs1": "1",
        "exampleInputs2": "n = 10",
        "exampleOutputs2": "36"
    },
    {
        "id": 347,
        "title": "347. Top K Frequent Elements",
        "description": "Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.",
        "exampleInputs1": "nums = [1,1,1,2,2,3], k = 2",
        "exampleOutputs1": "[1,2]",
        "exampleInputs2": "nums = [1], k = 1",
        "exampleOutputs2": "[1]"
    },
    {
        "id": 355,
        "title": "355. Design Twitter",
        "description": "Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]"
    },
    {
        "id": 357,
        "title": "357. Count Numbers with Unique Digits",
        "description": "Given an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10n.",
        "exampleInputs1": "n = 2",
        "exampleOutputs1": "91",
        "exampleInputs2": "n = 0",
        "exampleOutputs2": "1"
    },
    {
        "id": 365,
        "title": "365. Water and Jug Problem",
        "description": "You are given two jugs with capacities jug1Capacity and jug2Capacity liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly targetCapacity liters using these two jugs.",
        "exampleInputs1": "jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4",
        "exampleOutputs1": "true",
        "exampleInputs2": "jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5",
        "exampleOutputs2": "false",
        "exampleInputs3": "jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3",
        "exampleOutputs3": "true"
    },
    {
        "id": 368,
        "title": "368. Largest Divisible Subset",
        "description": "Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:",
        "exampleInputs1": "nums = [1,2,3]",
        "exampleOutputs1": "[1,2]",
        "exampleInputs2": "nums = [1,2,4,8]",
        "exampleOutputs2": "[1,2,4,8]"
    },
    {
        "id": 371,
        "title": "371. Sum of Two Integers",
        "description": "Given two integers a and b, return the sum of the two integers without using the operators + and -.",
        "exampleInputs1": "a = 1, b = 2",
        "exampleOutputs1": "3",
        "exampleInputs2": "a = 2, b = 3",
        "exampleOutputs2": "5"
    },
    {
        "id": 372,
        "title": "372. Super Pow",
        "description": "Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.",
        "exampleInputs1": "a = 2, b = [3]",
        "exampleOutputs1": "8",
        "exampleInputs2": "a = 2, b = [1,0]",
        "exampleOutputs2": "1024",
        "exampleInputs3": "a = 1, b = [4,3,3,8,5,2]",
        "exampleOutputs3": "1",
        "exampleInputs4": "a = 2147483647, b = [2,0,0]",
        "exampleOutputs4": "1198"
    },
    {
        "id": 373,
        "title": "373. Find K Pairs with Smallest Sums",
        "description": "You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.",
        "exampleInputs1": "nums1 = [1,7,11], nums2 = [2,4,6], k = 3",
        "exampleOutputs1": "[[1,2],[1,4],[1,6]]",
        "exampleInputs2": "nums1 = [1,1,2], nums2 = [1,2,3], k = 2",
        "exampleOutputs2": "[[1,1],[1,1]]",
        "exampleInputs3": "nums1 = [1,2], nums2 = [3], k = 3",
        "exampleOutputs3": "[[1,3],[2,3]]"
    },
    {
        "id": 375,
        "title": "375. Guess Number Higher or Lower II",
        "description": "We are playing the Guessing Game. The game will work as follows:",
        "exampleInputs1": "n = 10",
        "exampleOutputs1": "16",
        "exampleInputs2": "n = 1",
        "exampleOutputs2": "0",
        "exampleInputs3": "n = 2",
        "exampleOutputs3": "1"
    },
    {
        "id": 376,
        "title": "376. Wiggle Subsequence",
        "description": "A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.",
        "exampleInputs1": "nums = [1,7,4,9,2,5]",
        "exampleOutputs1": "6",
        "exampleInputs2": "nums = [1,17,5,10,13,15,10,5,16,8]",
        "exampleOutputs2": "7",
        "exampleInputs3": "nums = [1,2,3,4,5,6,7,8,9]",
        "exampleOutputs3": "2"
    },
    {
        "id": 377,
        "title": "377. Combination Sum IV",
        "description": "Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.",
        "exampleInputs1": "nums = [1,2,3], target = 4",
        "exampleOutputs1": "7",
        "exampleInputs2": "nums = [9], target = 3",
        "exampleOutputs2": "0"
    },
    {
        "id": 378,
        "title": "378. Kth Smallest Element in a Sorted Matrix",
        "description": "Given an n x n matrix where each of the rows and columns are sorted in ascending order, return the kth smallest element in the matrix.",
        "exampleInputs1": "matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8",
        "exampleOutputs1": "13",
        "exampleInputs2": "matrix = [[-5]], k = 1",
        "exampleOutputs2": "-5"
    },
    {
        "id": 380,
        "title": "380. Insert Delete GetRandom O(1)",
        "description": "Implement the RandomizedSet class:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]"
    },
    {
        "id": 382,
        "title": "382. Linked List Random Node",
        "description": "Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"]"
    },
    {
        "id": 384,
        "title": "384. Shuffle an Array",
        "description": "Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]"
    },
    {
        "id": 385,
        "title": "385. Mini Parser",
        "description": "Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized NestedInteger.",
        "exampleInputs1": "s = \"324\"",
        "exampleOutputs1": "324",
        "exampleInputs2": "s = \"[123,[456,[789]]]\"",
        "exampleOutputs2": "[123,[456,[789]]]"
    },
    {
        "id": 386,
        "title": "386. Lexicographical Numbers",
        "description": "Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.",
        "exampleInputs1": "n = 13",
        "exampleOutputs1": "[1,10,11,12,13,2,3,4,5,6,7,8,9]",
        "exampleInputs2": "n = 2",
        "exampleOutputs2": "[1,2]"
    },
    {
        "id": 388,
        "title": "388. Longest Absolute File Path",
        "description": "Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:",
        "exampleInputs1": "dir",
        "exampleOutputs1": "⟶ subdir1",
        "exampleInputs2": "input = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"",
        "exampleOutputs2": "20",
        "exampleInputs3": "input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"",
        "exampleOutputs3": "32",
        "exampleInputs4": "input = \"a\"",
        "exampleOutputs4": "0",
        "exampleInputs5": "input = \"file1.txt\\nfile2.txt\\nlongfile.txt\"",
        "exampleOutputs5": "12"
    },
    {
        "id": 390,
        "title": "390. Elimination Game",
        "description": "You have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. Apply the following algorithm on arr:",
        "exampleInputs1": "n = 9",
        "exampleOutputs1": "6",
        "exampleInputs2": "n = 1",
        "exampleOutputs2": "1"
    },
    {
        "id": 393,
        "title": "393. UTF-8 Validation",
        "description": "Given an integer array data representing the data, return whether it is a valid UTF-8 encoding.",
        "exampleInputs1": "Char. number range  |        UTF-8 octet sequence",
        "exampleOutputs1": "(hexadecimal)    |              (binary)",
        "exampleInputs2": "data = [197,130,1]",
        "exampleOutputs2": "true",
        "exampleInputs3": "data = [235,140,4]",
        "exampleOutputs3": "false"
    },
    {
        "id": 394,
        "title": "394. Decode String",
        "description": "Given an encoded string, return its decoded string.",
        "exampleInputs1": "s = \"3[a]2[bc]\"",
        "exampleOutputs1": "\"aaabcbc\"",
        "exampleInputs2": "s = \"3[a2[c]]\"",
        "exampleOutputs2": "\"accaccacc\"",
        "exampleInputs3": "s = \"2[abc]3[cd]ef\"",
        "exampleOutputs3": "\"abcabccdcdcdef\"",
        "exampleInputs4": "s = \"abc3[cd]xyz\"",
        "exampleOutputs4": "\"abccdcdcdxyz\""
    },
    {
        "id": 395,
        "title": "395. Longest Substring with At Least K Repeating Characters",
        "description": "Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.",
        "exampleInputs1": "s = \"aaabb\", k = 3",
        "exampleOutputs1": "3",
        "exampleInputs2": "s = \"ababbc\", k = 2",
        "exampleOutputs2": "5"
    },
    {
        "id": 396,
        "title": "396. Rotate Function",
        "description": "You are given an integer array nums of length n.",
        "exampleInputs1": "nums = [4,3,2,6]",
        "exampleOutputs1": "26",
        "exampleInputs2": "nums = [100]",
        "exampleOutputs2": "0"
    },
    {
        "id": 397,
        "title": "397. Integer Replacement",
        "description": "Given a positive integer n, you can apply one of the following operations:",
        "exampleInputs1": "n = 8",
        "exampleOutputs1": "3",
        "exampleInputs2": "n = 7",
        "exampleOutputs2": "4",
        "exampleInputs3": "n = 4",
        "exampleOutputs3": "2"
    },
    {
        "id": 398,
        "title": "398. Random Pick Index",
        "description": "Given an integer array nums with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"Solution\", \"pick\", \"pick\", \"pick\"]"
    },
    {
        "id": 399,
        "title": "399. Evaluate Division",
        "description": "You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.",
        "exampleInputs1": "equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]",
        "exampleOutputs1": "[6.00000,0.50000,-1.00000,1.00000,-1.00000]",
        "exampleInputs2": "equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]",
        "exampleOutputs2": "[3.75000,0.40000,5.00000,0.20000]",
        "exampleInputs3": "equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]",
        "exampleOutputs3": "[0.50000,2.00000,-1.00000,-1.00000]"
    },
    {
        "id": 400,
        "title": "400. Nth Digit",
        "description": "Given an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...].",
        "exampleInputs1": "n = 3",
        "exampleOutputs1": "3",
        "exampleInputs2": "n = 11",
        "exampleOutputs2": "0"
    },
    {
        "id": 402,
        "title": "402. Remove K Digits",
        "description": "Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.",
        "exampleInputs1": "num = \"1432219\", k = 3",
        "exampleOutputs1": "\"1219\"",
        "exampleInputs2": "num = \"10200\", k = 1",
        "exampleOutputs2": "\"200\"",
        "exampleInputs3": "num = \"10\", k = 2",
        "exampleOutputs3": "\"0\""
    },
    {
        "id": 406,
        "title": "406. Queue Reconstruction by Height",
        "description": "You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.",
        "exampleInputs1": "people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]",
        "exampleOutputs1": "[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]",
        "exampleInputs2": "people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]",
        "exampleOutputs2": "[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]"
    },
    {
        "id": 413,
        "title": "413. Arithmetic Slices",
        "description": "An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.",
        "exampleInputs1": "nums = [1,2,3,4]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [1]",
        "exampleOutputs2": "0"
    },
    {
        "id": 416,
        "title": "416. Partition Equal Subset Sum",
        "description": "Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.",
        "exampleInputs1": "nums = [1,5,11,5]",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [1,2,3,5]",
        "exampleOutputs2": "false"
    },
    {
        "id": 417,
        "title": "417. Pacific Atlantic Water Flow",
        "description": "There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.",
        "exampleInputs1": "heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]",
        "exampleOutputs1": "[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]",
        "exampleInputs2": "heights = [[2,1],[1,2]]",
        "exampleOutputs2": "[[0,0],[0,1],[1,0],[1,1]]"
    },
    {
        "id": 419,
        "title": "419. Battleships in a Board",
        "description": "Given an m x n matrix board where each cell is a battleship 'X' or empty '.', return the number of the battleships on board.",
        "exampleInputs1": "board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "board = [[\".\"]]",
        "exampleOutputs2": "0"
    },
    {
        "id": 421,
        "title": "421. Maximum XOR of Two Numbers in an Array",
        "description": "Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.",
        "exampleInputs1": "nums = [3,10,5,25,2,8]",
        "exampleOutputs1": "28",
        "exampleInputs2": "nums = [0]",
        "exampleOutputs2": "0",
        "exampleInputs3": "nums = [2,4]",
        "exampleOutputs3": "6",
        "exampleInputs4": "nums = [8,10,2]",
        "exampleOutputs4": "10",
        "exampleInputs5": "nums = [14,70,53,83,49,91,36,80,92,51,66,70]",
        "exampleOutputs5": "127"
    },
    {
        "id": 423,
        "title": "423. Reconstruct Original Digits from English",
        "description": "Given a string s containing an out-of-order English representation of digits 0-9, return the digits in ascending order.",
        "exampleInputs1": "s = \"owoztneoer\"",
        "exampleOutputs1": "\"012\"",
        "exampleInputs2": "s = \"fviefuro\"",
        "exampleOutputs2": "\"45\""
    },
    {
        "id": 424,
        "title": "424. Longest Repeating Character Replacement",
        "description": "You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.",
        "exampleInputs1": "s = \"ABAB\", k = 2",
        "exampleOutputs1": "4",
        "exampleInputs2": "s = \"AABABBA\", k = 1",
        "exampleOutputs2": "4"
    },
    {
        "id": 427,
        "title": "427. Construct Quad Tree",
        "description": "Given a n * n matrix grid of 0's and 1's only. We want to represent the grid with a Quad-Tree.",
        "exampleInputs1": "class Node {",
        "exampleOutputs1": "public boolean val;",
        "exampleInputs2": "grid = [[0,1],[1,0]]",
        "exampleOutputs2": "[[0,1],[1,0],[1,1],[1,1],[1,0]]",
        "exampleInputs3": "grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]",
        "exampleOutputs3": "[[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]",
        "exampleInputs4": "grid = [[1,1],[1,1]]",
        "exampleOutputs4": "[[1,1]]",
        "exampleInputs5": "grid = [[0]]",
        "exampleOutputs5": "[[1,0]]",
        "exampleInputs6": "grid = [[1,1,0,0],[1,1,0,0],[0,0,1,1],[0,0,1,1]]",
        "exampleOutputs6": "[[0,1],[1,1],[1,0],[1,0],[1,1]]"
    },
    {
        "id": 429,
        "title": "429. N-ary Tree Level Order Traversal",
        "description": "Given an n-ary tree, return the level order traversal of its nodes' values.",
        "exampleInputs1": "root = [1,null,3,2,4,null,5,6]",
        "exampleOutputs1": "[[1],[3,2,4],[5,6]]",
        "exampleInputs2": "root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        "exampleOutputs2": "[[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]"
    },
    {
        "id": 430,
        "title": "430. Flatten a Multilevel Doubly Linked List",
        "description": "You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.",
        "exampleInputs1": "head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]",
        "exampleOutputs1": "[1,2,3,7,8,11,12,9,10,4,5,6]",
        "exampleInputs2": "head = [1,2,null,3]",
        "exampleOutputs2": "[1,3,2]",
        "exampleInputs3": "head = []",
        "exampleOutputs3": "[]",
        "exampleInputs4": "1---2---3---4---5---6--NULL",
        "exampleOutputs4": "|",
        "exampleInputs5": "[1,2,3,4,5,6,null]",
        "exampleOutputs5": "[7,8,9,10,null]",
        "exampleInputs6": "[1,2,3,4,5,6,null]",
        "exampleOutputs6": "[null,null,7,8,9,10,null]"
    },
    {
        "id": 433,
        "title": "433. Minimum Genetic Mutation",
        "description": "A gene string can be represented by an 8-character long string, with choices from 'A', 'C', 'G', and 'T'.",
        "exampleInputs1": "start = \"AACCGGTT\", end = \"AACCGGTA\", bank = [\"AACCGGTA\"]",
        "exampleOutputs1": "1",
        "exampleInputs2": "start = \"AACCGGTT\", end = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]",
        "exampleOutputs2": "2",
        "exampleInputs3": "start = \"AAAAACCC\", end = \"AACCCCCC\", bank = [\"AAAACCCC\",\"AAACCCCC\",\"AACCCCCC\"]",
        "exampleOutputs3": "3"
    },
    {
        "id": 435,
        "title": "435. Non-overlapping Intervals",
        "description": "Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.",
        "exampleInputs1": "intervals = [[1,2],[2,3],[3,4],[1,3]]",
        "exampleOutputs1": "1",
        "exampleInputs2": "intervals = [[1,2],[1,2],[1,2]]",
        "exampleOutputs2": "2",
        "exampleInputs3": "intervals = [[1,2],[2,3]]",
        "exampleOutputs3": "0"
    },
    {
        "id": 436,
        "title": "436. Find Right Interval",
        "description": "You are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique.",
        "exampleInputs1": "intervals = [[1,2]]",
        "exampleOutputs1": "[-1]",
        "exampleInputs2": "intervals = [[3,4],[2,3],[1,2]]",
        "exampleOutputs2": "[-1,0,1]",
        "exampleInputs3": "intervals = [[1,4],[2,3],[3,4]]",
        "exampleOutputs3": "[-1,2,-1]"
    },
    {
        "id": 437,
        "title": "437. Path Sum III",
        "description": "Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.",
        "exampleInputs1": "root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8",
        "exampleOutputs1": "3",
        "exampleInputs2": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22",
        "exampleOutputs2": "3"
    },
    {
        "id": 438,
        "title": "438. Find All Anagrams in a String",
        "description": "Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.",
        "exampleInputs1": "s = \"cbaebabacd\", p = \"abc\"",
        "exampleOutputs1": "[0,6]",
        "exampleInputs2": "s = \"abab\", p = \"ab\"",
        "exampleOutputs2": "[0,1,2]"
    },
    {
        "id": 442,
        "title": "442. Find All Duplicates in an Array",
        "description": "Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.",
        "exampleInputs1": "nums = [4,3,2,7,8,2,3,1]",
        "exampleOutputs1": "[2,3]",
        "exampleInputs2": "nums = [1,1,2]",
        "exampleOutputs2": "[1]",
        "exampleInputs3": "nums = [1]",
        "exampleOutputs3": "[]"
    },
    {
        "id": 443,
        "title": "443. String Compression",
        "description": "Given an array of characters chars, compress it using the following algorithm:",
        "exampleInputs1": "chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]",
        "exampleOutputs1": "Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]",
        "exampleInputs2": "chars = [\"a\"]",
        "exampleOutputs2": "Return 1, and the first character of the input array should be: [\"a\"]",
        "exampleInputs3": "chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]",
        "exampleOutputs3": "Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].",
        "exampleInputs4": "chars = [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"]",
        "exampleOutputs4": "Return 6, and the first 6 characters of the input array should be: [\"a\",\"3\",\"b\",\"2\",\"a\",\"2\"]."
    },
    {
        "id": 445,
        "title": "445. Add Two Numbers II",
        "description": "You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.",
        "exampleInputs1": "l1 = [7,2,4,3], l2 = [5,6,4]",
        "exampleOutputs1": "[7,8,0,7]",
        "exampleInputs2": "l1 = [2,4,3], l2 = [5,6,4]",
        "exampleOutputs2": "[8,0,7]",
        "exampleInputs3": "l1 = [0], l2 = [0]",
        "exampleOutputs3": "[0]"
    },
    {
        "id": 447,
        "title": "447. Number of Boomerangs",
        "description": "You are given n points in the plane that are all distinct, where points[i] = [xi, yi]. A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).",
        "exampleInputs1": "points = [[0,0],[1,0],[2,0]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "points = [[1,1],[2,2],[3,3]]",
        "exampleOutputs2": "2",
        "exampleInputs3": "points = [[1,1]]",
        "exampleOutputs3": "0"
    },
    {
        "id": 449,
        "title": "449. Serialize and Deserialize BST",
        "description": "Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.",
        "exampleInputs1": "root = [2,1,3]",
        "exampleOutputs1": "[2,1,3]",
        "exampleInputs2": "root = []",
        "exampleOutputs2": "[]"
    },
    {
        "id": 450,
        "title": "450. Delete Node in a BST",
        "description": "Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.",
        "exampleInputs1": "root = [5,3,6,2,4,null,7], key = 3",
        "exampleOutputs1": "[5,4,6,2,null,null,7]",
        "exampleInputs2": "root = [5,3,6,2,4,null,7], key = 0",
        "exampleOutputs2": "[5,3,6,2,4,null,7]",
        "exampleInputs3": "root = [], key = 0",
        "exampleOutputs3": "[]"
    },
    {
        "id": 451,
        "title": "451. Sort Characters By Frequency",
        "description": "Given a string s, sort it in decreasing order based on the frequency of characters, and return the sorted string.",
        "exampleInputs1": "s = \"tree\"",
        "exampleOutputs1": "\"eert\"",
        "exampleInputs2": "s = \"cccaaa\"",
        "exampleOutputs2": "\"aaaccc\"",
        "exampleInputs3": "s = \"Aabb\"",
        "exampleOutputs3": "\"bbAa\""
    },
    {
        "id": 452,
        "title": "452. Minimum Number of Arrows to Burst Balloons",
        "description": "There are some spherical balloons spread in two-dimensional space. For each balloon, provided input is the start and end coordinates of the horizontal diameter. Since it's horizontal, y-coordinates don't matter, and hence the x-coordinates of start and end of the diameter suffice. The start is always smaller than the end.",
        "exampleInputs1": "points = [[10,16],[2,8],[1,6],[7,12]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "points = [[1,2],[3,4],[5,6],[7,8]]",
        "exampleOutputs2": "4",
        "exampleInputs3": "points = [[1,2],[2,3],[3,4],[4,5]]",
        "exampleOutputs3": "2"
    },
    {
        "id": 454,
        "title": "454. 4Sum II",
        "description": "Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:",
        "exampleInputs1": "nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]",
        "exampleOutputs2": "1"
    },
    {
        "id": 456,
        "title": "456. 132 Pattern",
        "description": "Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].",
        "exampleInputs1": "nums = [1,2,3,4]",
        "exampleOutputs1": "false",
        "exampleInputs2": "nums = [3,1,4,2]",
        "exampleOutputs2": "true",
        "exampleInputs3": "nums = [-1,3,2,0]",
        "exampleOutputs3": "true"
    },
    {
        "id": 457,
        "title": "457. Circular Array Loop",
        "description": "You are playing a game involving a circular array of non-zero integers nums. Each nums[i] denotes the number of indices forward/backward you must move if you are located at index i:",
        "exampleInputs1": "nums = [2,-1,1,2,2]",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [-1,2]",
        "exampleOutputs2": "false",
        "exampleInputs3": "nums = [-2,1,-1,-2,-2]",
        "exampleOutputs3": "false"
    },
    {
        "id": 462,
        "title": "462. Minimum Moves to Equal Array Elements II",
        "description": "Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.",
        "exampleInputs1": "nums = [1,2,3]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,10,2,9]",
        "exampleOutputs2": "16"
    },
    {
        "id": 464,
        "title": "464. Can I Win",
        "description": "In the \"100 game\" two players take turns adding, to a running total, any integer from 1 to 10. The player who first causes the running total to reach or exceed 100 wins.",
        "exampleInputs1": "maxChoosableInteger = 10, desiredTotal = 11",
        "exampleOutputs1": "false",
        "exampleInputs2": "maxChoosableInteger = 10, desiredTotal = 0",
        "exampleOutputs2": "true",
        "exampleInputs3": "maxChoosableInteger = 10, desiredTotal = 1",
        "exampleOutputs3": "true"
    },
    {
        "id": 467,
        "title": "467. Unique Substrings in Wraparound String",
        "description": "We define the string s to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so s will look like this:",
        "exampleInputs1": "p = \"a\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "p = \"cac\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "p = \"zab\"",
        "exampleOutputs3": "6"
    },
    {
        "id": 468,
        "title": "468. Validate IP Address",
        "description": "Given a string IP, return \"IPv4\" if IP is a valid IPv4 address, \"IPv6\" if IP is a valid IPv6 address or \"Neither\" if IP is not a correct IP of any type.",
        "exampleInputs1": "IP = \"172.16.254.1\"",
        "exampleOutputs1": "\"IPv4\"",
        "exampleInputs2": "IP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"",
        "exampleOutputs2": "\"IPv6\"",
        "exampleInputs3": "IP = \"256.256.256.256\"",
        "exampleOutputs3": "\"Neither\"",
        "exampleInputs4": "IP = \"2001:0db8:85a3:0:0:8A2E:0370:7334:\"",
        "exampleOutputs4": "\"Neither\"",
        "exampleInputs5": "IP = \"1e1.4.5.6\"",
        "exampleOutputs5": "\"Neither\""
    },
    {
        "id": 470,
        "title": "470. Implement Rand10() Using Rand7()",
        "description": "Given the API rand7() that generates a uniform random integer in the range [1, 7], write a function rand10() that generates a uniform random integer in the range [1, 10]. You can only call the API rand7(), and you shouldn't call any other API. Please do not use a language's built-in random API.",
        "exampleInputs1": "n = 1",
        "exampleOutputs1": "[2]",
        "exampleInputs2": "n = 2",
        "exampleOutputs2": "[2,8]",
        "exampleInputs3": "n = 3",
        "exampleOutputs3": "[3,8,10]"
    },
    {
        "id": 473,
        "title": "473. Matchsticks to Square",
        "description": "You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.",
        "exampleInputs1": "matchsticks = [1,1,2,2,2]",
        "exampleOutputs1": "true",
        "exampleInputs2": "matchsticks = [3,3,3,3,4]",
        "exampleOutputs2": "false"
    },
    {
        "id": 474,
        "title": "474. Ones and Zeroes",
        "description": "You are given an array of binary strings strs and two integers m and n.",
        "exampleInputs1": "strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3",
        "exampleOutputs1": "4",
        "exampleInputs2": "strs = [\"10\",\"0\",\"1\"], m = 1, n = 1",
        "exampleOutputs2": "2"
    },
    {
        "id": 475,
        "title": "475. Heaters",
        "description": "Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.",
        "exampleInputs1": "houses = [1,2,3], heaters = [2]",
        "exampleOutputs1": "1",
        "exampleInputs2": "houses = [1,2,3,4], heaters = [1,4]",
        "exampleOutputs2": "1",
        "exampleInputs3": "houses = [1,5], heaters = [2]",
        "exampleOutputs3": "3"
    },
    {
        "id": 477,
        "title": "477. Total Hamming Distance",
        "description": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different.",
        "exampleInputs1": "nums = [4,14,2]",
        "exampleOutputs1": "6",
        "exampleInputs2": "nums = [4,14,4]",
        "exampleOutputs2": "4"
    },
    {
        "id": 478,
        "title": "478. Generate Random Point in a Circle",
        "description": "Given the radius and the position of the center of a circle, implement the function randPoint which generates a uniform random point inside the circle.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]"
    },
    {
        "id": 481,
        "title": "481. Magical String",
        "description": "A magical string s consists of only '1' and '2' and obeys the following rules:",
        "exampleInputs1": "n = 6",
        "exampleOutputs1": "3",
        "exampleInputs2": "n = 1",
        "exampleOutputs2": "1"
    },
    {
        "id": 486,
        "title": "486. Predict the Winner",
        "description": "You are given an integer array nums. Two players are playing a game with this array: player 1 and player 2.",
        "exampleInputs1": "nums = [1,5,2]",
        "exampleOutputs1": "false",
        "exampleInputs2": "nums = [1,5,233,7]",
        "exampleOutputs2": "true"
    },
    {
        "id": 491,
        "title": "491. Increasing Subsequences",
        "description": "Given an integer array nums, return all the different possible increasing subsequences of the given array with at least two elements. You may return the answer in any order.",
        "exampleInputs1": "nums = [4,6,7,7]",
        "exampleOutputs1": "[[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]",
        "exampleInputs2": "nums = [4,4,3,2,1]",
        "exampleOutputs2": "[[4,4]]"
    },
    {
        "id": 494,
        "title": "494. Target Sum",
        "description": "You are given an integer array nums and an integer target.",
        "exampleInputs1": "nums = [1,1,1,1,1], target = 3",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [1], target = 1",
        "exampleOutputs2": "1"
    },
    {
        "id": 497,
        "title": "497. Random Point in Non-overlapping Rectangles",
        "description": "You are given an array of non-overlapping axis-aligned rectangles rects where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]"
    },
    {
        "id": 498,
        "title": "498. Diagonal Traverse",
        "description": "Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.",
        "exampleInputs1": "mat = [[1,2,3],[4,5,6],[7,8,9]]",
        "exampleOutputs1": "[1,2,4,7,5,3,6,8,9]",
        "exampleInputs2": "mat = [[1,2],[3,4]]",
        "exampleOutputs2": "[1,2,3,4]"
    },
    {
        "id": 503,
        "title": "503. Next Greater Element II",
        "description": "Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.",
        "exampleInputs1": "nums = [1,2,1]",
        "exampleOutputs1": "[2,-1,2]",
        "exampleInputs2": "nums = [1,2,3,4,3]",
        "exampleOutputs2": "[2,3,4,-1,4]"
    },
    {
        "id": 508,
        "title": "508. Most Frequent Subtree Sum",
        "description": "Given the root of a binary tree, return the most frequent subtree sum. If there is a tie, return all the values with the highest frequency in any order.",
        "exampleInputs1": "root = [5,2,-3]",
        "exampleOutputs1": "[2,-3,4]",
        "exampleInputs2": "root = [5,2,-5]",
        "exampleOutputs2": "[2]"
    },
    {
        "id": 513,
        "title": "513. Find Bottom Left Tree Value",
        "description": "Given the root of a binary tree, return the leftmost value in the last row of the tree.",
        "exampleInputs1": "root = [2,1,3]",
        "exampleOutputs1": "1",
        "exampleInputs2": "root = [1,2,3,4,null,5,6,null,null,7]",
        "exampleOutputs2": "7"
    },
    {
        "id": 515,
        "title": "515. Find Largest Value in Each Tree Row",
        "description": "Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).",
        "exampleInputs1": "root = [1,3,2,5,3,null,9]",
        "exampleOutputs1": "[1,3,9]",
        "exampleInputs2": "root = [1,2,3]",
        "exampleOutputs2": "[1,3]",
        "exampleInputs3": "root = [1]",
        "exampleOutputs3": "[1]",
        "exampleInputs4": "root = [1,null,2]",
        "exampleOutputs4": "[1,2]",
        "exampleInputs5": "root = []",
        "exampleOutputs5": "[]"
    },
    {
        "id": 516,
        "title": "516. Longest Palindromic Subsequence",
        "description": "Given a string s, find the longest palindromic subsequence's length in s.",
        "exampleInputs1": "s = \"bbbab\"",
        "exampleOutputs1": "4",
        "exampleInputs2": "s = \"cbbd\"",
        "exampleOutputs2": "2"
    },
    {
        "id": 518,
        "title": "518. Coin Change 2",
        "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.",
        "exampleInputs1": "amount = 5, coins = [1,2,5]",
        "exampleOutputs1": "4",
        "exampleInputs2": "amount = 3, coins = [2]",
        "exampleOutputs2": "0",
        "exampleInputs3": "amount = 10, coins = [10]",
        "exampleOutputs3": "1"
    },
    {
        "id": 519,
        "title": "519. Random Flip Matrix",
        "description": "There is an m x n binary grid matrix with all the values set 0 initially. Design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. All the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"Solution\", \"flip\", \"flip\", \"flip\", \"reset\", \"flip\"]"
    },
    {
        "id": 522,
        "title": "522. Longest Uncommon Subsequence II",
        "description": "Given an array of strings strs, return the length of the longest uncommon subsequence between them. If the longest uncommon subsequence does not exist, return -1.",
        "exampleInputs1": "strs = [\"aba\",\"cdc\",\"eae\"]",
        "exampleOutputs1": "3",
        "exampleInputs2": "strs = [\"aaa\",\"aaa\",\"aa\"]",
        "exampleOutputs2": "-1"
    },
    {
        "id": 523,
        "title": "523. Continuous Subarray Sum",
        "description": "Given an integer array nums and an integer k, return true if nums has a continuous subarray of size at least two whose elements sum up to a multiple of k, or false otherwise.",
        "exampleInputs1": "nums = [23,2,4,6,7], k = 6",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [23,2,6,4,7], k = 6",
        "exampleOutputs2": "true",
        "exampleInputs3": "nums = [23,2,6,4,7], k = 13",
        "exampleOutputs3": "false"
    },
    {
        "id": 524,
        "title": "524. Longest Word in Dictionary through Deleting",
        "description": "Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.",
        "exampleInputs1": "s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]",
        "exampleOutputs1": "\"apple\"",
        "exampleInputs2": "s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]",
        "exampleOutputs2": "\"a\""
    },
    {
        "id": 525,
        "title": "525. Contiguous Array",
        "description": "Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.",
        "exampleInputs1": "nums = [0,1]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [0,1,0]",
        "exampleOutputs2": "2"
    },
    {
        "id": 526,
        "title": "526. Beautiful Arrangement",
        "description": "Suppose you have n integers labeled 1 through n. A permutation of those n integers perm (1-indexed) is considered a beautiful arrangement if for every i (1 <= i <= n), either of the following is true:",
        "exampleInputs1": "n = 2",
        "exampleOutputs1": "2",
        "exampleInputs2": "n = 1",
        "exampleOutputs2": "1"
    },
    {
        "id": 528,
        "title": "528. Random Pick with Weight",
        "description": "You are given an array of positive integers w where w[i] describes the weight of ith index (0-indexed).",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"Solution\",\"pickIndex\"]",
        "exampleInputs2": "Input",
        "exampleOutputs2": "[\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]"
    },
    {
        "id": 529,
        "title": "529. Minesweeper",
        "description": "Let's play the minesweeper game (Wikipedia, online game)!",
        "exampleInputs1": "board = [[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]], click = [3,0]",
        "exampleOutputs1": "[[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]",
        "exampleInputs2": "board = [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]], click = [1,2]",
        "exampleOutputs2": "[[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"X\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]"
    },
    {
        "id": 532,
        "title": "532. K-diff Pairs in an Array",
        "description": "Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.",
        "exampleInputs1": "nums = [3,1,4,1,5], k = 2",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,2,3,4,5], k = 1",
        "exampleOutputs2": "4",
        "exampleInputs3": "nums = [1,3,1,5,4], k = 0",
        "exampleOutputs3": "1",
        "exampleInputs4": "nums = [1,2,4,4,3,3,0,9,2,3], k = 3",
        "exampleOutputs4": "2",
        "exampleInputs5": "nums = [-1,-2,-3], k = 1",
        "exampleOutputs5": "2"
    },
    {
        "id": 535,
        "title": "535. Encode and Decode TinyURL",
        "description": "TinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk. Design a class to encode a URL and decode a tiny URL.",
        "exampleInputs1": "url = \"https://leetcode.com/problems/design-tinyurl\"",
        "exampleOutputs1": "\"https://leetcode.com/problems/design-tinyurl\""
    },
    {
        "id": 537,
        "title": "537. Complex Number Multiplication",
        "description": "A complex number can be represented as a string on the form \"real+imaginaryi\" where:",
        "exampleInputs1": "num1 = \"1+1i\", num2 = \"1+1i\"",
        "exampleOutputs1": "\"0+2i\"",
        "exampleInputs2": "num1 = \"1+-1i\", num2 = \"1+-1i\"",
        "exampleOutputs2": "\"0+-2i\""
    },
    {
        "id": 538,
        "title": "538. Convert BST to Greater Tree",
        "description": "Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.",
        "exampleInputs1": "root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]",
        "exampleOutputs1": "[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]",
        "exampleInputs2": "root = [0,null,1]",
        "exampleOutputs2": "[1,null,1]",
        "exampleInputs3": "root = [1,0,2]",
        "exampleOutputs3": "[3,3,2]",
        "exampleInputs4": "root = [3,2,4,1]",
        "exampleOutputs4": "[7,9,4,10]"
    },
    {
        "id": 539,
        "title": "539. Minimum Time Difference",
        "description": "",
        "exampleInputs1": "timePoints = [\"23:59\",\"00:00\"]",
        "exampleOutputs1": "1",
        "exampleInputs2": "timePoints = [\"00:00\",\"23:59\",\"00:00\"]",
        "exampleOutputs2": "0"
    },
    {
        "id": 540,
        "title": "540. Single Element in a Sorted Array",
        "description": "You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.",
        "exampleInputs1": "nums = [1,1,2,3,3,4,4,8,8]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [3,3,7,7,10,11,11]",
        "exampleOutputs2": "10"
    },
    {
        "id": 542,
        "title": "542. 01 Matrix",
        "description": "Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.",
        "exampleInputs1": "mat = [[0,0,0],[0,1,0],[0,0,0]]",
        "exampleOutputs1": "[[0,0,0],[0,1,0],[0,0,0]]",
        "exampleInputs2": "mat = [[0,0,0],[0,1,0],[1,1,1]]",
        "exampleOutputs2": "[[0,0,0],[0,1,0],[1,2,1]]"
    },
    {
        "id": 547,
        "title": "547. Number of Provinces",
        "description": "There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.",
        "exampleInputs1": "isConnected = [[1,1,0],[1,1,0],[0,0,1]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "isConnected = [[1,0,0],[0,1,0],[0,0,1]]",
        "exampleOutputs2": "3"
    },
    {
        "id": 553,
        "title": "553. Optimal Division",
        "description": "You are given an integer array nums. The adjacent integers in nums will perform the float division.",
        "exampleInputs1": "nums = [1000,100,10,2]",
        "exampleOutputs1": "\"1000/(100/10/2)\"",
        "exampleInputs2": "nums = [2,3,4]",
        "exampleOutputs2": "\"2/(3/4)\"",
        "exampleInputs3": "nums = [2]",
        "exampleOutputs3": "\"2\""
    },
    {
        "id": 554,
        "title": "554. Brick Wall",
        "description": "There is a rectangular brick wall in front of you with n rows of bricks. The ith row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.",
        "exampleInputs1": "wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "wall = [[1],[1],[1]]",
        "exampleOutputs2": "3"
    },
    {
        "id": 556,
        "title": "556. Next Greater Element III",
        "description": "Given a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive integer exists, return -1.",
        "exampleInputs1": "n = 12",
        "exampleOutputs1": "21",
        "exampleInputs2": "n = 21",
        "exampleOutputs2": "-1"
    },
    {
        "id": 558,
        "title": "558. Logical OR of Two Binary Grids Represented as Quad-Trees",
        "description": "A Binary Matrix is a matrix in which all the elements are either 0 or 1.",
        "exampleInputs1": "class Node {",
        "exampleOutputs1": "public boolean val;",
        "exampleInputs2": "quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]",
        "exampleOutputs2": ", quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]",
        "exampleInputs3": "quadTree1 = [[1,0]]",
        "exampleOutputs3": ", quadTree2 = [[1,0]]",
        "exampleInputs4": "quadTree1 = [[0,0],[1,0],[1,0],[1,1],[1,1]]",
        "exampleOutputs4": ", quadTree2 = [[0,0],[1,1],[1,1],[1,0],[1,1]]",
        "exampleInputs5": "quadTree1 = [[0,0],[1,1],[1,0],[1,1],[1,1]]",
        "exampleOutputs5": ", quadTree2 = [[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]",
        "exampleInputs6": "quadTree1 = [[0,1],[1,0],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]",
        "exampleOutputs6": ", quadTree2 = [[0,1],[0,1],[1,0],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1]]"
    },
    {
        "id": 560,
        "title": "560. Subarray Sum Equals K",
        "description": "Given an array of integers nums and an integer k, return the total number of continuous subarrays whose sum equals to k.",
        "exampleInputs1": "nums = [1,1,1], k = 2",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,2,3], k = 3",
        "exampleOutputs2": "2"
    },
    {
        "id": 565,
        "title": "565. Array Nesting",
        "description": "You are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1].",
        "exampleInputs1": "nums = [5,4,0,3,1,6,2]",
        "exampleOutputs1": "4",
        "exampleInputs2": "nums = [0,1,2]",
        "exampleOutputs2": "1"
    },
    {
        "id": 567,
        "title": "567. Permutation in String",
        "description": "Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.",
        "exampleInputs1": "s1 = \"ab\", s2 = \"eidbaooo\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s1 = \"ab\", s2 = \"eidboaoo\"",
        "exampleOutputs2": "false"
    },
    {
        "id": 576,
        "title": "576. Out of Boundary Paths",
        "description": "There is an m x n grid with a ball. The ball is initially at the position [startRow, startColumn]. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply at most maxMove moves to the ball.",
        "exampleInputs1": "m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0",
        "exampleOutputs1": "6",
        "exampleInputs2": "m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1",
        "exampleOutputs2": "12"
    },
    {
        "id": 581,
        "title": "581. Shortest Unsorted Continuous Subarray",
        "description": "Given an integer array nums, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.",
        "exampleInputs1": "nums = [2,6,4,8,10,9,15]",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [1,2,3,4]",
        "exampleOutputs2": "0",
        "exampleInputs3": "nums = [1]",
        "exampleOutputs3": "0"
    },
    {
        "id": 583,
        "title": "583. Delete Operation for Two Strings",
        "description": "Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.",
        "exampleInputs1": "word1 = \"sea\", word2 = \"eat\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "word1 = \"leetcode\", word2 = \"etco\"",
        "exampleOutputs2": "4"
    },
    {
        "id": 592,
        "title": "592. Fraction Addition and Subtraction",
        "description": "Given a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format.",
        "exampleInputs1": "expression = \"-1/2+1/2\"",
        "exampleOutputs1": "\"0/1\"",
        "exampleInputs2": "expression = \"-1/2+1/2+1/3\"",
        "exampleOutputs2": "\"1/3\"",
        "exampleInputs3": "expression = \"1/3-1/2\"",
        "exampleOutputs3": "\"-1/6\"",
        "exampleInputs4": "expression = \"5/3+1/3\"",
        "exampleOutputs4": "\"2/1\""
    },
    {
        "id": 593,
        "title": "593. Valid Square",
        "description": "Given the coordinates of four points in 2D space p1, p2, p3 and p4, return true if the four points construct a square.",
        "exampleInputs1": "p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]",
        "exampleOutputs1": "true",
        "exampleInputs2": "p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]",
        "exampleOutputs2": "false",
        "exampleInputs3": "p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]",
        "exampleOutputs3": "true"
    },
    {
        "id": 609,
        "title": "609. Find Duplicate File in System",
        "description": "Given a list paths of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. You may return the answer in any order.",
        "exampleInputs1": "paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"]",
        "exampleOutputs1": "[[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]",
        "exampleInputs2": "paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"]",
        "exampleOutputs2": "[[\"root/a/2.txt\",\"root/c/d/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]"
    },
    {
        "id": 611,
        "title": "611. Valid Triangle Number",
        "description": "Given an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.",
        "exampleInputs1": "nums = [2,2,3,4]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [4,2,3,4]",
        "exampleOutputs2": "4"
    },
    {
        "id": 621,
        "title": "621. Task Scheduler",
        "description": "Given a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.",
        "exampleInputs1": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2",
        "exampleOutputs1": "8",
        "exampleInputs2": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0",
        "exampleOutputs2": "6",
        "exampleInputs3": "tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2",
        "exampleOutputs3": "16"
    },
    {
        "id": 622,
        "title": "622. Design Circular Queue",
        "description": "Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called \"Ring Buffer\".",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"MyCircularQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"Rear\", \"isFull\", \"deQueue\", \"enQueue\", \"Rear\"]"
    },
    {
        "id": 623,
        "title": "623. Add One Row to Tree",
        "description": "Given the root of a binary tree and two integers val and depth, add a row of nodes with value val at the given depth depth.",
        "exampleInputs1": "root = [4,2,6,3,1,5], val = 1, depth = 2",
        "exampleOutputs1": "[4,1,1,2,null,null,6,3,1,5]",
        "exampleInputs2": "root = [4,2,null,3,1], val = 1, depth = 3",
        "exampleOutputs2": "[4,2,null,1,1,3,null,null,1]"
    },
    {
        "id": 633,
        "title": "633. Sum of Square Numbers",
        "description": "Given a non-negative integer c, decide whether there're two integers a and b such that a2 + b2 = c.",
        "exampleInputs1": "c = 5",
        "exampleOutputs1": "true",
        "exampleInputs2": "c = 3",
        "exampleOutputs2": "false",
        "exampleInputs3": "c = 4",
        "exampleOutputs3": "true",
        "exampleInputs4": "c = 2",
        "exampleOutputs4": "true",
        "exampleInputs5": "c = 1",
        "exampleOutputs5": "true"
    },
    {
        "id": 636,
        "title": "636. Exclusive Time of Functions",
        "description": "On a single-threaded CPU, we execute a program containing n functions. Each function has a unique ID between 0 and n-1.",
        "exampleInputs1": "n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]",
        "exampleOutputs1": "[3,4]",
        "exampleInputs2": "n = 1, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"0:start:6\",\"0:end:6\",\"0:end:7\"]",
        "exampleOutputs2": "[8]",
        "exampleInputs3": "n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:6\",\"1:end:6\",\"0:end:7\"]",
        "exampleOutputs3": "[7,1]",
        "exampleInputs4": "n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:7\",\"1:end:7\",\"0:end:8\"]",
        "exampleOutputs4": "[8,1]",
        "exampleInputs5": "n = 1, logs = [\"0:start:0\",\"0:end:0\"]",
        "exampleOutputs5": "[1]"
    },
    {
        "id": 638,
        "title": "638. Shopping Offers",
        "description": "In LeetCode Store, there are n items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.",
        "exampleInputs1": "price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]",
        "exampleOutputs1": "14",
        "exampleInputs2": "price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]",
        "exampleOutputs2": "11"
    },
    {
        "id": 640,
        "title": "640. Solve the Equation",
        "description": "Solve a given equation and return the value of 'x' in the form of a string \"x=#value\". The equation contains only '+', '-' operation, the variable 'x' and its coefficient. You should return \"No solution\" if there is no solution for the equation, or \"Infinite solutions\" if there are infinite solutions for the equation.",
        "exampleInputs1": "equation = \"x+5-3+x=6+x-2\"",
        "exampleOutputs1": "\"x=2\"",
        "exampleInputs2": "equation = \"x=x\"",
        "exampleOutputs2": "\"Infinite solutions\"",
        "exampleInputs3": "equation = \"2x=x\"",
        "exampleOutputs3": "\"x=0\"",
        "exampleInputs4": "equation = \"2x+3x-6x=x+2\"",
        "exampleOutputs4": "\"x=-1\"",
        "exampleInputs5": "equation = \"x=x+2\"",
        "exampleOutputs5": "\"No solution\""
    },
    {
        "id": 641,
        "title": "641. Design Circular Deque",
        "description": "Design your implementation of the circular double-ended queue (deque).",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"MyCircularDeque\", \"insertLast\", \"insertLast\", \"insertFront\", \"insertFront\", \"getRear\", \"isFull\", \"deleteLast\", \"insertFront\", \"getFront\"]"
    },
    {
        "id": 646,
        "title": "646. Maximum Length of Pair Chain",
        "description": "You are given an array of n pairs pairs where pairs[i] = [lefti, righti] and lefti < righti.",
        "exampleInputs1": "pairs = [[1,2],[2,3],[3,4]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "pairs = [[1,2],[7,8],[4,5]]",
        "exampleOutputs2": "3"
    },
    {
        "id": 647,
        "title": "647. Palindromic Substrings",
        "description": "Given a string s, return the number of palindromic substrings in it.",
        "exampleInputs1": "s = \"abc\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "s = \"aaa\"",
        "exampleOutputs2": "6"
    },
    {
        "id": 648,
        "title": "648. Replace Words",
        "description": "In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word successor. For example, when the root \"an\" is followed by the successor word \"other\", we can form a new word \"another\".",
        "exampleInputs1": "dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"",
        "exampleOutputs1": "\"the cat was rat by the bat\"",
        "exampleInputs2": "dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\"",
        "exampleOutputs2": "\"a a b c\"",
        "exampleInputs3": "dictionary = [\"a\", \"aa\", \"aaa\", \"aaaa\"], sentence = \"a aa a aaaa aaa aaa aaa aaaaaa bbb baba ababa\"",
        "exampleOutputs3": "\"a a a a a a a a bbb baba a\"",
        "exampleInputs4": "dictionary = [\"catt\",\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"",
        "exampleOutputs4": "\"the cat was rat by the bat\"",
        "exampleInputs5": "dictionary = [\"ac\",\"ab\"], sentence = \"it is abnormal that this solution is accepted\"",
        "exampleOutputs5": "\"it is ab that this solution is ac\""
    },
    {
        "id": 649,
        "title": "649. Dota2 Senate",
        "description": "In the world of Dota2, there are two parties: the Radiant and the Dire.",
        "exampleInputs1": "senate = \"RD\"",
        "exampleOutputs1": "\"Radiant\"",
        "exampleInputs2": "senate = \"RDD\"",
        "exampleOutputs2": "\"Dire\""
    },
    {
        "id": 650,
        "title": "650. 2 Keys Keyboard",
        "description": "There is only one character 'A' on the screen of a notepad. You can perform two operations on this notepad for each step:",
        "exampleInputs1": "n = 3",
        "exampleOutputs1": "3",
        "exampleInputs2": "n = 1",
        "exampleOutputs2": "0"
    },
    {
        "id": 652,
        "title": "652. Find Duplicate Subtrees",
        "description": "Given the root of a binary tree, return all duplicate subtrees.",
        "exampleInputs1": "root = [1,2,3,4,null,2,4,null,null,4]",
        "exampleOutputs1": "[[2,4],[4]]",
        "exampleInputs2": "root = [2,1,1]",
        "exampleOutputs2": "[[1]]",
        "exampleInputs3": "root = [2,2,2,3,null,3,null]",
        "exampleOutputs3": "[[2,3],[3]]"
    },
    {
        "id": 654,
        "title": "654. Maximum Binary Tree",
        "description": "You are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm:",
        "exampleInputs1": "nums = [3,2,1,6,0,5]",
        "exampleOutputs1": "[6,3,5,null,2,0,null,null,1]",
        "exampleInputs2": "nums = [3,2,1]",
        "exampleOutputs2": "[3,null,2,null,1]"
    },
    {
        "id": 655,
        "title": "655. Print Binary Tree",
        "description": "Given the root of a binary tree, construct a 0-indexed m x n string matrix res that represents a formatted layout of the tree. The formatted layout matrix should be constructed using the following rules:",
        "exampleInputs1": "root = [1,2]",
        "exampleOutputs1": "",
        "exampleInputs2": "root = [1,2,3,null,4]",
        "exampleOutputs2": ""
    },
    {
        "id": 658,
        "title": "658. Find K Closest Elements",
        "description": "Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.",
        "exampleInputs1": "arr = [1,2,3,4,5], k = 4, x = 3",
        "exampleOutputs1": "[1,2,3,4]",
        "exampleInputs2": "arr = [1,2,3,4,5], k = 4, x = -1",
        "exampleOutputs2": "[1,2,3,4]"
    },
    {
        "id": 659,
        "title": "659. Split Array into Consecutive Subsequences",
        "description": "You are given an integer array nums that is sorted in non-decreasing order.",
        "exampleInputs1": "nums = [1,2,3,3,4,5]",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [1,2,3,3,4,4,5,5]",
        "exampleOutputs2": "true",
        "exampleInputs3": "nums = [1,2,3,4,4,5]",
        "exampleOutputs3": "false"
    },
    {
        "id": 662,
        "title": "662. Maximum Width of Binary Tree",
        "description": "Given the root of a binary tree, return the maximum width of the given tree.",
        "exampleInputs1": "root = [1,3,2,5,3,null,9]",
        "exampleOutputs1": "4",
        "exampleInputs2": "root = [1,3,null,5,3]",
        "exampleOutputs2": "2",
        "exampleInputs3": "root = [1,3,2,5]",
        "exampleOutputs3": "2",
        "exampleInputs4": "root = [1,3,2,5,null,null,9,6,null,null,7]",
        "exampleOutputs4": "8"
    },
    {
        "id": 665,
        "title": "665. Non-decreasing Array",
        "description": "Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.",
        "exampleInputs1": "nums = [4,2,3]",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [4,2,1]",
        "exampleOutputs2": "false"
    },
    {
        "id": 667,
        "title": "667. Beautiful Arrangement II",
        "description": "Given two integers n and k, construct a list answer that contains n different positive integers ranging from 1 to n and obeys the following requirement:",
        "exampleInputs1": "n = 3, k = 1",
        "exampleOutputs1": "[1,2,3]",
        "exampleInputs2": "n = 3, k = 2",
        "exampleOutputs2": "[1,3,2]"
    },
    {
        "id": 669,
        "title": "669. Trim a Binary Search Tree",
        "description": "Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.",
        "exampleInputs1": "root = [1,0,2], low = 1, high = 2",
        "exampleOutputs1": "[1,null,2]",
        "exampleInputs2": "root = [3,0,4,null,2,null,null,1], low = 1, high = 3",
        "exampleOutputs2": "[3,2,null,1]",
        "exampleInputs3": "root = [1], low = 1, high = 2",
        "exampleOutputs3": "[1]",
        "exampleInputs4": "root = [1,null,2], low = 1, high = 3",
        "exampleOutputs4": "[1,null,2]",
        "exampleInputs5": "root = [1,null,2], low = 2, high = 4",
        "exampleOutputs5": "[2]"
    },
    {
        "id": 670,
        "title": "670. Maximum Swap",
        "description": "You are given an integer num. You can swap two digits at most once to get the maximum valued number.",
        "exampleInputs1": "num = 2736",
        "exampleOutputs1": "7236",
        "exampleInputs2": "num = 9973",
        "exampleOutputs2": "9973"
    },
    {
        "id": 672,
        "title": "672. Bulb Switcher II",
        "description": "There is a room with n bulbs labeled from 1 to n that all are turned on initially, and four buttons on the wall. Each of the four buttons has a different functionality where:",
        "exampleInputs1": "n = 1, presses = 1",
        "exampleOutputs1": "2",
        "exampleInputs2": "n = 2, presses = 1",
        "exampleOutputs2": "3",
        "exampleInputs3": "n = 3, presses = 1",
        "exampleOutputs3": "4"
    },
    {
        "id": 673,
        "title": "673. Number of Longest Increasing Subsequence",
        "description": "Given an integer array nums, return the number of longest increasing subsequences.",
        "exampleInputs1": "nums = [1,3,5,4,7]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [2,2,2,2,2]",
        "exampleOutputs2": "5"
    },
    {
        "id": 676,
        "title": "676. Implement Magic Dictionary",
        "description": "Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"]"
    },
    {
        "id": 677,
        "title": "677. Map Sum Pairs",
        "description": "Design a map that allows you to do the following:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]"
    },
    {
        "id": 678,
        "title": "678. Valid Parenthesis String",
        "description": "Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.",
        "exampleInputs1": "s = \"()\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"(*)\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "s = \"(*))\"",
        "exampleOutputs3": "true"
    },
    {
        "id": 684,
        "title": "684. Redundant Connection",
        "description": "In this problem, a tree is an undirected graph that is connected and has no cycles.",
        "exampleInputs1": "edges = [[1,2],[1,3],[2,3]]",
        "exampleOutputs1": "[2,3]",
        "exampleInputs2": "edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]",
        "exampleOutputs2": "[1,4]"
    },
    {
        "id": 686,
        "title": "686. Repeated String Match",
        "description": "Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b​​​​​​ to be a substring of a after repeating it, return -1.",
        "exampleInputs1": "a = \"abcd\", b = \"cdabcdab\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "a = \"a\", b = \"aa\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "a = \"a\", b = \"a\"",
        "exampleOutputs3": "1",
        "exampleInputs4": "a = \"abc\", b = \"wxyz\"",
        "exampleOutputs4": "-1"
    },
    {
        "id": 687,
        "title": "687. Longest Univalue Path",
        "description": "Given the root of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.",
        "exampleInputs1": "root = [5,4,5,1,1,5]",
        "exampleOutputs1": "2",
        "exampleInputs2": "root = [1,4,5,4,4,5]",
        "exampleOutputs2": "2"
    },
    {
        "id": 688,
        "title": "688. Knight Probability in Chessboard",
        "description": "On an n x n chessboard, a knight starts at the cell (row, column) and attempts to make exactly k moves. The rows and columns are 0-indexed, so the top-left cell is (0, 0), and the bottom-right cell is (n - 1, n - 1).",
        "exampleInputs1": "n = 3, k = 2, row = 0, column = 0",
        "exampleOutputs1": "0.06250",
        "exampleInputs2": "n = 1, k = 0, row = 0, column = 0",
        "exampleOutputs2": "1.00000"
    },
    {
        "id": 692,
        "title": "692. Top K Frequent Words",
        "description": "Given an array of strings words and an integer k, return the k most frequent strings.",
        "exampleInputs1": "words = [\"i\",\"love\",\"leetcode\",\"i\",\"love\",\"coding\"], k = 2",
        "exampleOutputs1": "[\"i\",\"love\"]",
        "exampleInputs2": "words = [\"the\",\"day\",\"is\",\"sunny\",\"the\",\"the\",\"the\",\"sunny\",\"is\",\"is\"], k = 4",
        "exampleOutputs2": "[\"the\",\"is\",\"sunny\",\"day\"]"
    },
    {
        "id": 695,
        "title": "695. Max Area of Island",
        "description": "You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.",
        "exampleInputs1": "grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]",
        "exampleOutputs1": "6",
        "exampleInputs2": "grid = [[0,0,0,0,0,0,0,0]]",
        "exampleOutputs2": "0"
    },
    {
        "id": 698,
        "title": "698. Partition to K Equal Sum Subsets",
        "description": "Given an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.",
        "exampleInputs1": "nums = [4,3,2,3,5,2,1], k = 4",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [1,2,3,4], k = 3",
        "exampleOutputs2": "false"
    },
    {
        "id": 701,
        "title": "701. Insert into a Binary Search Tree",
        "description": "You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.",
        "exampleInputs1": "root = [4,2,7,1,3], val = 5",
        "exampleOutputs1": "[4,2,7,1,3,5]",
        "exampleInputs2": "root = [40,20,60,10,30,50,70], val = 25",
        "exampleOutputs2": "[40,20,60,10,30,50,70,null,null,25]",
        "exampleInputs3": "root = [4,2,7,1,3,null,null,null,null,null,null], val = 5",
        "exampleOutputs3": "[4,2,7,1,3,5]"
    },
    {
        "id": 707,
        "title": "707. Design Linked List",
        "description": "Design your implementation of the linked list. You can choose to use a singly or doubly linked list.\nA node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node.\nIf you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"MyLinkedList\", \"addAtHead\", \"addAtTail\", \"addAtIndex\", \"get\", \"deleteAtIndex\", \"get\"]"
    },
    {
        "id": 712,
        "title": "712. Minimum ASCII Delete Sum for Two Strings",
        "description": "Given two strings s1 and s2, return the lowest ASCII sum of deleted characters to make two strings equal.",
        "exampleInputs1": "s1 = \"sea\", s2 = \"eat\"",
        "exampleOutputs1": "231",
        "exampleInputs2": "s1 = \"delete\", s2 = \"leet\"",
        "exampleOutputs2": "403"
    },
    {
        "id": 713,
        "title": "713. Subarray Product Less Than K",
        "description": "Given an array of integers nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k.",
        "exampleInputs1": "nums = [10,5,2,6], k = 100",
        "exampleOutputs1": "8",
        "exampleInputs2": "nums = [1,2,3], k = 0",
        "exampleOutputs2": "0"
    },
    {
        "id": 714,
        "title": "714. Best Time to Buy and Sell Stock with Transaction Fee",
        "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.",
        "exampleInputs1": "prices = [1,3,2,8,4,9], fee = 2",
        "exampleOutputs1": "8",
        "exampleInputs2": "prices = [1,3,7,5,10,3], fee = 3",
        "exampleOutputs2": "6"
    },
    {
        "id": 718,
        "title": "718. Maximum Length of Repeated Subarray",
        "description": "Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.",
        "exampleInputs1": "nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]",
        "exampleOutputs2": "5"
    },
    {
        "id": 720,
        "title": "720. Longest Word in Dictionary",
        "description": "Given an array of strings words representing an English Dictionary, return the longest word in words that can be built one character at a time by other words in words.",
        "exampleInputs1": "words = [\"w\",\"wo\",\"wor\",\"worl\",\"world\"]",
        "exampleOutputs1": "\"world\"",
        "exampleInputs2": "words = [\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"]",
        "exampleOutputs2": "\"apple\""
    },
    {
        "id": 721,
        "title": "721. Accounts Merge",
        "description": "Given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.",
        "exampleInputs1": "accounts = [[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]",
        "exampleOutputs1": "[[\"John\",\"john00@mail.com\",\"john_newyork@mail.com\",\"johnsmith@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]",
        "exampleInputs2": "accounts = [[\"Gabe\",\"Gabe0@m.co\",\"Gabe3@m.co\",\"Gabe1@m.co\"],[\"Kevin\",\"Kevin3@m.co\",\"Kevin5@m.co\",\"Kevin0@m.co\"],[\"Ethan\",\"Ethan5@m.co\",\"Ethan4@m.co\",\"Ethan0@m.co\"],[\"Hanzo\",\"Hanzo3@m.co\",\"Hanzo1@m.co\",\"Hanzo0@m.co\"],[\"Fern\",\"Fern5@m.co\",\"Fern1@m.co\",\"Fern0@m.co\"]]",
        "exampleOutputs2": "[[\"Ethan\",\"Ethan0@m.co\",\"Ethan4@m.co\",\"Ethan5@m.co\"],[\"Gabe\",\"Gabe0@m.co\",\"Gabe1@m.co\",\"Gabe3@m.co\"],[\"Hanzo\",\"Hanzo0@m.co\",\"Hanzo1@m.co\",\"Hanzo3@m.co\"],[\"Kevin\",\"Kevin0@m.co\",\"Kevin3@m.co\",\"Kevin5@m.co\"],[\"Fern\",\"Fern0@m.co\",\"Fern1@m.co\",\"Fern5@m.co\"]]"
    },
    {
        "id": 722,
        "title": "722. Remove Comments",
        "description": "Given a C++ program, remove comments from it. The program source is an array of strings source where source[i] is the ith line of the source code. This represents the result of splitting the original source code string by the newline character '\\n'.",
        "exampleInputs1": "source = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]",
        "exampleOutputs1": "[\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]",
        "exampleInputs2": "source = [\"a/*comment\", \"line\", \"more_comment*/b\"]",
        "exampleOutputs2": "[\"ab\"]"
    },
    {
        "id": 725,
        "title": "725. Split Linked List in Parts",
        "description": "Given the head of a singly linked list and an integer k, split the linked list into k consecutive linked list parts.",
        "exampleInputs1": "head = [1,2,3], k = 5",
        "exampleOutputs1": "[[1],[2],[3],[],[]]",
        "exampleInputs2": "head = [1,2,3,4,5,6,7,8,9,10], k = 3",
        "exampleOutputs2": "[[1,2,3,4],[5,6,7],[8,9,10]]"
    },
    {
        "id": 729,
        "title": "729. My Calendar I",
        "description": "You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"MyCalendar\", \"book\", \"book\", \"book\"]"
    },
    {
        "id": 731,
        "title": "731. My Calendar II",
        "description": "You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a triple booking.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"MyCalendarTwo\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]"
    },
    {
        "id": 735,
        "title": "735. Asteroid Collision",
        "description": "We are given an array asteroids of integers representing asteroids in a row.",
        "exampleInputs1": "asteroids = [5,10,-5]",
        "exampleOutputs1": "[5,10]",
        "exampleInputs2": "asteroids = [8,-8]",
        "exampleOutputs2": "[]",
        "exampleInputs3": "asteroids = [10,2,-5]",
        "exampleOutputs3": "[10]",
        "exampleInputs4": "asteroids = [-2,-1,1,2]",
        "exampleOutputs4": "[-2,-1,1,2]"
    },
    {
        "id": 738,
        "title": "738. Monotone Increasing Digits",
        "description": "An integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x <= y.",
        "exampleInputs1": "n = 10",
        "exampleOutputs1": "9",
        "exampleInputs2": "n = 1234",
        "exampleOutputs2": "1234",
        "exampleInputs3": "n = 332",
        "exampleOutputs3": "299"
    },
    {
        "id": 739,
        "title": "739. Daily Temperatures",
        "description": "Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.",
        "exampleInputs1": "temperatures = [73,74,75,71,69,72,76,73]",
        "exampleOutputs1": "[1,1,4,2,1,1,0,0]",
        "exampleInputs2": "temperatures = [30,40,50,60]",
        "exampleOutputs2": "[1,1,1,0]",
        "exampleInputs3": "temperatures = [30,60,90]",
        "exampleOutputs3": "[1,1,0]"
    },
    {
        "id": 740,
        "title": "740. Delete and Earn",
        "description": "You are given an integer array nums. You want to maximize the number of points you get by performing the following operation any number of times:",
        "exampleInputs1": "nums = [3,4,2]",
        "exampleOutputs1": "6",
        "exampleInputs2": "nums = [2,2,3,3,3,4]",
        "exampleOutputs2": "9"
    },
    {
        "id": 743,
        "title": "743. Network Delay Time",
        "description": "You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.",
        "exampleInputs1": "times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2",
        "exampleOutputs1": "2",
        "exampleInputs2": "times = [[1,2,1]], n = 2, k = 1",
        "exampleOutputs2": "1",
        "exampleInputs3": "times = [[1,2,1]], n = 2, k = 2",
        "exampleOutputs3": "-1"
    },
    {
        "id": 752,
        "title": "752. Open the Lock",
        "description": "You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. The wheels can rotate freely and wrap around: for example we can turn '9' to be '0', or '0' to be '9'. Each move consists of turning one wheel one slot.",
        "exampleInputs1": "deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"",
        "exampleOutputs1": "6",
        "exampleInputs2": "deadends = [\"8888\"], target = \"0009\"",
        "exampleOutputs2": "1",
        "exampleInputs3": "deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"",
        "exampleOutputs3": "-1",
        "exampleInputs4": "deadends = [\"0000\"], target = \"8888\"",
        "exampleOutputs4": "-1"
    },
    {
        "id": 754,
        "title": "754. Reach a Number",
        "description": "You are standing at position 0 on an infinite number line. There is a destination at position target.",
        "exampleInputs1": "target = 2",
        "exampleOutputs1": "3",
        "exampleInputs2": "target = 3",
        "exampleOutputs2": "2"
    },
    {
        "id": 756,
        "title": "756. Pyramid Transition Matrix",
        "description": "We are stacking blocks to form a pyramid. Each block has a color which is a one-letter string.",
        "exampleInputs1": "bottom = \"BCD\", allowed = [\"BCC\",\"CDE\",\"CEA\",\"FFF\"]",
        "exampleOutputs1": "true",
        "exampleInputs2": "bottom = \"AAAA\", allowed = [\"AAB\",\"AAC\",\"BCD\",\"BBE\",\"DEF\"]",
        "exampleOutputs2": "false"
    },
    {
        "id": 763,
        "title": "763. Partition Labels",
        "description": "You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part.",
        "exampleInputs1": "s = \"ababcbacadefegdehijhklij\"",
        "exampleOutputs1": "[9,7,8]",
        "exampleInputs2": "s = \"eccbbbbdec\"",
        "exampleOutputs2": "[10]"
    },
    {
        "id": 764,
        "title": "764. Largest Plus Sign",
        "description": "You are given an integer n. You have an n x n binary grid grid with all values initially 1's except for some indices given in the array mines. The ith element of the array mines is defined as mines[i] = [xi, yi] where grid[xi][yi] == 0.",
        "exampleInputs1": "n = 5, mines = [[4,2]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "n = 1, mines = [[0,0]]",
        "exampleOutputs2": "0"
    },
    {
        "id": 767,
        "title": "767. Reorganize String",
        "description": "Given a string s, rearrange the characters of s so that any two adjacent characters are not the same.",
        "exampleInputs1": "s = \"aab\"",
        "exampleOutputs1": "\"aba\"",
        "exampleInputs2": "s = \"aaab\"",
        "exampleOutputs2": "\"\""
    },
    {
        "id": 769,
        "title": "769. Max Chunks To Make Sorted",
        "description": "You are given an integer array arr of length n that represents a permutation of the integers in the range [0, n - 1].",
        "exampleInputs1": "arr = [4,3,2,1,0]",
        "exampleOutputs1": "1",
        "exampleInputs2": "arr = [1,0,2,3,4]",
        "exampleOutputs2": "4"
    },
    {
        "id": 775,
        "title": "775. Global and Local Inversions",
        "description": "You are given an integer array nums of length n which represents a permutation of all the integers in the range [0, n - 1].",
        "exampleInputs1": "nums = [1,0,2]",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [1,2,0]",
        "exampleOutputs2": "false"
    },
    {
        "id": 777,
        "title": "777. Swap Adjacent in LR String",
        "description": "In a string composed of 'L', 'R', and 'X' characters, like \"RXXLRXRXL\", a move consists of either replacing one occurrence of \"XL\" with \"LX\", or replacing one occurrence of \"RX\" with \"XR\". Given the starting string start and the ending string end, return True if and only if there exists a sequence of moves to transform one string to the other.",
        "exampleInputs1": "start = \"RXXLRXRXL\", end = \"XRLXXRRLX\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "start = \"X\", end = \"L\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "start = \"LLR\", end = \"RRL\"",
        "exampleOutputs3": "false",
        "exampleInputs4": "start = \"XL\", end = \"LX\"",
        "exampleOutputs4": "true",
        "exampleInputs5": "start = \"XLLR\", end = \"LXLX\"",
        "exampleOutputs5": "false"
    },
    {
        "id": 779,
        "title": "779. K-th Symbol in Grammar",
        "description": "We build a table of n rows (1-indexed). We start by writing 0 in the 1st row. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10.",
        "exampleInputs1": "n = 1, k = 1",
        "exampleOutputs1": "0",
        "exampleInputs2": "n = 2, k = 1",
        "exampleOutputs2": "0",
        "exampleInputs3": "n = 2, k = 2",
        "exampleOutputs3": "1",
        "exampleInputs4": "n = 3, k = 1",
        "exampleOutputs4": "0"
    },
    {
        "id": 781,
        "title": "781. Rabbits in Forest",
        "description": "There is a forest with an unknown number of rabbits. We asked n rabbits \"How many rabbits have the same color as you?\" and collected the answers in an integer array answers where answers[i] is the answer of the ith rabbit.",
        "exampleInputs1": "answers = [1,1,2]",
        "exampleOutputs1": "5",
        "exampleInputs2": "answers = [10,10,10]",
        "exampleOutputs2": "11"
    },
    {
        "id": 784,
        "title": "784. Letter Case Permutation",
        "description": "Given a string s, we can transform every letter individually to be lowercase or uppercase to create another string.",
        "exampleInputs1": "s = \"a1b2\"",
        "exampleOutputs1": "[\"a1b2\",\"a1B2\",\"A1b2\",\"A1B2\"]",
        "exampleInputs2": "s = \"3z4\"",
        "exampleOutputs2": "[\"3z4\",\"3Z4\"]",
        "exampleInputs3": "s = \"12345\"",
        "exampleOutputs3": "[\"12345\"]",
        "exampleInputs4": "s = \"0\"",
        "exampleOutputs4": "[\"0\"]"
    },
    {
        "id": 785,
        "title": "785. Is Graph Bipartite?",
        "description": "There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:",
        "exampleInputs1": "graph = [[1,2,3],[0,2],[0,1,3],[0,2]]",
        "exampleOutputs1": "false",
        "exampleInputs2": "graph = [[1,3],[0,2],[1,3],[0,2]]",
        "exampleOutputs2": "true"
    },
    {
        "id": 787,
        "title": "787. Cheapest Flights Within K Stops",
        "description": "There are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.",
        "exampleInputs1": "n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1",
        "exampleOutputs1": "200",
        "exampleInputs2": "n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0",
        "exampleOutputs2": "500"
    },
    {
        "id": 788,
        "title": "788. Rotated Digits",
        "description": "An integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. Each digit must be rotated - we cannot choose to leave it alone.",
        "exampleInputs1": "n = 10",
        "exampleOutputs1": "4",
        "exampleInputs2": "n = 1",
        "exampleOutputs2": "0",
        "exampleInputs3": "n = 2",
        "exampleOutputs3": "1"
    },
    {
        "id": 789,
        "title": "789. Escape The Ghosts",
        "description": "You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point [0, 0], and you are given a destination point target = [xtarget, ytarget], which you are trying to get to. There are several ghosts on the map with their starting positions given as an array ghosts, where ghosts[i] = [xi, yi] represents the starting position of the ith ghost. All inputs are integral coordinates.",
        "exampleInputs1": "ghosts = [[1,0],[0,3]], target = [0,1]",
        "exampleOutputs1": "true",
        "exampleInputs2": "ghosts = [[1,0]], target = [2,0]",
        "exampleOutputs2": "false",
        "exampleInputs3": "ghosts = [[2,0]], target = [1,0]",
        "exampleOutputs3": "false",
        "exampleInputs4": "ghosts = [[5,0],[-10,-2],[0,-5],[-2,-2],[-7,1]], target = [7,7]",
        "exampleOutputs4": "false",
        "exampleInputs5": "ghosts = [[-1,0],[0,1],[-1,0],[0,1],[-1,0]], target = [0,0]",
        "exampleOutputs5": "true"
    },
    {
        "id": 790,
        "title": "790. Domino and Tromino Tiling",
        "description": "You have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes.",
        "exampleInputs1": "n = 3",
        "exampleOutputs1": "5",
        "exampleInputs2": "n = 1",
        "exampleOutputs2": "1"
    },
    {
        "id": 791,
        "title": "791. Custom Sort String",
        "description": "You are given two strings order and s. All the words of order are unique and were sorted in some custom order previously.",
        "exampleInputs1": "order = \"cba\", s = \"abcd\"",
        "exampleOutputs1": "\"cbad\"",
        "exampleInputs2": "order = \"cbafg\", s = \"abcd\"",
        "exampleOutputs2": "\"cbad\""
    },
    {
        "id": 792,
        "title": "792. Number of Matching Subsequences",
        "description": "Given a string s and an array of strings words, return the number of words[i] that is a subsequence of s.",
        "exampleInputs1": "s = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"]",
        "exampleOutputs1": "3",
        "exampleInputs2": "s = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"ahbwzgqnuk\",\"tnmlanowax\"]",
        "exampleOutputs2": "2"
    },
    {
        "id": 794,
        "title": "794. Valid Tic-Tac-Toe State",
        "description": "Given a Tic-Tac-Toe board as a string array board, return true if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.",
        "exampleInputs1": "board = [\"O  \",\"   \",\"   \"]",
        "exampleOutputs1": "false",
        "exampleInputs2": "board = [\"XOX\",\" X \",\"   \"]",
        "exampleOutputs2": "false",
        "exampleInputs3": "board = [\"XXX\",\"   \",\"OOO\"]",
        "exampleOutputs3": "false",
        "exampleInputs4": "board = [\"XOX\",\"O O\",\"XOX\"]",
        "exampleOutputs4": "true"
    },
    {
        "id": 795,
        "title": "795. Number of Subarrays with Bounded Maximum",
        "description": "Given an integer array nums and two integers left and right, return the number of contiguous non-empty subarrays such that the value of the maximum array element in that subarray is in the range [left, right].",
        "exampleInputs1": "nums = [2,1,4,3], left = 2, right = 3",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [2,9,2,5,6], left = 2, right = 8",
        "exampleOutputs2": "7"
    },
    {
        "id": 797,
        "title": "797. All Paths From Source to Target",
        "description": "Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.",
        "exampleInputs1": "graph = [[1,2],[3],[3],[]]",
        "exampleOutputs1": "[[0,1,3],[0,2,3]]",
        "exampleInputs2": "graph = [[4,3,1],[3,2,4],[3],[4],[]]",
        "exampleOutputs2": "[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]",
        "exampleInputs3": "graph = [[1],[]]",
        "exampleOutputs3": "[[0,1]]",
        "exampleInputs4": "graph = [[1,2,3],[2],[3],[]]",
        "exampleOutputs4": "[[0,1,2,3],[0,2,3],[0,3]]",
        "exampleInputs5": "graph = [[1,3],[2],[3],[]]",
        "exampleOutputs5": "[[0,1,2,3],[0,3]]"
    },
    {
        "id": 799,
        "title": "799. Champagne Tower",
        "description": "We stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row.  Each glass holds one cup of champagne.",
        "exampleInputs1": "poured = 1, query_row = 1, query_glass = 1",
        "exampleOutputs1": "0.00000",
        "exampleInputs2": "poured = 2, query_row = 1, query_glass = 1",
        "exampleOutputs2": "0.50000",
        "exampleInputs3": "poured = 100000009, query_row = 33, query_glass = 17",
        "exampleOutputs3": "1.00000"
    },
    {
        "id": 802,
        "title": "802. Find Eventual Safe States",
        "description": "We start at some node in a directed graph, and every turn, we walk along a directed edge of the graph. If we reach a terminal node (that is, it has no outgoing directed edges), we stop.",
        "exampleInputs1": "graph = [[1,2],[2,3],[5],[0],[5],[],[]]",
        "exampleOutputs1": "[2,4,5,6]",
        "exampleInputs2": "graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]",
        "exampleOutputs2": "[4]"
    },
    {
        "id": 807,
        "title": "807. Max Increase to Keep City Skyline",
        "description": "There is a city composed of n x n blocks, where each block contains a single building shaped like a vertical square prism. You are given a 0-indexed n x n integer matrix grid where grid[r][c] represents the height of the building located in the block at row r and column c.",
        "exampleInputs1": "grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]",
        "exampleOutputs1": "35",
        "exampleInputs2": "grid = [[0,0,0],[0,0,0],[0,0,0]]",
        "exampleOutputs2": "0"
    },
    {
        "id": 808,
        "title": "808. Soup Servings",
        "description": "There are two types of soup: type A and type B. Initially, we have n ml of each type of soup. There are four kinds of operations:",
        "exampleInputs1": "n = 50",
        "exampleOutputs1": "0.62500",
        "exampleInputs2": "n = 100",
        "exampleOutputs2": "0.71875"
    },
    {
        "id": 809,
        "title": "809. Expressive Words",
        "description": "Sometimes people repeat letters to represent extra feeling. For example:",
        "exampleInputs1": "s = \"heeellooo\", words = [\"hello\", \"hi\", \"helo\"]",
        "exampleOutputs1": "1",
        "exampleInputs2": "s = \"zzzzzyyyyy\", words = [\"zzyy\",\"zy\",\"zyy\"]",
        "exampleOutputs2": "3"
    },
    {
        "id": 811,
        "title": "811. Subdomain Visit Count",
        "description": "A website domain \"discuss.leetcode.com\" consists of various subdomains. At the top level, we have \"com\", at the next level, we have \"leetcode.com\" and at the lowest level, \"discuss.leetcode.com\". When we visit a domain like \"discuss.leetcode.com\", we will also visit the parent domains \"leetcode.com\" and \"com\" implicitly.",
        "exampleInputs1": "cpdomains = [\"9001 discuss.leetcode.com\"]",
        "exampleOutputs1": "[\"9001 leetcode.com\",\"9001 discuss.leetcode.com\",\"9001 com\"]",
        "exampleInputs2": "cpdomains = [\"900 google.mail.com\", \"50 yahoo.com\", \"1 intel.mail.com\", \"5 wiki.org\"]",
        "exampleOutputs2": "[\"901 mail.com\",\"50 yahoo.com\",\"900 google.mail.com\",\"5 wiki.org\",\"5 org\",\"1 intel.mail.com\",\"951 com\"]"
    },
    {
        "id": 813,
        "title": "813. Largest Sum of Averages",
        "description": "You are given an integer array nums and an integer k. You can partition the array into at most k non-empty adjacent subarrays. The score of a partition is the sum of the averages of each subarray.",
        "exampleInputs1": "nums = [9,1,2,3,9], k = 3",
        "exampleOutputs1": "20.00000",
        "exampleInputs2": "nums = [1,2,3,4,5,6,7], k = 4",
        "exampleOutputs2": "20.50000"
    },
    {
        "id": 814,
        "title": "814. Binary Tree Pruning",
        "description": "Given the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed.",
        "exampleInputs1": "root = [1,null,0,0,1]",
        "exampleOutputs1": "[1,null,0,null,1]",
        "exampleInputs2": "root = [1,0,1,0,0,0,1]",
        "exampleOutputs2": "[1,null,1,null,1]",
        "exampleInputs3": "root = [1,1,0,1,1,0,1,0]",
        "exampleOutputs3": "[1,1,0,1,1,null,1]"
    },
    {
        "id": 816,
        "title": "816. Ambiguous Coordinates",
        "description": "We had some 2-dimensional coordinates, like \"(1, 3)\" or \"(2, 0.5)\". Then, we removed all commas, decimal points, and spaces and ended up with the string s.",
        "exampleInputs1": "s = \"(123)\"",
        "exampleOutputs1": "[\"(1, 2.3)\",\"(1, 23)\",\"(1.2, 3)\",\"(12, 3)\"]",
        "exampleInputs2": "s = \"(0123)\"",
        "exampleOutputs2": "[\"(0, 1.23)\",\"(0, 12.3)\",\"(0, 123)\",\"(0.1, 2.3)\",\"(0.1, 23)\",\"(0.12, 3)\"]",
        "exampleInputs3": "s = \"(00011)\"",
        "exampleOutputs3": "[\"(0, 0.011)\",\"(0.001, 1)\"]",
        "exampleInputs4": "s = \"(100)\"",
        "exampleOutputs4": "[\"(10, 0)\"]"
    },
    {
        "id": 817,
        "title": "817. Linked List Components",
        "description": "You are given the head of a linked list containing unique integer values and an integer array nums that is a subset of the linked list values.",
        "exampleInputs1": "head = [0,1,2,3], nums = [0,1,3]",
        "exampleOutputs1": "2",
        "exampleInputs2": "head = [0,1,2,3,4], nums = [0,3,1,4]",
        "exampleOutputs2": "2"
    },
    {
        "id": 820,
        "title": "820. Short Encoding of Words",
        "description": "A valid encoding of an array of words is any reference string s and array of indices indices such that:",
        "exampleInputs1": "words = [\"time\", \"me\", \"bell\"]",
        "exampleOutputs1": "10",
        "exampleInputs2": "words = [\"t\"]",
        "exampleOutputs2": "2"
    },
    {
        "id": 822,
        "title": "822. Card Flipping Game",
        "description": "You are given n cards, with a positive integer printed on the front and back of each card (possibly different). You can flip any number of cards (possibly zero).",
        "exampleInputs1": "fronts = [1,2,4,4,7], backs = [1,3,4,1,3]",
        "exampleOutputs1": "2",
        "exampleInputs2": "fronts = [1], backs = [1]",
        "exampleOutputs2": "0"
    },
    {
        "id": 823,
        "title": "823. Binary Trees With Factors",
        "description": "Given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1.",
        "exampleInputs1": "arr = [2,4]",
        "exampleOutputs1": "3",
        "exampleInputs2": "arr = [2,4,5,10]",
        "exampleOutputs2": "7"
    },
    {
        "id": 825,
        "title": "825. Friends Of Appropriate Ages",
        "description": "There are n persons on a social media website. You are given an integer array ages where ages[i] is the age of the ith person.",
        "exampleInputs1": "ages = [16,16]",
        "exampleOutputs1": "2",
        "exampleInputs2": "ages = [16,17,18]",
        "exampleOutputs2": "2",
        "exampleInputs3": "ages = [20,30,100,110,120]",
        "exampleOutputs3": "3"
    },
    {
        "id": 826,
        "title": "826. Most Profit Assigning Work",
        "description": "You have n jobs and m workers. You are given three arrays: difficulty, profit, and worker where:",
        "exampleInputs1": "difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]",
        "exampleOutputs1": "100",
        "exampleInputs2": "difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25]",
        "exampleOutputs2": "0"
    },
    {
        "id": 831,
        "title": "831. Masking Personal Information",
        "description": "You are given a personal information string s, representing either an email address or a phone number. Return the masked personal information using the below rules.",
        "exampleInputs1": "s = \"LeetCode@LeetCode.com\"",
        "exampleOutputs1": "\"l*****e@leetcode.com\"",
        "exampleInputs2": "s = \"AB@qq.com\"",
        "exampleOutputs2": "\"a*****b@qq.com\"",
        "exampleInputs3": "s = \"1(234)567-890\"",
        "exampleOutputs3": "\"***-***-7890\"",
        "exampleInputs4": "s = \"86-(10)12345678\"",
        "exampleOutputs4": "\"+**-***-***-5678\""
    },
    {
        "id": 833,
        "title": "833. Find And Replace in String",
        "description": "You are given a 0-indexed string s that you must perform k replacement operations on. The replacement operations are given as three 0-indexed parallel arrays, indices, sources, and targets, all of length k.",
        "exampleInputs1": "s = \"abcd\", indices = [0, 2], sources = [\"a\", \"cd\"], targets = [\"eee\", \"ffff\"]",
        "exampleOutputs1": "\"eeebffff\"",
        "exampleInputs2": "s = \"abcd\", indices = [0, 2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]",
        "exampleOutputs2": "\"eeecd\""
    },
    {
        "id": 835,
        "title": "835. Image Overlap",
        "description": "You are given two images, img1 and img2, represented as binary, square matrices of size n x n. A binary matrix has only 0s and 1s as values.",
        "exampleInputs1": "img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "img1 = [[1]], img2 = [[1]]",
        "exampleOutputs2": "1",
        "exampleInputs3": "img1 = [[0]], img2 = [[0]]",
        "exampleOutputs3": "0"
    },
    {
        "id": 837,
        "title": "837. New 21 Game",
        "description": "Alice plays the following game, loosely based on the card game \"21\".",
        "exampleInputs1": "n = 10, k = 1, maxPts = 10",
        "exampleOutputs1": "1.00000",
        "exampleInputs2": "n = 6, k = 1, maxPts = 10",
        "exampleOutputs2": "0.60000",
        "exampleInputs3": "n = 21, k = 17, maxPts = 10",
        "exampleOutputs3": "0.73278"
    },
    {
        "id": 838,
        "title": "838. Push Dominoes",
        "description": "There are n dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right.",
        "exampleInputs1": "dominoes = \"RR.L\"",
        "exampleOutputs1": "\"RR.L\"",
        "exampleInputs2": "dominoes = \".L.R...LR..L..\"",
        "exampleOutputs2": "\"LL.RR.LLRRLL..\""
    },
    {
        "id": 840,
        "title": "840. Magic Squares In Grid",
        "description": "A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.",
        "exampleInputs1": "grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]",
        "exampleOutputs1": "1",
        "exampleInputs2": "grid = [[8]]",
        "exampleOutputs2": "0",
        "exampleInputs3": "grid = [[4,4],[3,3]]",
        "exampleOutputs3": "0",
        "exampleInputs4": "grid = [[4,7,8],[9,5,1],[2,3,6]]",
        "exampleOutputs4": "0"
    },
    {
        "id": 841,
        "title": "841. Keys and Rooms",
        "description": "There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.",
        "exampleInputs1": "rooms = [[1],[2],[3],[]]",
        "exampleOutputs1": "true",
        "exampleInputs2": "rooms = [[1,3],[3,0,1],[2],[0]]",
        "exampleOutputs2": "false"
    },
    {
        "id": 842,
        "title": "842. Split Array into Fibonacci Sequence",
        "description": "You are given a string of digits num, such as \"123456579\". We can split it into a Fibonacci-like sequence [123, 456, 579].",
        "exampleInputs1": "num = \"123456579\"",
        "exampleOutputs1": "[123,456,579]",
        "exampleInputs2": "num = \"11235813\"",
        "exampleOutputs2": "[1,1,2,3,5,8,13]",
        "exampleInputs3": "num = \"112358130\"",
        "exampleOutputs3": "[]",
        "exampleInputs4": "num = \"0123\"",
        "exampleOutputs4": "[]",
        "exampleInputs5": "num = \"1101111\"",
        "exampleOutputs5": "[11,0,11,11]"
    },
    {
        "id": 845,
        "title": "845. Longest Mountain in Array",
        "description": "You may recall that an array arr is a mountain array if and only if:",
        "exampleInputs1": "arr = [2,1,4,7,3,2,5]",
        "exampleOutputs1": "5",
        "exampleInputs2": "arr = [2,2,2]",
        "exampleOutputs2": "0"
    },
    {
        "id": 846,
        "title": "846. Hand of Straights",
        "description": "Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize, and consists of groupSize consecutive cards.",
        "exampleInputs1": "hand = [1,2,3,6,2,3,4,7,8], groupSize = 3",
        "exampleOutputs1": "true",
        "exampleInputs2": "hand = [1,2,3,4,5], groupSize = 4",
        "exampleOutputs2": "false"
    },
    {
        "id": 848,
        "title": "848. Shifting Letters",
        "description": "You are given a string s of lowercase English letters and an integer array shifts of the same length.",
        "exampleInputs1": "s = \"abc\", shifts = [3,5,9]",
        "exampleOutputs1": "\"rpl\"",
        "exampleInputs2": "s = \"aaa\", shifts = [1,2,3]",
        "exampleOutputs2": "\"gfd\""
    },
    {
        "id": 849,
        "title": "849. Maximize Distance to Closest Person",
        "description": "You are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty (0-indexed).",
        "exampleInputs1": "seats = [1,0,0,0,1,0,1]",
        "exampleOutputs1": "2",
        "exampleInputs2": "seats = [1,0,0,0]",
        "exampleOutputs2": "3",
        "exampleInputs3": "seats = [0,1]",
        "exampleOutputs3": "1"
    },
    {
        "id": 851,
        "title": "851. Loud and Rich",
        "description": "There is a group of n people labeled from 0 to n - 1 where each person has a different amount of money and a different level of quietness.",
        "exampleInputs1": "richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]",
        "exampleOutputs1": "[5,5,2,5,4,5,6,7]",
        "exampleInputs2": "richer = [], quiet = [0]",
        "exampleOutputs2": "[0]"
    },
    {
        "id": 853,
        "title": "853. Car Fleet",
        "description": "There are n cars going to the same destination along a one-lane road. The destination is target miles away.",
        "exampleInputs1": "target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]",
        "exampleOutputs1": "3",
        "exampleInputs2": "target = 10, position = [3], speed = [3]",
        "exampleOutputs2": "1"
    },
    {
        "id": 855,
        "title": "855. Exam Room",
        "description": "There is an exam room with n seats in a single row labeled from 0 to n - 1.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"ExamRoom\", \"seat\", \"seat\", \"seat\", \"seat\", \"leave\", \"seat\"]"
    },
    {
        "id": 856,
        "title": "856. Score of Parentheses",
        "description": "Given a balanced parentheses string s, return the score of the string.",
        "exampleInputs1": "s = \"()\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "s = \"(())\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "s = \"()()\"",
        "exampleOutputs3": "2",
        "exampleInputs4": "s = \"(()(()))\"",
        "exampleOutputs4": "6"
    },
    {
        "id": 858,
        "title": "858. Mirror Reflection",
        "description": "There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2.",
        "exampleInputs1": "p = 2, q = 1",
        "exampleOutputs1": "2",
        "exampleInputs2": "p = 3, q = 1",
        "exampleOutputs2": "1"
    },
    {
        "id": 861,
        "title": "861. Score After Flipping Matrix",
        "description": "You are given an m x n binary matrix grid.",
        "exampleInputs1": "grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]",
        "exampleOutputs1": "39",
        "exampleInputs2": "grid = [[0]]",
        "exampleOutputs2": "1"
    },
    {
        "id": 863,
        "title": "863. All Nodes Distance K in Binary Tree",
        "description": "Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.",
        "exampleInputs1": "root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2",
        "exampleOutputs1": "[7,4,1]",
        "exampleInputs2": "root = [1], target = 1, k = 3",
        "exampleOutputs2": "[]"
    },
    {
        "id": 865,
        "title": "865. Smallest Subtree with all the Deepest Nodes",
        "description": "Given the root of a binary tree, the depth of each node is the shortest distance to the root.",
        "exampleInputs1": "root = [3,5,1,6,2,0,8,null,null,7,4]",
        "exampleOutputs1": "[2,7,4]",
        "exampleInputs2": "root = [1]",
        "exampleOutputs2": "[1]",
        "exampleInputs3": "root = [0,1,3,null,2]",
        "exampleOutputs3": "[2]"
    },
    {
        "id": 866,
        "title": "866. Prime Palindrome",
        "description": "Given an integer n, return the smallest prime palindrome greater than or equal to n.",
        "exampleInputs1": "n = 6",
        "exampleOutputs1": "7",
        "exampleInputs2": "n = 8",
        "exampleOutputs2": "11",
        "exampleInputs3": "n = 13",
        "exampleOutputs3": "101"
    },
    {
        "id": 869,
        "title": "869. Reordered Power of 2",
        "description": "You are given an integer n. We reorder the digits in any order (including the original order) such that the leading digit is not zero.",
        "exampleInputs1": "n = 1",
        "exampleOutputs1": "true",
        "exampleInputs2": "n = 10",
        "exampleOutputs2": "false",
        "exampleInputs3": "n = 16",
        "exampleOutputs3": "true",
        "exampleInputs4": "n = 24",
        "exampleOutputs4": "false",
        "exampleInputs5": "n = 46",
        "exampleOutputs5": "true"
    },
    {
        "id": 870,
        "title": "870. Advantage Shuffle",
        "description": "You are given two integer arrays nums1 and nums2 both of the same length. The advantage of nums1 with respect to nums2 is the number of indices i for which nums1[i] > nums2[i].",
        "exampleInputs1": "nums1 = [2,7,11,15], nums2 = [1,10,4,11]",
        "exampleOutputs1": "[2,11,7,15]",
        "exampleInputs2": "nums1 = [12,24,8,32], nums2 = [13,25,32,11]",
        "exampleOutputs2": "[24,32,8,12]"
    },
    {
        "id": 873,
        "title": "873. Length of Longest Fibonacci Subsequence",
        "description": "A sequence x1, x2, ..., xn is Fibonacci-like if:",
        "exampleInputs1": "arr = [1,2,3,4,5,6,7,8]",
        "exampleOutputs1": "5",
        "exampleInputs2": "arr = [1,3,7,11,12,14,18]",
        "exampleOutputs2": "3"
    },
    {
        "id": 875,
        "title": "875. Koko Eating Bananas",
        "description": "Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.",
        "exampleInputs1": "piles = [3,6,7,11], h = 8",
        "exampleOutputs1": "4",
        "exampleInputs2": "piles = [30,11,23,4,20], h = 5",
        "exampleOutputs2": "30",
        "exampleInputs3": "piles = [30,11,23,4,20], h = 6",
        "exampleOutputs3": "23"
    },
    {
        "id": 877,
        "title": "877. Stone Game",
        "description": "Alice and Bob play a game with piles of stones. There are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].",
        "exampleInputs1": "piles = [5,3,4,5]",
        "exampleOutputs1": "true",
        "exampleInputs2": "piles = [3,7,2,3]",
        "exampleOutputs2": "true"
    },
    {
        "id": 880,
        "title": "880. Decoded String at Index",
        "description": "You are given an encoded string s. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:",
        "exampleInputs1": "s = \"leet2code3\", k = 10",
        "exampleOutputs1": "\"o\"",
        "exampleInputs2": "s = \"ha22\", k = 5",
        "exampleOutputs2": "\"h\"",
        "exampleInputs3": "s = \"a2345678999999999999999\", k = 1",
        "exampleOutputs3": "\"a\""
    },
    {
        "id": 881,
        "title": "881. Boats to Save People",
        "description": "You are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.",
        "exampleInputs1": "people = [1,2], limit = 3",
        "exampleOutputs1": "1",
        "exampleInputs2": "people = [3,2,2,1], limit = 3",
        "exampleOutputs2": "3",
        "exampleInputs3": "people = [3,5,3,4], limit = 5",
        "exampleOutputs3": "4"
    },
    {
        "id": 885,
        "title": "885. Spiral Matrix III",
        "description": "You start at the cell (rStart, cStart) of an rows x cols grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.",
        "exampleInputs1": "rows = 1, cols = 4, rStart = 0, cStart = 0",
        "exampleOutputs1": "[[0,0],[0,1],[0,2],[0,3]]",
        "exampleInputs2": "rows = 5, cols = 6, rStart = 1, cStart = 4",
        "exampleOutputs2": "[[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]"
    },
    {
        "id": 886,
        "title": "886. Possible Bipartition",
        "description": "We want to split a group of n people (labeled from 1 to n) into two groups of any size. Each person may dislike some other people, and they should not go into the same group.",
        "exampleInputs1": "n = 4, dislikes = [[1,2],[1,3],[2,4]]",
        "exampleOutputs1": "true",
        "exampleInputs2": "n = 3, dislikes = [[1,2],[1,3],[2,3]]",
        "exampleOutputs2": "false",
        "exampleInputs3": "n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]",
        "exampleOutputs3": "false"
    },
    {
        "id": 889,
        "title": "889. Construct Binary Tree from Preorder and Postorder Traversal",
        "description": "Given two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree.",
        "exampleInputs1": "preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]",
        "exampleOutputs1": "[1,2,3,4,5,6,7]",
        "exampleInputs2": "preorder = [1], postorder = [1]",
        "exampleOutputs2": "[1]"
    },
    {
        "id": 890,
        "title": "890. Find and Replace Pattern",
        "description": "Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.",
        "exampleInputs1": "words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"",
        "exampleOutputs1": "[\"mee\",\"aqq\"]",
        "exampleInputs2": "words = [\"a\",\"b\",\"c\"], pattern = \"a\"",
        "exampleOutputs2": "[\"a\",\"b\",\"c\"]"
    },
    {
        "id": 893,
        "title": "893. Groups of Special-Equivalent Strings",
        "description": "You are given an array of strings of the same length words.",
        "exampleInputs1": "words = [\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"]",
        "exampleOutputs1": "3",
        "exampleInputs2": "words = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]",
        "exampleOutputs2": "3"
    },
    {
        "id": 894,
        "title": "894. All Possible Full Binary Trees",
        "description": "Given an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have Node.val == 0.",
        "exampleInputs1": "n = 7",
        "exampleOutputs1": "[[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]",
        "exampleInputs2": "n = 3",
        "exampleOutputs2": "[[0,0,0]]"
    },
    {
        "id": 898,
        "title": "898. Bitwise ORs of Subarrays",
        "description": "We have an array arr of non-negative integers.",
        "exampleInputs1": "arr = [0]",
        "exampleOutputs1": "1",
        "exampleInputs2": "arr = [1,1,2]",
        "exampleOutputs2": "3",
        "exampleInputs3": "arr = [1,2,4]",
        "exampleOutputs3": "6"
    },
    {
        "id": 900,
        "title": "900. RLE Iterator",
        "description": "We can use run-length encoding (i.e., RLE) to encode a sequence of integers. In a run-length encoded array of even length encoding (0-indexed), for all even i, encoding[i] tells us the number of times that the non-negative integer value encoding[i + 1] is repeated in the sequence.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"RLEIterator\", \"next\", \"next\", \"next\", \"next\"]"
    },
    {
        "id": 901,
        "title": "901. Online Stock Span",
        "description": "Design an algorithm that collects daily price quotes for some stock and returns the span of that stock's price for the current day.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"StockSpanner\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\"]"
    },
    {
        "id": 904,
        "title": "904. Fruit Into Baskets",
        "description": "You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array fruits where fruits[i] is the type of fruit the ith tree produces.",
        "exampleInputs1": "fruits = [1,2,1]",
        "exampleOutputs1": "3",
        "exampleInputs2": "fruits = [0,1,2,2]",
        "exampleOutputs2": "3",
        "exampleInputs3": "fruits = [1,2,3,2,2]",
        "exampleOutputs3": "4",
        "exampleInputs4": "fruits = [3,3,3,1,2,1,1,2,3,3,4]",
        "exampleOutputs4": "5"
    },
    {
        "id": 907,
        "title": "907. Sum of Subarray Minimums",
        "description": "Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.",
        "exampleInputs1": "arr = [3,1,2,4]",
        "exampleOutputs1": "17",
        "exampleInputs2": "arr = [11,81,94,43,3]",
        "exampleOutputs2": "444"
    },
    {
        "id": 909,
        "title": "909. Snakes and Ladders",
        "description": "You are given an n x n integer matrix board where the cells are labeled from 1 to n2 in a Boustrophedon style starting from the bottom left of the board (i.e. board[n - 1][0]) and alternating direction each row.",
        "exampleInputs1": "board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]",
        "exampleOutputs1": "4",
        "exampleInputs2": "board = [[-1,-1],[-1,3]]",
        "exampleOutputs2": "1"
    },
    {
        "id": 910,
        "title": "910. Smallest Range II",
        "description": "You are given an integer array nums and an integer k.",
        "exampleInputs1": "nums = [1], k = 0",
        "exampleOutputs1": "0",
        "exampleInputs2": "nums = [0,10], k = 2",
        "exampleOutputs2": "6",
        "exampleInputs3": "nums = [1,3,6], k = 3",
        "exampleOutputs3": "3"
    },
    {
        "id": 911,
        "title": "911. Online Election",
        "description": "You are given two integer arrays persons and times. In an election, the ith vote was cast for persons[i] at time times[i].",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"TopVotedCandidate\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\"]"
    },
    {
        "id": 912,
        "title": "912. Sort an Array",
        "description": "Given an array of integers nums, sort the array in ascending order.",
        "exampleInputs1": "nums = [5,2,3,1]",
        "exampleOutputs1": "[1,2,3,5]",
        "exampleInputs2": "nums = [5,1,1,2,0,0]",
        "exampleOutputs2": "[0,0,1,1,2,5]"
    },
    {
        "id": 915,
        "title": "915. Partition Array into Disjoint Intervals",
        "description": "Given an integer array nums, partition it into two (contiguous) subarrays left and right so that:",
        "exampleInputs1": "nums = [5,0,3,8,6]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [1,1,1,0,6,12]",
        "exampleOutputs2": "4"
    },
    {
        "id": 916,
        "title": "916. Word Subsets",
        "description": "You are given two string arrays words1 and words2.",
        "exampleInputs1": "words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"o\"]",
        "exampleOutputs1": "[\"facebook\",\"google\",\"leetcode\"]",
        "exampleInputs2": "words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"l\",\"e\"]",
        "exampleOutputs2": "[\"apple\",\"google\",\"leetcode\"]",
        "exampleInputs3": "words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"oo\"]",
        "exampleOutputs3": "[\"facebook\",\"google\"]",
        "exampleInputs4": "words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"lo\",\"eo\"]",
        "exampleOutputs4": "[\"google\",\"leetcode\"]",
        "exampleInputs5": "words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"ec\",\"oc\",\"ceo\"]",
        "exampleOutputs5": "[\"facebook\",\"leetcode\"]"
    },
    {
        "id": 918,
        "title": "918. Maximum Sum Circular Subarray",
        "description": "Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.",
        "exampleInputs1": "nums = [1,-2,3,-2]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [5,-3,5]",
        "exampleOutputs2": "10",
        "exampleInputs3": "nums = [3,-1,2,-1]",
        "exampleOutputs3": "4",
        "exampleInputs4": "nums = [3,-2,2,-3]",
        "exampleOutputs4": "3",
        "exampleInputs5": "nums = [-2,-3,-1]",
        "exampleOutputs5": "-1"
    },
    {
        "id": 919,
        "title": "919. Complete Binary Tree Inserter",
        "description": "A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"CBTInserter\", \"insert\", \"insert\", \"get_root\"]"
    },
    {
        "id": 921,
        "title": "921. Minimum Add to Make Parentheses Valid",
        "description": "A parentheses string is valid if and only if:",
        "exampleInputs1": "s = \"())\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "s = \"(((\"",
        "exampleOutputs2": "3",
        "exampleInputs3": "s = \"()\"",
        "exampleOutputs3": "0",
        "exampleInputs4": "s = \"()))((\"",
        "exampleOutputs4": "4"
    },
    {
        "id": 923,
        "title": "923. 3Sum With Multiplicity",
        "description": "Given an integer array arr, and an integer target, return the number of tuples i, j, k such that i < j < k and arr[i] + arr[j] + arr[k] == target.",
        "exampleInputs1": "arr = [1,1,2,2,3,3,4,4,5,5], target = 8",
        "exampleOutputs1": "20",
        "exampleInputs2": "arr = [1,1,2,2,2,2], target = 5",
        "exampleOutputs2": "12"
    },
    {
        "id": 926,
        "title": "926. Flip String to Monotone Increasing",
        "description": "A binary string is monotone increasing if it consists of some number of 0's (possibly none), followed by some number of 1's (also possibly none).",
        "exampleInputs1": "s = \"00110\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "s = \"010110\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "s = \"00011000\"",
        "exampleOutputs3": "2"
    },
    {
        "id": 930,
        "title": "930. Binary Subarrays With Sum",
        "description": "Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.",
        "exampleInputs1": "nums = [1,0,1,0,1], goal = 2",
        "exampleOutputs1": "4",
        "exampleInputs2": "nums = [0,0,0,0,0], goal = 0",
        "exampleOutputs2": "15"
    },
    {
        "id": 931,
        "title": "931. Minimum Falling Path Sum",
        "description": "Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.",
        "exampleInputs1": "matrix = [[2,1,3],[6,5,4],[7,8,9]]",
        "exampleOutputs1": "13",
        "exampleInputs2": "matrix = [[-19,57],[-40,-5]]",
        "exampleOutputs2": "-59",
        "exampleInputs3": "matrix = [[-48]]",
        "exampleOutputs3": "-48"
    },
    {
        "id": 932,
        "title": "932. Beautiful Array",
        "description": "An array nums of length n is beautiful if:",
        "exampleInputs1": "n = 4",
        "exampleOutputs1": "[2,1,4,3]",
        "exampleInputs2": "n = 5",
        "exampleOutputs2": "[3,1,2,5,4]"
    },
    {
        "id": 934,
        "title": "934. Shortest Bridge",
        "description": "In a given 2D binary array grid, there are two islands.  (An island is a 4-directionally connected group of 1s not connected to any other 1s.)",
        "exampleInputs1": "grid = [[0,1],[1,0]]",
        "exampleOutputs1": "1",
        "exampleInputs2": "grid = [[0,1,0],[0,0,0],[0,0,1]]",
        "exampleOutputs2": "2",
        "exampleInputs3": "grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]",
        "exampleOutputs3": "1"
    },
    {
        "id": 935,
        "title": "935. Knight Dialer",
        "description": "The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagaram:",
        "exampleInputs1": "n = 1",
        "exampleOutputs1": "10",
        "exampleInputs2": "n = 2",
        "exampleOutputs2": "20",
        "exampleInputs3": "n = 3",
        "exampleOutputs3": "46",
        "exampleInputs4": "n = 4",
        "exampleOutputs4": "104",
        "exampleInputs5": "n = 3131",
        "exampleOutputs5": "136006598"
    },
    {
        "id": 939,
        "title": "939. Minimum Area Rectangle",
        "description": "You are given an array of points in the X-Y plane points where points[i] = [xi, yi].",
        "exampleInputs1": "points = [[1,1],[1,3],[3,1],[3,3],[2,2]]",
        "exampleOutputs1": "4",
        "exampleInputs2": "points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]",
        "exampleOutputs2": "2"
    },
    {
        "id": 945,
        "title": "945. Minimum Increment to Make Array Unique",
        "description": "You are given an integer array nums. In one move, you can pick an index i where 0 <= i < nums.length and increment nums[i] by 1.",
        "exampleInputs1": "nums = [1,2,2]",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [3,2,1,2,1,7]",
        "exampleOutputs2": "6"
    },
    {
        "id": 946,
        "title": "946. Validate Stack Sequences",
        "description": "Given two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.",
        "exampleInputs1": "pushed = [1,2,3,4,5], popped = [4,5,3,2,1]",
        "exampleOutputs1": "true",
        "exampleInputs2": "pushed = [1,2,3,4,5], popped = [4,3,5,1,2]",
        "exampleOutputs2": "false"
    },
    {
        "id": 947,
        "title": "947. Most Stones Removed with Same Row or Column",
        "description": "On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.",
        "exampleInputs1": "stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]",
        "exampleOutputs1": "5",
        "exampleInputs2": "stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]",
        "exampleOutputs2": "3",
        "exampleInputs3": "stones = [[0,0]]",
        "exampleOutputs3": "0"
    },
    {
        "id": 948,
        "title": "948. Bag of Tokens",
        "description": "You have an initial power of power, an initial score of 0, and a bag of tokens where tokens[i] is the value of the ith token (0-indexed).",
        "exampleInputs1": "tokens = [100], power = 50",
        "exampleOutputs1": "0",
        "exampleInputs2": "tokens = [100,200], power = 150",
        "exampleOutputs2": "1",
        "exampleInputs3": "tokens = [100,200,300,400], power = 200",
        "exampleOutputs3": "2"
    },
    {
        "id": 949,
        "title": "949. Largest Time for Given Digits",
        "description": "Given an array arr of 4 digits, find the latest 24-hour time that can be made using each digit exactly once.",
        "exampleInputs1": "arr = [1,2,3,4]",
        "exampleOutputs1": "\"23:41\"",
        "exampleInputs2": "arr = [5,5,5,5]",
        "exampleOutputs2": "\"\"",
        "exampleInputs3": "arr = [0,0,0,0]",
        "exampleOutputs3": "\"00:00\"",
        "exampleInputs4": "arr = [0,0,1,0]",
        "exampleOutputs4": "\"10:00\""
    },
    {
        "id": 950,
        "title": "950. Reveal Cards In Increasing Order",
        "description": "You are given an integer array deck. There is a deck of cards where every card has a unique integer. The integer on the ith card is deck[i].",
        "exampleInputs1": "deck = [17,13,11,2,3,5,7]",
        "exampleOutputs1": "[2,13,3,11,5,17,7]",
        "exampleInputs2": "deck = [1,1000]",
        "exampleOutputs2": "[1,1000]"
    },
    {
        "id": 951,
        "title": "951. Flip Equivalent Binary Trees",
        "description": "For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.",
        "exampleInputs1": "root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]",
        "exampleOutputs1": "true",
        "exampleInputs2": "root1 = [], root2 = []",
        "exampleOutputs2": "true",
        "exampleInputs3": "root1 = [], root2 = [1]",
        "exampleOutputs3": "false",
        "exampleInputs4": "root1 = [0,null,1], root2 = []",
        "exampleOutputs4": "false",
        "exampleInputs5": "root1 = [0,null,1], root2 = [0,1]",
        "exampleOutputs5": "true"
    },
    {
        "id": 954,
        "title": "954. Array of Doubled Pairs",
        "description": "Given an integer array of even length arr, return true if it is possible to reorder arr such that arr[2 * i + 1] = 2 * arr[2 * i] for every 0 <= i < len(arr) / 2, or false otherwise.",
        "exampleInputs1": "arr = [3,1,3,6]",
        "exampleOutputs1": "false",
        "exampleInputs2": "arr = [2,1,2,6]",
        "exampleOutputs2": "false",
        "exampleInputs3": "arr = [4,-2,2,-4]",
        "exampleOutputs3": "true",
        "exampleInputs4": "arr = [1,2,4,16,8,4]",
        "exampleOutputs4": "false"
    },
    {
        "id": 955,
        "title": "955. Delete Columns to Make Sorted II",
        "description": "You are given an array of n strings strs, all of the same length.",
        "exampleInputs1": "strs = [\"ca\",\"bb\",\"ac\"]",
        "exampleOutputs1": "1",
        "exampleInputs2": "strs = [\"xc\",\"yb\",\"za\"]",
        "exampleOutputs2": "0",
        "exampleInputs3": "strs = [\"zyx\",\"wvu\",\"tsr\"]",
        "exampleOutputs3": "3"
    },
    {
        "id": 957,
        "title": "957. Prison Cells After N Days",
        "description": "There are 8 prison cells in a row and each cell is either occupied or vacant.",
        "exampleInputs1": "cells = [0,1,0,1,1,0,0,1], n = 7",
        "exampleOutputs1": "[0,0,1,1,0,0,0,0]",
        "exampleInputs2": "cells = [1,0,0,1,0,0,1,0], n = 1000000000",
        "exampleOutputs2": "[0,0,1,1,1,1,1,0]"
    },
    {
        "id": 958,
        "title": "958. Check Completeness of a Binary Tree",
        "description": "Given the root of a binary tree, determine if it is a complete binary tree.",
        "exampleInputs1": "root = [1,2,3,4,5,6]",
        "exampleOutputs1": "true",
        "exampleInputs2": "root = [1,2,3,4,5,null,7]",
        "exampleOutputs2": "false"
    },
    {
        "id": 959,
        "title": "959. Regions Cut By Slashes",
        "description": "An n x n grid is composed of 1 x 1 squares where each 1 x 1 square consists of a '/', '\\', or blank space ' '. These characters divide the square into contiguous regions.",
        "exampleInputs1": "grid = [\" /\",\"/ \"]",
        "exampleOutputs1": "2",
        "exampleInputs2": "grid = [\" /\",\"  \"]",
        "exampleOutputs2": "1",
        "exampleInputs3": "grid = [\"\\\\/\",\"/\\\\\"]",
        "exampleOutputs3": "4",
        "exampleInputs4": "grid = [\"/\\\\\",\"\\\\/\"]",
        "exampleOutputs4": "5",
        "exampleInputs5": "grid = [\"//\",\"/ \"]",
        "exampleOutputs5": "3"
    },
    {
        "id": 962,
        "title": "962. Maximum Width Ramp",
        "description": "A ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j]. The width of such a ramp is j - i.",
        "exampleInputs1": "nums = [6,0,8,2,1,5]",
        "exampleOutputs1": "4",
        "exampleInputs2": "nums = [9,8,1,0,1,9,4,0,4,1]",
        "exampleOutputs2": "7"
    },
    {
        "id": 963,
        "title": "963. Minimum Area Rectangle II",
        "description": "You are given an array of points in the X-Y plane points where points[i] = [xi, yi].",
        "exampleInputs1": "points = [[1,2],[2,1],[1,0],[0,1]]",
        "exampleOutputs1": "2.00000",
        "exampleInputs2": "points = [[0,1],[2,1],[1,1],[1,0],[2,0]]",
        "exampleOutputs2": "1.00000",
        "exampleInputs3": "points = [[0,3],[1,2],[3,1],[1,3],[2,1]]",
        "exampleOutputs3": "0",
        "exampleInputs4": "points = [[3,1],[1,1],[0,1],[2,1],[3,3],[3,2],[0,2],[2,3]]",
        "exampleOutputs4": "2.00000"
    },
    {
        "id": 966,
        "title": "966. Vowel Spellchecker",
        "description": "Given a wordlist, we want to implement a spellchecker that converts a query word into a correct word.",
        "exampleInputs1": "wordlist = [\"KiTe\",\"kite\",\"hare\",\"Hare\"], queries = [\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"]",
        "exampleOutputs1": "[\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"]",
        "exampleInputs2": "wordlist = [\"yellow\"], queries = [\"YellOw\"]",
        "exampleOutputs2": "[\"yellow\"]"
    },
    {
        "id": 967,
        "title": "967. Numbers With Same Consecutive Differences",
        "description": "Return all non-negative integers of length n such that the absolute difference between every two consecutive digits is k.",
        "exampleInputs1": "n = 3, k = 7",
        "exampleOutputs1": "[181,292,707,818,929]",
        "exampleInputs2": "n = 2, k = 1",
        "exampleOutputs2": "[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]",
        "exampleInputs3": "n = 2, k = 0",
        "exampleOutputs3": "[11,22,33,44,55,66,77,88,99]",
        "exampleInputs4": "n = 2, k = 2",
        "exampleOutputs4": "[13,20,24,31,35,42,46,53,57,64,68,75,79,86,97]"
    },
    {
        "id": 969,
        "title": "969. Pancake Sorting",
        "description": "Given an array of integers arr, sort the array by performing a series of pancake flips.",
        "exampleInputs1": "arr = [3,2,4,1]",
        "exampleOutputs1": "[4,2,4,3]",
        "exampleInputs2": "arr = [1,2,3]",
        "exampleOutputs2": "[]"
    },
    {
        "id": 970,
        "title": "970. Powerful Integers",
        "description": "Given three integers x, y, and bound, return a list of all the powerful integers that have a value less than or equal to bound.",
        "exampleInputs1": "x = 2, y = 3, bound = 10",
        "exampleOutputs1": "[2,3,4,5,7,9,10]",
        "exampleInputs2": "x = 3, y = 5, bound = 15",
        "exampleOutputs2": "[2,4,6,8,10,14]"
    },
    {
        "id": 971,
        "title": "971. Flip Binary Tree To Match Preorder Traversal",
        "description": "You are given the root of a binary tree with n nodes, where each node is uniquely assigned a value from 1 to n. You are also given a sequence of n values voyage, which is the desired pre-order traversal of the binary tree.",
        "exampleInputs1": "root = [1,2], voyage = [2,1]",
        "exampleOutputs1": "[-1]",
        "exampleInputs2": "root = [1,2,3], voyage = [1,3,2]",
        "exampleOutputs2": "[1]",
        "exampleInputs3": "root = [1,2,3], voyage = [1,2,3]",
        "exampleOutputs3": "[]"
    },
    {
        "id": 973,
        "title": "973. K Closest Points to Origin",
        "description": "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).",
        "exampleInputs1": "points = [[1,3],[-2,2]], k = 1",
        "exampleOutputs1": "[[-2,2]]",
        "exampleInputs2": "points = [[3,3],[5,-1],[-2,4]], k = 2",
        "exampleOutputs2": "[[3,3],[-2,4]]"
    },
    {
        "id": 974,
        "title": "974. Subarray Sums Divisible by K",
        "description": "Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.",
        "exampleInputs1": "nums = [4,5,0,-2,-3,1], k = 5",
        "exampleOutputs1": "7",
        "exampleInputs2": "nums = [5], k = 9",
        "exampleOutputs2": "0"
    },
    {
        "id": 978,
        "title": "978. Longest Turbulent Subarray",
        "description": "Given an integer array arr, return the length of a maximum size turbulent subarray of arr.",
        "exampleInputs1": "arr = [9,4,2,10,7,8,8,1,9]",
        "exampleOutputs1": "5",
        "exampleInputs2": "arr = [4,8,12,16]",
        "exampleOutputs2": "2",
        "exampleInputs3": "arr = [100]",
        "exampleOutputs3": "1"
    },
    {
        "id": 979,
        "title": "979. Distribute Coins in Binary Tree",
        "description": "You are given the root of a binary tree with n nodes where each node in the tree has node.val coins. There are n coins in total throughout the whole tree.",
        "exampleInputs1": "root = [3,0,0]",
        "exampleOutputs1": "2",
        "exampleInputs2": "root = [0,3,0]",
        "exampleOutputs2": "3",
        "exampleInputs3": "root = [1,0,2]",
        "exampleOutputs3": "2",
        "exampleInputs4": "root = [1,0,0,null,3]",
        "exampleOutputs4": "4"
    },
    {
        "id": 981,
        "title": "981. Time Based Key-Value Store",
        "description": "Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"TimeMap\", \"set\", \"get\", \"get\", \"set\", \"get\", \"get\"]"
    },
    {
        "id": 983,
        "title": "983. Minimum Cost For Tickets",
        "description": "You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array days. Each day is an integer from 1 to 365.",
        "exampleInputs1": "days = [1,4,6,7,8,20], costs = [2,7,15]",
        "exampleOutputs1": "11",
        "exampleInputs2": "days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]",
        "exampleOutputs2": "17"
    },
    {
        "id": 984,
        "title": "984. String Without AAA or BBB",
        "description": "Given two integers a and b, return any string s such that:",
        "exampleInputs1": "a = 1, b = 2",
        "exampleOutputs1": "\"abb\"",
        "exampleInputs2": "a = 4, b = 1",
        "exampleOutputs2": "\"aabaa\""
    },
    {
        "id": 985,
        "title": "985. Sum of Even Numbers After Queries",
        "description": "You are given an integer array nums and an array queries where queries[i] = [vali, indexi].",
        "exampleInputs1": "nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]",
        "exampleOutputs1": "[8,6,2,4]",
        "exampleInputs2": "nums = [1], queries = [[4,0]]",
        "exampleOutputs2": "[0]"
    },
    {
        "id": 986,
        "title": "986. Interval List Intersections",
        "description": "You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order.",
        "exampleInputs1": "firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]",
        "exampleOutputs1": "[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]",
        "exampleInputs2": "firstList = [[1,3],[5,9]], secondList = []",
        "exampleOutputs2": "[]",
        "exampleInputs3": "firstList = [], secondList = [[4,8],[10,12]]",
        "exampleOutputs3": "[]",
        "exampleInputs4": "firstList = [[1,7]], secondList = [[3,10]]",
        "exampleOutputs4": "[[3,7]]"
    },
    {
        "id": 988,
        "title": "988. Smallest String Starting From Leaf",
        "description": "You are given the root of a binary tree where each node has a value in the range [0, 25] representing the letters 'a' to 'z'.",
        "exampleInputs1": "root = [0,1,2,3,4,3,4]",
        "exampleOutputs1": "\"dba\"",
        "exampleInputs2": "root = [25,1,3,1,3,0,2]",
        "exampleOutputs2": "\"adz\"",
        "exampleInputs3": "root = [2,2,1,null,1,0,null,0]",
        "exampleOutputs3": "\"abc\""
    },
    {
        "id": 990,
        "title": "990. Satisfiability of Equality Equations",
        "description": "You are given an array of strings equations that represent relationships between variables where each string equations[i] is of length 4 and takes one of two different forms: \"xi==yi\" or \"xi!=yi\".Here, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names.",
        "exampleInputs1": "equations = [\"a==b\",\"b!=a\"]",
        "exampleOutputs1": "false",
        "exampleInputs2": "equations = [\"b==a\",\"a==b\"]",
        "exampleOutputs2": "true",
        "exampleInputs3": "equations = [\"a==b\",\"b==c\",\"a==c\"]",
        "exampleOutputs3": "true",
        "exampleInputs4": "equations = [\"a==b\",\"b!=c\",\"c==a\"]",
        "exampleOutputs4": "false",
        "exampleInputs5": "equations = [\"c==c\",\"b==d\",\"x!=z\"]",
        "exampleOutputs5": "true"
    },
    {
        "id": 991,
        "title": "991. Broken Calculator",
        "description": "There is a broken calculator that has the integer startValue on its display initially. In on operation you can:",
        "exampleInputs1": "startValue = 2, target = 3",
        "exampleOutputs1": "2",
        "exampleInputs2": "startValue = 5, target = 8",
        "exampleOutputs2": "2",
        "exampleInputs3": "startValue = 3, target = 10",
        "exampleOutputs3": "3",
        "exampleInputs4": "startValue = 1024, target = 1",
        "exampleOutputs4": "1023"
    },
    {
        "id": 994,
        "title": "994. Rotting Oranges",
        "description": "You are given an m x n grid where each cell can have one of three values:",
        "exampleInputs1": "grid = [[2,1,1],[1,1,0],[0,1,1]]",
        "exampleOutputs1": "4",
        "exampleInputs2": "grid = [[2,1,1],[0,1,1],[1,0,1]]",
        "exampleOutputs2": "-1",
        "exampleInputs3": "grid = [[0,2]]",
        "exampleOutputs3": "0"
    },
    {
        "id": 998,
        "title": "998. Maximum Binary Tree II",
        "description": "A maximum tree is a tree where every node has a value greater than any other value in its subtree.",
        "exampleInputs1": "root = [4,1,3,null,null,2], val = 5",
        "exampleOutputs1": "[5,4,null,1,3,null,null,2]",
        "exampleInputs2": "root = [5,2,4,null,1], val = 3",
        "exampleOutputs2": "[5,2,4,null,1,null,3]",
        "exampleInputs3": "root = [5,2,3,null,1], val = 4",
        "exampleOutputs3": "[5,2,4,null,1,3]"
    },
    {
        "id": 1003,
        "title": "1003. Check If Word Is Valid After Substitutions",
        "description": "Given a string s, determine if it is valid.",
        "exampleInputs1": "s = \"aabcbc\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"abcabcababcc\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "s = \"abccba\"",
        "exampleOutputs3": "false",
        "exampleInputs4": "s = \"cababc\"",
        "exampleOutputs4": "false"
    },
    {
        "id": 1004,
        "title": "1004. Max Consecutive Ones III",
        "description": "Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.",
        "exampleInputs1": "nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2",
        "exampleOutputs1": "6",
        "exampleInputs2": "nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3",
        "exampleOutputs2": "10"
    },
    {
        "id": 1006,
        "title": "1006. Clumsy Factorial",
        "description": "The factorial of a positive integer n is the product of all positive integers less than or equal to n.",
        "exampleInputs1": "n = 4",
        "exampleOutputs1": "7",
        "exampleInputs2": "n = 10",
        "exampleOutputs2": "12"
    },
    {
        "id": 1007,
        "title": "1007. Minimum Domino Rotations For Equal Row",
        "description": "In a row of dominoes, tops[i] and bottoms[i] represent the top and bottom halves of the ith domino. (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)",
        "exampleInputs1": "tops = [2,1,2,4,2,2], bottoms = [5,2,6,2,3,2]",
        "exampleOutputs1": "2",
        "exampleInputs2": "tops = [3,5,1,2,3], bottoms = [3,6,3,3,4]",
        "exampleOutputs2": "-1"
    },
    {
        "id": 1008,
        "title": "1008. Construct Binary Search Tree from Preorder Traversal",
        "description": "Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.",
        "exampleInputs1": "preorder = [8,5,1,7,10,12]",
        "exampleOutputs1": "[8,5,10,1,7,null,12]",
        "exampleInputs2": "preorder = [1,3]",
        "exampleOutputs2": "[1,null,3]"
    },
    {
        "id": 1010,
        "title": "1010. Pairs of Songs With Total Durations Divisible by 60",
        "description": "You are given a list of songs where the ith song has a duration of time[i] seconds.",
        "exampleInputs1": "time = [30,20,150,100,40]",
        "exampleOutputs1": "3",
        "exampleInputs2": "time = [60,60,60]",
        "exampleOutputs2": "3"
    },
    {
        "id": 1011,
        "title": "1011. Capacity To Ship Packages Within D Days",
        "description": "A conveyor belt has packages that must be shipped from one port to another within days days.",
        "exampleInputs1": "weights = [1,2,3,4,5,6,7,8,9,10], days = 5",
        "exampleOutputs1": "15",
        "exampleInputs2": "weights = [3,2,2,4,1,4], days = 3",
        "exampleOutputs2": "6",
        "exampleInputs3": "weights = [1,2,3,1,1], days = 4",
        "exampleOutputs3": "3"
    },
    {
        "id": 1014,
        "title": "1014. Best Sightseeing Pair",
        "description": "You are given an integer array values where values[i] represents the value of the ith sightseeing spot. Two sightseeing spots i and j have a distance j - i between them.",
        "exampleInputs1": "values = [8,1,5,2,6]",
        "exampleOutputs1": "11",
        "exampleInputs2": "values = [1,2]",
        "exampleOutputs2": "2"
    },
    {
        "id": 1015,
        "title": "1015. Smallest Integer Divisible by K",
        "description": "Given a positive integer k, you need to find the length of the smallest positive integer n such that n is divisible by k, and n only contains the digit 1.",
        "exampleInputs1": "k = 1",
        "exampleOutputs1": "1",
        "exampleInputs2": "k = 2",
        "exampleOutputs2": "-1",
        "exampleInputs3": "k = 3",
        "exampleOutputs3": "3"
    },
    {
        "id": 1016,
        "title": "1016. Binary String With Substrings Representing 1 To N",
        "description": "Given a binary string s and a positive integer n, return true if the binary representation of all the integers in the range [1, n] are substrings of s, or false otherwise.",
        "exampleInputs1": "s = \"0110\", n = 3",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"0110\", n = 4",
        "exampleOutputs2": "false"
    },
    {
        "id": 1017,
        "title": "1017. Convert to Base -2",
        "description": "Given an integer n, return a binary string representing its representation in base -2.",
        "exampleInputs1": "n = 2",
        "exampleOutputs1": "\"110\"",
        "exampleInputs2": "n = 3",
        "exampleOutputs2": "\"111\"",
        "exampleInputs3": "n = 4",
        "exampleOutputs3": "\"100\""
    },
    {
        "id": 1019,
        "title": "1019. Next Greater Node In Linked List",
        "description": "You are given the head of a linked list with n nodes.",
        "exampleInputs1": "head = [2,1,5]",
        "exampleOutputs1": "[5,5,0]",
        "exampleInputs2": "head = [2,7,4,3,5]",
        "exampleOutputs2": "[7,0,5,5,0]"
    },
    {
        "id": 1020,
        "title": "1020. Number of Enclaves",
        "description": "You are given an m x n binary matrix grid, where 0 represents a sea cell and 1 represents a land cell.",
        "exampleInputs1": "grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]",
        "exampleOutputs2": "0"
    },
    {
        "id": 1023,
        "title": "1023. Camelcase Matching",
        "description": "Given an array of strings queries and a string pattern, return a boolean array answer where answer[i] is true if queries[i] matches pattern, and false otherwise.",
        "exampleInputs1": "queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\"",
        "exampleOutputs1": "[true,false,true,true,false]",
        "exampleInputs2": "queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\"",
        "exampleOutputs2": "[true,false,true,false,false]",
        "exampleInputs3": "queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\"",
        "exampleOutputs3": "[false,true,false,false,false]"
    },
    {
        "id": 1024,
        "title": "1024. Video Stitching",
        "description": "You are given a series of video clips from a sporting event that lasted time seconds. These video clips can be overlapping with each other and have varying lengths.",
        "exampleInputs1": "clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10",
        "exampleOutputs1": "3",
        "exampleInputs2": "clips = [[0,1],[1,2]], time = 5",
        "exampleOutputs2": "-1",
        "exampleInputs3": "clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9",
        "exampleOutputs3": "3",
        "exampleInputs4": "clips = [[0,4],[2,8]], time = 5",
        "exampleOutputs4": "2"
    },
    {
        "id": 1026,
        "title": "1026. Maximum Difference Between Node and Ancestor",
        "description": "Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.",
        "exampleInputs1": "root = [8,3,10,1,6,null,14,null,null,4,7,13]",
        "exampleOutputs1": "7",
        "exampleInputs2": "root = [1,null,2,null,0,3]",
        "exampleOutputs2": "3"
    },
    {
        "id": 1027,
        "title": "1027. Longest Arithmetic Subsequence",
        "description": "Given an array nums of integers, return the length of the longest arithmetic subsequence in nums.",
        "exampleInputs1": "nums = [3,6,9,12]",
        "exampleOutputs1": "4",
        "exampleInputs2": "nums = [9,4,7,2,10]",
        "exampleOutputs2": "3",
        "exampleInputs3": "nums = [20,1,15,3,10,5,8]",
        "exampleOutputs3": "4"
    },
    {
        "id": 1029,
        "title": "1029. Two City Scheduling",
        "description": "A company is planning to interview 2n people. Given the array costs where costs[i] = [aCosti, bCosti], the cost of flying the ith person to city a is aCosti, and the cost of flying the ith person to city b is bCosti.",
        "exampleInputs1": "costs = [[10,20],[30,200],[400,50],[30,20]]",
        "exampleOutputs1": "110",
        "exampleInputs2": "costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]",
        "exampleOutputs2": "1859",
        "exampleInputs3": "costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]",
        "exampleOutputs3": "3086"
    },
    {
        "id": 1031,
        "title": "1031. Maximum Sum of Two Non-Overlapping Subarrays",
        "description": "Given an integer array nums and two integers firstLen and secondLen, return the maximum sum of elements in two non-overlapping subarrays with lengths firstLen and secondLen.",
        "exampleInputs1": "nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2",
        "exampleOutputs1": "20",
        "exampleInputs2": "nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2",
        "exampleOutputs2": "29",
        "exampleInputs3": "nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3",
        "exampleOutputs3": "31"
    },
    {
        "id": 1033,
        "title": "1033. Moving Stones Until Consecutive",
        "description": "There are three stones in different positions on the X-axis. You are given three integers a, b, and c, the positions of the stones.",
        "exampleInputs1": "a = 1, b = 2, c = 5",
        "exampleOutputs1": "[1,2]",
        "exampleInputs2": "a = 4, b = 3, c = 2",
        "exampleOutputs2": "[0,0]",
        "exampleInputs3": "a = 3, b = 5, c = 1",
        "exampleOutputs3": "[1,2]"
    },
    {
        "id": 1034,
        "title": "1034. Coloring A Border",
        "description": "You are given an m x n integer matrix grid, and three integers row, col, and color. Each value in the grid represents the color of the grid square at that location.",
        "exampleInputs1": "grid = [[1,1],[1,2]], row = 0, col = 0, color = 3",
        "exampleOutputs1": "[[3,3],[3,2]]",
        "exampleInputs2": "grid = [[1,2,2],[2,3,2]], row = 0, col = 1, color = 3",
        "exampleOutputs2": "[[1,3,3],[2,3,3]]",
        "exampleInputs3": "grid = [[1,1,1],[1,1,1],[1,1,1]], row = 1, col = 1, color = 2",
        "exampleOutputs3": "[[2,2,2],[2,1,2],[2,2,2]]"
    },
    {
        "id": 1035,
        "title": "1035. Uncrossed Lines",
        "description": "You are given two integer arrays nums1 and nums2. We write the integers of nums1 and nums2 (in the order they are given) on two separate horizontal lines.",
        "exampleInputs1": "nums1 = [1,4,2], nums2 = [1,2,4]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]",
        "exampleOutputs2": "3",
        "exampleInputs3": "nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]",
        "exampleOutputs3": "2"
    },
    {
        "id": 1038,
        "title": "1038. Binary Search Tree to Greater Sum Tree",
        "description": "Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.",
        "exampleInputs1": "root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]",
        "exampleOutputs1": "[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]",
        "exampleInputs2": "root = [0,null,1]",
        "exampleOutputs2": "[1,null,1]",
        "exampleInputs3": "root = [1,0,2]",
        "exampleOutputs3": "[3,3,2]",
        "exampleInputs4": "root = [3,2,4,1]",
        "exampleOutputs4": "[7,9,4,10]"
    },
    {
        "id": 1039,
        "title": "1039. Minimum Score Triangulation of Polygon",
        "description": "You have a convex n-sided polygon where each vertex has an integer value. You are given an integer array values where values[i] is the value of the ith vertex (i.e., clockwise order).",
        "exampleInputs1": "values = [1,2,3]",
        "exampleOutputs1": "6",
        "exampleInputs2": "values = [3,7,4,5]",
        "exampleOutputs2": "144",
        "exampleInputs3": "values = [1,3,1,4,1,5]",
        "exampleOutputs3": "13"
    },
    {
        "id": 1040,
        "title": "1040. Moving Stones Until Consecutive II",
        "description": "There are some stones in different positions on the X-axis. You are given an integer array stones, the positions of the stones.",
        "exampleInputs1": "stones = [7,4,9]",
        "exampleOutputs1": "[1,2]",
        "exampleInputs2": "stones = [6,5,4,3,10]",
        "exampleOutputs2": "[2,3]"
    },
    {
        "id": 1041,
        "title": "1041. Robot Bounded In Circle",
        "description": "On an infinite plane, a robot initially stands at (0, 0) and faces north. The robot can receive one of three instructions:",
        "exampleInputs1": "instructions = \"GGLLGG\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "instructions = \"GG\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "instructions = \"GL\"",
        "exampleOutputs3": "true"
    },
    {
        "id": 1042,
        "title": "1042. Flower Planting With No Adjacent",
        "description": "You have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes a bidirectional path between garden xi to garden yi. In each garden, you want to plant one of 4 types of flowers.",
        "exampleInputs1": "n = 3, paths = [[1,2],[2,3],[3,1]]",
        "exampleOutputs1": "[1,2,3]",
        "exampleInputs2": "n = 4, paths = [[1,2],[3,4]]",
        "exampleOutputs2": "[1,2,1,2]",
        "exampleInputs3": "n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]",
        "exampleOutputs3": "[1,2,3,4]"
    },
    {
        "id": 1043,
        "title": "1043. Partition Array for Maximum Sum",
        "description": "Given an integer array arr, partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has their values changed to become the maximum value of that subarray.",
        "exampleInputs1": "arr = [1,15,7,9,2,5,10], k = 3",
        "exampleOutputs1": "84",
        "exampleInputs2": "arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4",
        "exampleOutputs2": "83",
        "exampleInputs3": "arr = [1], k = 1",
        "exampleOutputs3": "1"
    },
    {
        "id": 1048,
        "title": "1048. Longest String Chain",
        "description": "You are given an array of words where each word consists of lowercase English letters.",
        "exampleInputs1": "words = [\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]",
        "exampleOutputs1": "4",
        "exampleInputs2": "words = [\"xbc\",\"pcxbcf\",\"xb\",\"cxbc\",\"pcxbc\"]",
        "exampleOutputs2": "5",
        "exampleInputs3": "words = [\"abcd\",\"dbqca\"]",
        "exampleOutputs3": "1"
    },
    {
        "id": 1049,
        "title": "1049. Last Stone Weight II",
        "description": "You are given an array of integers stones where stones[i] is the weight of the ith stone.",
        "exampleInputs1": "stones = [2,7,4,1,8,1]",
        "exampleOutputs1": "1",
        "exampleInputs2": "stones = [31,26,33,21,40]",
        "exampleOutputs2": "5",
        "exampleInputs3": "stones = [1,2]",
        "exampleOutputs3": "1"
    },
    {
        "id": 1052,
        "title": "1052. Grumpy Bookstore Owner",
        "description": "There is a bookstore owner that has a store open for n minutes. Every minute, some number of customers enter the store. You are given an integer array customers of length n where customers[i] is the number of the customer that enters the store at the start of the ith minute and all those customers leave after the end of that minute.",
        "exampleInputs1": "customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3",
        "exampleOutputs1": "16",
        "exampleInputs2": "customers = [1], grumpy = [0], minutes = 1",
        "exampleOutputs2": "1"
    },
    {
        "id": 1053,
        "title": "1053. Previous Permutation With One Swap",
        "description": "Given an array of positive integers arr (not necessarily distinct), return the lexicographically largest permutation that is smaller than arr, that can be made with exactly one swap (A swap exchanges the positions of two numbers arr[i] and arr[j]). If it cannot be done, then return the same array.",
        "exampleInputs1": "arr = [3,2,1]",
        "exampleOutputs1": "[3,1,2]",
        "exampleInputs2": "arr = [1,1,5]",
        "exampleOutputs2": "[1,1,5]",
        "exampleInputs3": "arr = [1,9,4,6,7]",
        "exampleOutputs3": "[1,7,4,6,9]",
        "exampleInputs4": "arr = [3,1,1,3]",
        "exampleOutputs4": "[1,3,1,3]"
    },
    {
        "id": 1054,
        "title": "1054. Distant Barcodes",
        "description": "In a warehouse, there is a row of barcodes, where the ith barcode is barcodes[i].",
        "exampleInputs1": "barcodes = [1,1,1,2,2,2]",
        "exampleOutputs1": "[2,1,2,1,2,1]",
        "exampleInputs2": "barcodes = [1,1,1,1,2,2,3,3]",
        "exampleOutputs2": "[1,3,1,3,1,2,1,2]"
    },
    {
        "id": 1072,
        "title": "1072. Flip Columns For Maximum Number of Equal Rows",
        "description": "You are given an m x n binary matrix matrix.",
        "exampleInputs1": "matrix = [[0,1],[1,1]]",
        "exampleOutputs1": "1",
        "exampleInputs2": "matrix = [[0,1],[1,0]]",
        "exampleOutputs2": "2",
        "exampleInputs3": "matrix = [[0,0,0],[0,0,1],[1,1,0]]",
        "exampleOutputs3": "2"
    },
    {
        "id": 1073,
        "title": "1073. Adding Two Negabinary Numbers",
        "description": "Given two numbers arr1 and arr2 in base -2, return the result of adding them together.",
        "exampleInputs1": "arr1 = [1,1,1,1,1], arr2 = [1,0,1]",
        "exampleOutputs1": "[1,0,0,0,0]",
        "exampleInputs2": "arr1 = [0], arr2 = [0]",
        "exampleOutputs2": "[0]",
        "exampleInputs3": "arr1 = [0], arr2 = [1]",
        "exampleOutputs3": "[1]"
    },
    {
        "id": 1079,
        "title": "1079. Letter Tile Possibilities",
        "description": "You have n  tiles, where each tile has one letter tiles[i] printed on it.",
        "exampleInputs1": "tiles = \"AAB\"",
        "exampleOutputs1": "8",
        "exampleInputs2": "tiles = \"AAABBC\"",
        "exampleOutputs2": "188",
        "exampleInputs3": "tiles = \"V\"",
        "exampleOutputs3": "1"
    },
    {
        "id": 1080,
        "title": "1080. Insufficient Nodes in Root to Leaf Paths",
        "description": "Given the root of a binary tree and an integer limit, delete all insufficient nodes in the tree simultaneously, and return the root of the resulting binary tree.",
        "exampleInputs1": "root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1",
        "exampleOutputs1": "[1,2,3,4,null,null,7,8,9,null,14]",
        "exampleInputs2": "root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22",
        "exampleOutputs2": "[5,4,8,11,null,17,4,7,null,null,null,5]",
        "exampleInputs3": "root = [1,2,-3,-5,null,4,null], limit = -1",
        "exampleOutputs3": "[1,null,-3,4]"
    },
    {
        "id": 1081,
        "title": "1081. Smallest Subsequence of Distinct Characters",
        "description": "Return the lexicographically smallest subsequence of s that contains all the distinct characters of s exactly once.",
        "exampleInputs1": "s = \"bcabc\"",
        "exampleOutputs1": "\"abc\"",
        "exampleInputs2": "s = \"cbacdcbc\"",
        "exampleOutputs2": "\"acdb\""
    },
    {
        "id": 1090,
        "title": "1090. Largest Values From Labels",
        "description": "There is a set of n items. You are given two integer arrays values and labels where the value and the label of the ith element are values[i] and labels[i] respectively. You are also given two integers numWanted and useLimit.",
        "exampleInputs1": "values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1",
        "exampleOutputs1": "9",
        "exampleInputs2": "values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2",
        "exampleOutputs2": "12",
        "exampleInputs3": "values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1",
        "exampleOutputs3": "16",
        "exampleInputs4": "values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 2",
        "exampleOutputs4": "24"
    },
    {
        "id": 1091,
        "title": "1091. Shortest Path in Binary Matrix",
        "description": "Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.",
        "exampleInputs1": "grid = [[0,1],[1,0]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "grid = [[0,0,0],[1,1,0],[1,1,0]]",
        "exampleOutputs2": "4",
        "exampleInputs3": "grid = [[1,0,0],[1,1,0],[1,1,0]]",
        "exampleOutputs3": "-1"
    },
    {
        "id": 1093,
        "title": "1093. Statistics from a Large Sample",
        "description": "You are given a large sample of integers in the range [0, 255]. Since the sample is so large, it is represented by an array count where count[k] is the number of times that k appears in the sample.",
        "exampleInputs1": "count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "exampleOutputs1": "[1.00000,3.00000,2.37500,2.50000,3.00000]",
        "exampleInputs2": "count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "exampleOutputs2": "[1.00000,4.00000,2.18182,2.00000,1.00000]"
    },
    {
        "id": 1094,
        "title": "1094. Car Pooling",
        "description": "There is a car with capacity empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).",
        "exampleInputs1": "trips = [[2,1,5],[3,3,7]], capacity = 4",
        "exampleOutputs1": "false",
        "exampleInputs2": "trips = [[2,1,5],[3,3,7]], capacity = 5",
        "exampleOutputs2": "true",
        "exampleInputs3": "trips = [[2,1,5],[3,5,7]], capacity = 3",
        "exampleOutputs3": "true",
        "exampleInputs4": "trips = [[3,2,7],[3,7,9],[8,3,9]], capacity = 11",
        "exampleOutputs4": "true"
    },
    {
        "id": 1104,
        "title": "1104. Path In Zigzag Labelled Binary Tree",
        "description": "In an infinite binary tree where every node has two children, the nodes are labelled in row order.",
        "exampleInputs1": "label = 14",
        "exampleOutputs1": "[1,3,4,14]",
        "exampleInputs2": "label = 26",
        "exampleOutputs2": "[1,2,6,10,26]"
    },
    {
        "id": 1105,
        "title": "1105. Filling Bookcase Shelves",
        "description": "You are given an array books where books[i] = [thicknessi, heighti] indicates the thickness and height of the ith book. You are also given an integer shelfWidth.",
        "exampleInputs1": "books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4",
        "exampleOutputs1": "6",
        "exampleInputs2": "books = [[1,3],[2,4],[3,2]], shelfWidth = 6",
        "exampleOutputs2": "4"
    },
    {
        "id": 1109,
        "title": "1109. Corporate Flight Bookings",
        "description": "There are n flights that are labeled from 1 to n.",
        "exampleInputs1": "bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5",
        "exampleOutputs1": "[10,55,45,25,25]",
        "exampleInputs2": "bookings = [[1,2,10],[2,2,15]], n = 2",
        "exampleOutputs2": "[10,25]"
    },
    {
        "id": 1110,
        "title": "1110. Delete Nodes And Return Forest",
        "description": "Given the root of a binary tree, each node in the tree has a distinct value.",
        "exampleInputs1": "root = [1,2,3,4,5,6,7], to_delete = [3,5]",
        "exampleOutputs1": "[[1,2,null,4],[6],[7]]",
        "exampleInputs2": "root = [1,2,4,null,3], to_delete = [3]",
        "exampleOutputs2": "[[1,2,4]]"
    },
    {
        "id": 1111,
        "title": "1111. Maximum Nesting Depth of Two Valid Parentheses Strings",
        "description": "A string is a valid parentheses string (denoted VPS) if and only if it consists of \"(\" and \")\" characters only, and:",
        "exampleInputs1": "seq = \"(()())\"",
        "exampleOutputs1": "[0,1,1,1,1,0]",
        "exampleInputs2": "seq = \"()(())()\"",
        "exampleOutputs2": "[0,0,0,1,1,0,1,1]"
    },
    {
        "id": 1123,
        "title": "1123. Lowest Common Ancestor of Deepest Leaves",
        "description": "Given the root of a binary tree, return the lowest common ancestor of its deepest leaves.",
        "exampleInputs1": "root = [3,5,1,6,2,0,8,null,null,7,4]",
        "exampleOutputs1": "[2,7,4]",
        "exampleInputs2": "root = [1]",
        "exampleOutputs2": "[1]",
        "exampleInputs3": "root = [0,1,3,null,2]",
        "exampleOutputs3": "[2]"
    },
    {
        "id": 1124,
        "title": "1124. Longest Well-Performing Interval",
        "description": "We are given hours, a list of the number of hours worked per day for a given employee.",
        "exampleInputs1": "hours = [9,9,6,0,6,6,9]",
        "exampleOutputs1": "3",
        "exampleInputs2": "hours = [6,6,6]",
        "exampleOutputs2": "0"
    },
    {
        "id": 1129,
        "title": "1129. Shortest Path with Alternating Colors",
        "description": "Consider a directed graph, with nodes labelled 0, 1, ..., n-1.  In this graph, each edge is either red or blue, and there could be self-edges or parallel edges.",
        "exampleInputs1": "n = 3, red_edges = [[0,1],[1,2]], blue_edges = []",
        "exampleOutputs1": "[0,1,-1]",
        "exampleInputs2": "n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]",
        "exampleOutputs2": "[0,1,-1]",
        "exampleInputs3": "n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]",
        "exampleOutputs3": "[0,-1,-1]",
        "exampleInputs4": "n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]",
        "exampleOutputs4": "[0,1,2]",
        "exampleInputs5": "n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]",
        "exampleOutputs5": "[0,1,1]"
    },
    {
        "id": 1130,
        "title": "1130. Minimum Cost Tree From Leaf Values",
        "description": "Given an array arr of positive integers, consider all binary trees such that:",
        "exampleInputs1": "arr = [6,2,4]",
        "exampleOutputs1": "32",
        "exampleInputs2": "arr = [4,11]",
        "exampleOutputs2": "44"
    },
    {
        "id": 1131,
        "title": "1131. Maximum of Absolute Value Expression",
        "description": "Given two arrays of integers with equal lengths, return the maximum value of:",
        "exampleInputs1": "arr1 = [1,2,3,4], arr2 = [-1,4,5,6]",
        "exampleOutputs1": "13",
        "exampleInputs2": "arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]",
        "exampleOutputs2": "20"
    },
    {
        "id": 1138,
        "title": "1138. Alphabet Board Path",
        "description": "On an alphabet board, we start at position (0, 0), corresponding to character board[0][0].",
        "exampleInputs1": "target = \"leet\"",
        "exampleOutputs1": "\"DDR!UURRR!!DDD!\"",
        "exampleInputs2": "target = \"code\"",
        "exampleOutputs2": "\"RR!DDRR!UUL!R!\""
    },
    {
        "id": 1139,
        "title": "1139. Largest 1-Bordered Square",
        "description": "Given a 2D grid of 0s and 1s, return the number of elements in the largest square subgrid that has all 1s on its border, or 0 if such a subgrid doesn't exist in the grid.",
        "exampleInputs1": "grid = [[1,1,1],[1,0,1],[1,1,1]]",
        "exampleOutputs1": "9",
        "exampleInputs2": "grid = [[1,1,0,0]]",
        "exampleOutputs2": "1"
    },
    {
        "id": 1140,
        "title": "1140. Stone Game II",
        "description": "Alice and Bob continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].  The objective of the game is to end with the most stones.",
        "exampleInputs1": "piles = [2,7,9,4,4]",
        "exampleOutputs1": "10",
        "exampleInputs2": "piles = [1,2,3,4,5,100]",
        "exampleOutputs2": "104"
    },
    {
        "id": 1143,
        "title": "1143. Longest Common Subsequence",
        "description": "Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.",
        "exampleInputs1": "text1 = \"abcde\", text2 = \"ace\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "text1 = \"abc\", text2 = \"abc\"",
        "exampleOutputs2": "3",
        "exampleInputs3": "text1 = \"abc\", text2 = \"def\"",
        "exampleOutputs3": "0"
    },
    {
        "id": 1144,
        "title": "1144. Decrease Elements To Make Array Zigzag",
        "description": "Given an array nums of integers, a move consists of choosing any element and decreasing it by 1.",
        "exampleInputs1": "nums = [1,2,3]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [9,6,1,6,2]",
        "exampleOutputs2": "4"
    },
    {
        "id": 1145,
        "title": "1145. Binary Tree Coloring Game",
        "description": "Two players play a turn based game on a binary tree. We are given the root of this binary tree, and the number of nodes n in the tree. n is odd, and each node has a distinct value from 1 to n.",
        "exampleInputs1": "root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3",
        "exampleOutputs1": "true",
        "exampleInputs2": "root = [1,2,3], n = 3, x = 1",
        "exampleOutputs2": "false"
    },
    {
        "id": 1146,
        "title": "1146. Snapshot Array",
        "description": "Implement a SnapshotArray that supports the following interface:",
        "exampleInputs1": "[\"SnapshotArray\",\"set\",\"snap\",\"set\",\"get\"]",
        "exampleOutputs1": "[[3],[0,5],[],[0,6],[0,0]]"
    },
    {
        "id": 1155,
        "title": "1155. Number of Dice Rolls With Target Sum",
        "description": "You have d dice and each die has f faces numbered 1, 2, ..., f.",
        "exampleInputs1": "d = 1, f = 6, target = 3",
        "exampleOutputs1": "1",
        "exampleInputs2": "d = 2, f = 6, target = 7",
        "exampleOutputs2": "6",
        "exampleInputs3": "d = 2, f = 5, target = 10",
        "exampleOutputs3": "1",
        "exampleInputs4": "d = 1, f = 2, target = 3",
        "exampleOutputs4": "0",
        "exampleInputs5": "d = 30, f = 30, target = 500",
        "exampleOutputs5": "222616187"
    },
    {
        "id": 1156,
        "title": "1156. Swap For Longest Repeated Character Substring",
        "description": "Given a string text, we are allowed to swap two of the characters in the string. Find the length of the longest substring with repeated characters.",
        "exampleInputs1": "text = \"ababa\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "text = \"aaabaaa\"",
        "exampleOutputs2": "6",
        "exampleInputs3": "text = \"aaabbaaa\"",
        "exampleOutputs3": "4",
        "exampleInputs4": "text = \"aaaaa\"",
        "exampleOutputs4": "5",
        "exampleInputs5": "text = \"abcdef\"",
        "exampleOutputs5": "1"
    },
    {
        "id": 1161,
        "title": "1161. Maximum Level Sum of a Binary Tree",
        "description": "Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.",
        "exampleInputs1": "root = [1,7,0,7,-8,null,null]",
        "exampleOutputs1": "2",
        "exampleInputs2": "root = [989,null,10250,98693,-89388,null,null,null,-32127]",
        "exampleOutputs2": "2"
    },
    {
        "id": 1162,
        "title": "1162. As Far from Land as Possible",
        "description": "Given an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return -1.",
        "exampleInputs1": "grid = [[1,0,1],[0,0,0],[1,0,1]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "grid = [[1,0,0],[0,0,0],[0,0,0]]",
        "exampleOutputs2": "4"
    },
    {
        "id": 1169,
        "title": "1169. Invalid Transactions",
        "description": "A transaction is possibly invalid if:",
        "exampleInputs1": "transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]",
        "exampleOutputs1": "[\"alice,20,800,mtv\",\"alice,50,100,beijing\"]",
        "exampleInputs2": "transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]",
        "exampleOutputs2": "[\"alice,50,1200,mtv\"]",
        "exampleInputs3": "transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]",
        "exampleOutputs3": "[\"bob,50,1200,mtv\"]"
    },
    {
        "id": 1170,
        "title": "1170. Compare Strings by Frequency of the Smallest Character",
        "description": "Let the function f(s) be the frequency of the lexicographically smallest character in a non-empty string s. For example, if s = \"dcce\" then f(s) = 2 because the lexicographically smallest character is 'c', which has a frequency of 2.",
        "exampleInputs1": "queries = [\"cbd\"], words = [\"zaaaz\"]",
        "exampleOutputs1": "[1]",
        "exampleInputs2": "queries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]",
        "exampleOutputs2": "[1,2]"
    },
    {
        "id": 1171,
        "title": "1171. Remove Zero Sum Consecutive Nodes from Linked List",
        "description": "Given the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to 0 until there are no such sequences.",
        "exampleInputs1": "head = [1,2,-3,3,1]",
        "exampleOutputs1": "[3,1]",
        "exampleInputs2": "head = [1,2,3,-3,4]",
        "exampleOutputs2": "[1,2,4]",
        "exampleInputs3": "head = [1,2,3,-3,-2]",
        "exampleOutputs3": "[1]"
    },
    {
        "id": 1177,
        "title": "1177. Can Make Palindrome from Substring",
        "description": "You are given a string s and array queries where queries[i] = [lefti, righti, ki]. We may rearrange the substring s[lefti...righti] for each query and then choose up to ki of them to replace with any lowercase English letter.",
        "exampleInputs1": "s = \"abcda\", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]",
        "exampleOutputs1": "[true,false,false,true,true]",
        "exampleInputs2": "s = \"lyb\", queries = [[0,1,0],[2,2,1]]",
        "exampleOutputs2": "[false,true]"
    },
    {
        "id": 1186,
        "title": "1186. Maximum Subarray Sum with One Deletion",
        "description": "Given an array of integers, return the maximum sum for a non-empty subarray (contiguous elements) with at most one element deletion. In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible.",
        "exampleInputs1": "arr = [1,-2,0,3]",
        "exampleOutputs1": "4",
        "exampleInputs2": "arr = [1,-2,-2,3]",
        "exampleOutputs2": "3",
        "exampleInputs3": "arr = [-1,-1,-1,-1]",
        "exampleOutputs3": "-1"
    },
    {
        "id": 1190,
        "title": "1190. Reverse Substrings Between Each Pair of Parentheses",
        "description": "You are given a string s that consists of lower case English letters and brackets.",
        "exampleInputs1": "s = \"(abcd)\"",
        "exampleOutputs1": "\"dcba\"",
        "exampleInputs2": "s = \"(u(love)i)\"",
        "exampleOutputs2": "\"iloveu\"",
        "exampleInputs3": "s = \"(ed(et(oc))el)\"",
        "exampleOutputs3": "\"leetcode\"",
        "exampleInputs4": "s = \"a(bcdefghijkl(mno)p)q\"",
        "exampleOutputs4": "\"apmnolkjihgfedcbq\""
    },
    {
        "id": 1191,
        "title": "1191. K-Concatenation Maximum Sum",
        "description": "Given an integer array arr and an integer k, modify the array by repeating it k times.",
        "exampleInputs1": "arr = [1,2], k = 3",
        "exampleOutputs1": "9",
        "exampleInputs2": "arr = [1,-2,1], k = 5",
        "exampleOutputs2": "2",
        "exampleInputs3": "arr = [-1,-2], k = 7",
        "exampleOutputs3": "0"
    },
    {
        "id": 1201,
        "title": "1201. Ugly Number III",
        "description": "An ugly number is a positive integer that is divisible by a, b, or c.",
        "exampleInputs1": "n = 3, a = 2, b = 3, c = 5",
        "exampleOutputs1": "4",
        "exampleInputs2": "n = 4, a = 2, b = 3, c = 4",
        "exampleOutputs2": "6",
        "exampleInputs3": "n = 5, a = 2, b = 11, c = 13",
        "exampleOutputs3": "10",
        "exampleInputs4": "n = 1000000000, a = 2, b = 217983653, c = 336916467",
        "exampleOutputs4": "1999999984"
    },
    {
        "id": 1202,
        "title": "1202. Smallest String With Swaps",
        "description": "You are given a string s, and an array of pairs of indices in the string pairs where pairs[i] = [a, b] indicates 2 indices(0-indexed) of the string.",
        "exampleInputs1": "s = \"dcab\", pairs = [[0,3],[1,2]]",
        "exampleOutputs1": "\"bacd\"",
        "exampleInputs2": "s = \"dcab\", pairs = [[0,3],[1,2],[0,2]]",
        "exampleOutputs2": "\"abcd\"",
        "exampleInputs3": "s = \"cba\", pairs = [[0,1],[1,2]]",
        "exampleOutputs3": "\"abc\""
    },
    {
        "id": 1208,
        "title": "1208. Get Equal Substrings Within Budget",
        "description": "You are given two strings s and t of the same length. You want to change s to t. Changing the i-th character of s to i-th character of t costs |s[i] - t[i]| that is, the absolute difference between the ASCII values of the characters.",
        "exampleInputs1": "s = \"abcd\", t = \"bcdf\", maxCost = 3",
        "exampleOutputs1": "3",
        "exampleInputs2": "s = \"abcd\", t = \"cdef\", maxCost = 3",
        "exampleOutputs2": "1",
        "exampleInputs3": "s = \"abcd\", t = \"acde\", maxCost = 0",
        "exampleOutputs3": "1"
    },
    {
        "id": 1209,
        "title": "1209. Remove All Adjacent Duplicates in String II",
        "description": "You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.",
        "exampleInputs1": "s = \"abcd\", k = 2",
        "exampleOutputs1": "\"abcd\"",
        "exampleInputs2": "s = \"deeedbbcccbdaa\", k = 3",
        "exampleOutputs2": "\"aa\"",
        "exampleInputs3": "s = \"pbbcggttciiippooaais\", k = 2",
        "exampleOutputs3": "\"ps\""
    },
    {
        "id": 1218,
        "title": "1218. Longest Arithmetic Subsequence of Given Difference",
        "description": "Given an integer array arr and an integer difference, return the length of the longest subsequence in arr which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals difference.",
        "exampleInputs1": "arr = [1,2,3,4], difference = 1",
        "exampleOutputs1": "4",
        "exampleInputs2": "arr = [1,3,5,7], difference = 1",
        "exampleOutputs2": "1",
        "exampleInputs3": "arr = [1,5,7,8,5,3,4,2,1], difference = -2",
        "exampleOutputs3": "4"
    },
    {
        "id": 1219,
        "title": "1219. Path with Maximum Gold",
        "description": "In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.",
        "exampleInputs1": "grid = [[0,6,0],[5,8,7],[0,9,0]]",
        "exampleOutputs1": "24",
        "exampleInputs2": "grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]",
        "exampleOutputs2": "28"
    },
    {
        "id": 1222,
        "title": "1222. Queens That Can Attack the King",
        "description": "On an 8x8 chessboard, there can be multiple Black Queens and one White King.",
        "exampleInputs1": "queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]",
        "exampleOutputs1": "[[0,1],[1,0],[3,3]]",
        "exampleInputs2": "queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]",
        "exampleOutputs2": "[[2,2],[3,4],[4,4]]",
        "exampleInputs3": "queens = [[5,6],[7,7],[2,1],[0,7],[1,6],[5,1],[3,7],[0,3],[4,0],[1,2],[6,3],[5,0],[0,4],[2,2],[1,1],[6,4],[5,4],[0,0],[2,6],[4,5],[5,2],[1,4],[7,5],[2,3],[0,5],[4,2],[1,0],[2,7],[0,1],[4,6],[6,1],[0,6],[4,3],[1,7]], king = [3,4]",
        "exampleOutputs3": "[[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]"
    },
    {
        "id": 1227,
        "title": "1227. Airplane Seat Assignment Probability",
        "description": "n passengers board an airplane with exactly n seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of passengers will:",
        "exampleInputs1": "n = 1",
        "exampleOutputs1": "1.00000",
        "exampleInputs2": "n = 2",
        "exampleOutputs2": "0.50000"
    },
    {
        "id": 1233,
        "title": "1233. Remove Sub-Folders from the Filesystem",
        "description": "Given a list of folders, remove all sub-folders in those folders and return in any order the folders after removing.",
        "exampleInputs1": "folder = [\"/a\",\"/a/b\",\"/c/d\",\"/c/d/e\",\"/c/f\"]",
        "exampleOutputs1": "[\"/a\",\"/c/d\",\"/c/f\"]",
        "exampleInputs2": "folder = [\"/a\",\"/a/b/c\",\"/a/b/d\"]",
        "exampleOutputs2": "[\"/a\"]",
        "exampleInputs3": "folder = [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]",
        "exampleOutputs3": "[\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]"
    },
    {
        "id": 1234,
        "title": "1234. Replace the Substring for Balanced String",
        "description": "You are given a string containing only 4 kinds of characters 'Q', 'W', 'E' and 'R'.",
        "exampleInputs1": "s = \"QWER\"",
        "exampleOutputs1": "0",
        "exampleInputs2": "s = \"QQWE\"",
        "exampleOutputs2": "1",
        "exampleInputs3": "s = \"QQQW\"",
        "exampleOutputs3": "2",
        "exampleInputs4": "s = \"QQQQ\"",
        "exampleOutputs4": "3"
    },
    {
        "id": 1237,
        "title": "1237. Find Positive Integer Solution for a Given Equation",
        "description": "Given a callable function f(x, y) with a hidden formula and a value z, reverse engineer the formula and return all positive integer pairs x and y where f(x,y) == z. You may return the pairs in any order.",
        "exampleInputs1": "interface CustomFunction {",
        "exampleOutputs1": "public:",
        "exampleInputs2": "function_id = 1, z = 5",
        "exampleOutputs2": "[[1,4],[2,3],[3,2],[4,1]]",
        "exampleInputs3": "function_id = 2, z = 5",
        "exampleOutputs3": "[[1,5],[5,1]]"
    },
    {
        "id": 1238,
        "title": "1238. Circular Permutation in Binary Representation",
        "description": "Given 2 integers n and start. Your task is return any permutation p of (0,1,2.....,2^n -1) such that :",
        "exampleInputs1": "n = 2, start = 3",
        "exampleOutputs1": "[3,2,0,1]",
        "exampleInputs2": "n = 3, start = 2",
        "exampleOutputs2": "[2,6,7,5,4,0,1,3]"
    },
    {
        "id": 1239,
        "title": "1239. Maximum Length of a Concatenated String with Unique Characters",
        "description": "Given an array of strings arr. String s is a concatenation of a sub-sequence of arr which have unique characters.",
        "exampleInputs1": "arr = [\"un\",\"iq\",\"ue\"]",
        "exampleOutputs1": "4",
        "exampleInputs2": "arr = [\"cha\",\"r\",\"act\",\"ers\"]",
        "exampleOutputs2": "6",
        "exampleInputs3": "arr = [\"abcdefghijklmnopqrstuvwxyz\"]",
        "exampleOutputs3": "26"
    },
    {
        "id": 1247,
        "title": "1247. Minimum Swaps to Make Strings Equal",
        "description": "You are given two strings s1 and s2 of equal length consisting of letters \"x\" and \"y\" only. Your task is to make these two strings equal to each other. You can swap any two characters that belong to different strings, which means: swap s1[i] and s2[j].",
        "exampleInputs1": "s1 = \"xx\", s2 = \"yy\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "s1 = \"xy\", s2 = \"yx\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "s1 = \"xx\", s2 = \"xy\"",
        "exampleOutputs3": "-1",
        "exampleInputs4": "s1 = \"xxyyxyxyxx\", s2 = \"xyyxyxxxyx\"",
        "exampleOutputs4": "4"
    },
    {
        "id": 1248,
        "title": "1248. Count Number of Nice Subarrays",
        "description": "Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.",
        "exampleInputs1": "nums = [1,1,2,1,1], k = 3",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [2,4,6], k = 1",
        "exampleOutputs2": "0",
        "exampleInputs3": "nums = [2,2,2,1,2,2,1,2,2,2], k = 2",
        "exampleOutputs3": "16"
    },
    {
        "id": 1249,
        "title": "1249. Minimum Remove to Make Valid Parentheses",
        "description": "Given a string s of '(' , ')' and lowercase English characters.",
        "exampleInputs1": "s = \"lee(t(c)o)de)\"",
        "exampleOutputs1": "\"lee(t(c)o)de\"",
        "exampleInputs2": "s = \"a)b(c)d\"",
        "exampleOutputs2": "\"ab(c)d\"",
        "exampleInputs3": "s = \"))((\"",
        "exampleOutputs3": "\"\"",
        "exampleInputs4": "s = \"(a(b(c)d)\"",
        "exampleOutputs4": "\"a(b(c)d)\""
    },
    {
        "id": 1253,
        "title": "1253. Reconstruct a 2-Row Binary Matrix",
        "description": "Given the following details of a matrix with n columns and 2 rows :",
        "exampleInputs1": "upper = 2, lower = 1, colsum = [1,1,1]",
        "exampleOutputs1": "[[1,1,0],[0,0,1]]",
        "exampleInputs2": "upper = 2, lower = 3, colsum = [2,2,1,1]",
        "exampleOutputs2": "[]",
        "exampleInputs3": "upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]",
        "exampleOutputs3": "[[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]"
    },
    {
        "id": 1254,
        "title": "1254. Number of Closed Islands",
        "description": "Given a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.",
        "exampleInputs1": "grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]",
        "exampleOutputs2": "1",
        "exampleInputs3": "grid = [[1,1,1,1,1,1,1],",
        "exampleOutputs3": "[1,0,0,0,0,0,1],"
    },
    {
        "id": 1261,
        "title": "1261. Find Elements in a Contaminated Binary Tree",
        "description": "Given a binary tree with the following rules:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"FindElements\",\"find\",\"find\"]",
        "exampleInputs2": "Input",
        "exampleOutputs2": "[\"FindElements\",\"find\",\"find\",\"find\"]",
        "exampleInputs3": "Input",
        "exampleOutputs3": "[\"FindElements\",\"find\",\"find\",\"find\",\"find\"]"
    },
    {
        "id": 1262,
        "title": "1262. Greatest Sum Divisible by Three",
        "description": "Given an array nums of integers, we need to find the maximum possible sum of elements of the array such that it is divisible by three.",
        "exampleInputs1": "nums = [3,6,5,1,8]",
        "exampleOutputs1": "18",
        "exampleInputs2": "nums = [4]",
        "exampleOutputs2": "0",
        "exampleInputs3": "nums = [1,2,3,4,4]",
        "exampleOutputs3": "12"
    },
    {
        "id": 1267,
        "title": "1267. Count Servers that Communicate",
        "description": "You are given a map of a server center, represented as a m * n integer matrix grid, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.\n\nReturn the number of servers that communicate with any other server.",
        "exampleInputs1": "grid = [[1,0],[0,1]]",
        "exampleOutputs1": "0",
        "exampleInputs2": "grid = [[1,0],[1,1]]",
        "exampleOutputs2": "3",
        "exampleInputs3": "grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]",
        "exampleOutputs3": "4"
    },
    {
        "id": 1268,
        "title": "1268. Search Suggestions System",
        "description": "Given an array of strings products and a string searchWord. We want to design a system that suggests at most three product names from products after each character of searchWord is typed. Suggested products should have common prefix with the searchWord. If there are more than three products with a common prefix return the three lexicographically minimums products.",
        "exampleInputs1": "products = [\"mobile\",\"mouse\",\"moneypot\",\"monitor\",\"mousepad\"], searchWord = \"mouse\"",
        "exampleOutputs1": "[",
        "exampleInputs2": "products = [\"havana\"], searchWord = \"havana\"",
        "exampleOutputs2": "[[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"]]",
        "exampleInputs3": "products = [\"bags\",\"baggage\",\"banner\",\"box\",\"cloths\"], searchWord = \"bags\"",
        "exampleOutputs3": "[[\"baggage\",\"bags\",\"banner\"],[\"baggage\",\"bags\",\"banner\"],[\"baggage\",\"bags\"],[\"bags\"]]",
        "exampleInputs4": "products = [\"havana\"], searchWord = \"tatiana\"",
        "exampleOutputs4": "[[],[],[],[],[],[],[]]"
    },
    {
        "id": 1276,
        "title": "1276. Number of Burgers with No Waste of Ingredients",
        "description": "Given two integers tomatoSlices and cheeseSlices. The ingredients of different burgers are as follows:",
        "exampleInputs1": "tomatoSlices = 16, cheeseSlices = 7",
        "exampleOutputs1": "[1,6]",
        "exampleInputs2": "tomatoSlices = 17, cheeseSlices = 4",
        "exampleOutputs2": "[]",
        "exampleInputs3": "tomatoSlices = 4, cheeseSlices = 17",
        "exampleOutputs3": "[]",
        "exampleInputs4": "tomatoSlices = 0, cheeseSlices = 0",
        "exampleOutputs4": "[0,0]",
        "exampleInputs5": "tomatoSlices = 2, cheeseSlices = 1",
        "exampleOutputs5": "[0,1]"
    },
    {
        "id": 1277,
        "title": "1277. Count Square Submatrices with All Ones",
        "description": "Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.",
        "exampleInputs1": "matrix =",
        "exampleOutputs1": "[",
        "exampleInputs2": "matrix =",
        "exampleOutputs2": "["
    },
    {
        "id": 1282,
        "title": "1282. Group the People Given the Group Size They Belong To",
        "description": "There are n people that are split into some unknown number of groups. Each person is labeled with a unique ID from 0 to n - 1.",
        "exampleInputs1": "groupSizes = [3,3,3,3,3,1,3]",
        "exampleOutputs1": "[[5],[0,1,2],[3,4,6]]",
        "exampleInputs2": "groupSizes = [2,1,3,3,3,2]",
        "exampleOutputs2": "[[1],[0,5],[2,3,4]]"
    },
    {
        "id": 1283,
        "title": "1283. Find the Smallest Divisor Given a Threshold",
        "description": "Given an array of integers nums and an integer threshold, we will choose a positive integer divisor, divide all the array by it, and sum the division's result. Find the smallest divisor such that the result mentioned above is less than or equal to threshold.",
        "exampleInputs1": "nums = [1,2,5,9], threshold = 6",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [44,22,33,11,1], threshold = 5",
        "exampleOutputs2": "44",
        "exampleInputs3": "nums = [21212,10101,12121], threshold = 1000000",
        "exampleOutputs3": "1",
        "exampleInputs4": "nums = [2,3,5,7,11], threshold = 11",
        "exampleOutputs4": "3"
    },
    {
        "id": 1286,
        "title": "1286. Iterator for Combination",
        "description": "Design the CombinationIterator class:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"CombinationIterator\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]"
    },
    {
        "id": 1288,
        "title": "1288. Remove Covered Intervals",
        "description": "Given an array intervals where intervals[i] = [li, ri] represent the interval [li, ri), remove all intervals that are covered by another interval in the list.",
        "exampleInputs1": "intervals = [[1,4],[3,6],[2,8]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "intervals = [[1,4],[2,3]]",
        "exampleOutputs2": "1",
        "exampleInputs3": "intervals = [[0,10],[5,12]]",
        "exampleOutputs3": "2",
        "exampleInputs4": "intervals = [[3,10],[4,10],[5,11]]",
        "exampleOutputs4": "2",
        "exampleInputs5": "intervals = [[1,2],[1,4],[3,4]]",
        "exampleOutputs5": "1"
    },
    {
        "id": 1291,
        "title": "1291. Sequential Digits",
        "description": "An integer has sequential digits if and only if each digit in the number is one more than the previous digit.",
        "exampleInputs1": "low = 100, high = 300",
        "exampleOutputs1": "[123,234]",
        "exampleInputs2": "low = 1000, high = 13000",
        "exampleOutputs2": "[1234,2345,3456,4567,5678,6789,12345]"
    },
    {
        "id": 1292,
        "title": "1292. Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
        "description": "Given a m x n matrix mat and an integer threshold. Return the maximum side-length of a square with a sum less than or equal to threshold or return 0 if there is no such square.",
        "exampleInputs1": "mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4",
        "exampleOutputs1": "2",
        "exampleInputs2": "mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1",
        "exampleOutputs2": "0",
        "exampleInputs3": "mat = [[1,1,1,1],[1,0,0,0],[1,0,0,0],[1,0,0,0]], threshold = 6",
        "exampleOutputs3": "3",
        "exampleInputs4": "mat = [[18,70],[61,1],[25,85],[14,40],[11,96],[97,96],[63,45]], threshold = 40184",
        "exampleOutputs4": "2"
    },
    {
        "id": 1296,
        "title": "1296. Divide Array in Sets of K Consecutive Numbers",
        "description": "Given an array of integers nums and a positive integer k, find whether it is possible to divide this array into sets of k consecutive numbers.",
        "exampleInputs1": "nums = [1,2,3,3,4,4,5,6], k = 4",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3",
        "exampleOutputs2": "true",
        "exampleInputs3": "nums = [3,3,2,2,1,1], k = 3",
        "exampleOutputs3": "true",
        "exampleInputs4": "nums = [1,2,3,4], k = 3",
        "exampleOutputs4": "false"
    },
    {
        "id": 1297,
        "title": "1297. Maximum Number of Occurrences of a Substring",
        "description": "Given a string s, return the maximum number of ocurrences of any substring under the following rules:",
        "exampleInputs1": "s = \"aababcaab\", maxLetters = 2, minSize = 3, maxSize = 4",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"aaaa\", maxLetters = 1, minSize = 3, maxSize = 3",
        "exampleOutputs2": "2",
        "exampleInputs3": "s = \"aabcabcab\", maxLetters = 2, minSize = 2, maxSize = 3",
        "exampleOutputs3": "3",
        "exampleInputs4": "s = \"abcde\", maxLetters = 2, minSize = 3, maxSize = 3",
        "exampleOutputs4": "0"
    },
    {
        "id": 1300,
        "title": "1300. Sum of Mutated Array Closest to Target",
        "description": "Given an integer array arr and a target value target, return the integer value such that when we change all the integers larger than value in the given array to be equal to value, the sum of the array gets as close as possible (in absolute difference) to target.",
        "exampleInputs1": "arr = [4,9,3], target = 10",
        "exampleOutputs1": "3",
        "exampleInputs2": "arr = [2,3,5], target = 10",
        "exampleOutputs2": "5",
        "exampleInputs3": "arr = [60864,25176,27249,21296,20204], target = 56803",
        "exampleOutputs3": "11361"
    },
    {
        "id": 1302,
        "title": "1302. Deepest Leaves Sum",
        "description": "",
        "exampleInputs1": "root = [1,2,3,4,5,null,6,7,null,null,null,null,8]",
        "exampleOutputs1": "15",
        "exampleInputs2": "root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]",
        "exampleOutputs2": "19"
    },
    {
        "id": 1305,
        "title": "1305. All Elements in Two Binary Search Trees",
        "description": "Given two binary search trees root1 and root2.",
        "exampleInputs1": "root1 = [2,1,4], root2 = [1,0,3]",
        "exampleOutputs1": "[0,1,1,2,3,4]",
        "exampleInputs2": "root1 = [0,-10,10], root2 = [5,1,7,0,2]",
        "exampleOutputs2": "[-10,0,0,1,2,5,7,10]",
        "exampleInputs3": "root1 = [], root2 = [5,1,7,0,2]",
        "exampleOutputs3": "[0,1,2,5,7]",
        "exampleInputs4": "root1 = [0,-10,10], root2 = []",
        "exampleOutputs4": "[-10,0,10]",
        "exampleInputs5": "root1 = [1,null,8], root2 = [8,1]",
        "exampleOutputs5": "[1,1,8,8]"
    },
    {
        "id": 1306,
        "title": "1306. Jump Game III",
        "description": "Given an array of non-negative integers arr, you are initially positioned at start index of the array. When you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach to any index with value 0.",
        "exampleInputs1": "arr = [4,2,3,0,3,1,2], start = 5",
        "exampleOutputs1": "true",
        "exampleInputs2": "arr = [4,2,3,0,3,1,2], start = 0",
        "exampleOutputs2": "true",
        "exampleInputs3": "arr = [3,0,2,1,2], start = 2",
        "exampleOutputs3": "false"
    },
    {
        "id": 1310,
        "title": "1310. XOR Queries of a Subarray",
        "description": "",
        "exampleInputs1": "arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]",
        "exampleOutputs1": "[2,7,14,8]",
        "exampleInputs2": "arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]",
        "exampleOutputs2": "[8,0,4,4]"
    },
    {
        "id": 1311,
        "title": "1311. Get Watched Videos by Your Friends",
        "description": "There are n people, each person has a unique id between 0 and n-1. Given the arrays watchedVideos and friends, where watchedVideos[i] and friends[i] contain the list of watched videos and the list of friends respectively for the person with id = i.",
        "exampleInputs1": "watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1",
        "exampleOutputs1": "[\"B\",\"C\"]",
        "exampleInputs2": "watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2",
        "exampleOutputs2": "[\"D\"]"
    },
    {
        "id": 1314,
        "title": "1314. Matrix Block Sum",
        "description": "Given a m x n matrix mat and an integer k, return a matrix answer where each answer[i][j] is the sum of all elements mat[r][c] for:",
        "exampleInputs1": "mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1",
        "exampleOutputs1": "[[12,21,16],[27,45,33],[24,39,28]]",
        "exampleInputs2": "mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2",
        "exampleOutputs2": "[[45,45,45],[45,45,45],[45,45,45]]"
    },
    {
        "id": 1315,
        "title": "1315. Sum of Nodes with Even-Valued Grandparent",
        "description": "Given the root of a binary tree, return the sum of values of nodes with an even-valued grandparent. If there are no nodes with an even-valued grandparent, return 0.",
        "exampleInputs1": "root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]",
        "exampleOutputs1": "18",
        "exampleInputs2": "root = [1]",
        "exampleOutputs2": "0"
    },
    {
        "id": 1318,
        "title": "1318. Minimum Flips to Make a OR b Equal to c",
        "description": "Given 3 positives numbers a, b and c. Return the minimum flips required in some bits of a and b to make ( a OR b == c ). (bitwise OR operation).\nFlip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation.",
        "exampleInputs1": "a = 2, b = 6, c = 5",
        "exampleOutputs1": "3",
        "exampleInputs2": "a = 4, b = 2, c = 7",
        "exampleOutputs2": "1",
        "exampleInputs3": "a = 1, b = 2, c = 3",
        "exampleOutputs3": "0"
    },
    {
        "id": 1319,
        "title": "1319. Number of Operations to Make Network Connected",
        "description": "Given a string s. Return all the words vertically in the same order in which they appear in s.\nWords are returned as a list of strings, complete with spaces when is necessary. (Trailing spaces are not allowed).\nEach word would be put on only one column and that in one column there will be only one word.",
        "exampleInputs1": "s = \"HOW ARE YOU\"",
        "exampleOutputs1": "[\"HAY\",\"ORO\",\"WEU\"]",
        "exampleInputs2": "s = \"TO BE OR NOT TO BE\"",
        "exampleOutputs2": "[\"TBONTB\",\"OEROOE\",\"   T\"]",
        "exampleInputs3": "s = \"CONTEST IS COMING\"",
        "exampleOutputs3": "[\"CIC\",\"OSO\",\"N M\",\"T I\",\"E N\",\"S G\",\"T\"]"
    },
    {
        "id": 1324,
        "title": "1324. Print Words Vertically",
        "description": "Given a binary tree root and an integer target, delete all the leaf nodes with value target.",
        "exampleInputs1": "root = [1,2,3,2,null,2,4], target = 2",
        "exampleOutputs1": "[1,null,3,null,4]",
        "exampleInputs2": "root = [1,3,3,3,2], target = 3",
        "exampleOutputs2": "[1,3,null,null,2]",
        "exampleInputs3": "root = [1,2,null,2,null,2], target = 2",
        "exampleOutputs3": "[1]",
        "exampleInputs4": "root = [1,1,1], target = 1",
        "exampleOutputs4": "[]",
        "exampleInputs5": "root = [1,2,3], target = 1",
        "exampleOutputs5": "[1,2,3]"
    },
    {
        "id": 1325,
        "title": "1325. Delete Leaves With a Given Value",
        "description": "Given a palindromic string of lowercase English letters palindrome, replace exactly one character with any lowercase English letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible.",
        "exampleInputs1": "palindrome = \"abccba\"",
        "exampleOutputs1": "\"aaccba\"",
        "exampleInputs2": "palindrome = \"a\"",
        "exampleOutputs2": "\"\"",
        "exampleInputs3": "palindrome = \"aa\"",
        "exampleOutputs3": "\"ab\"",
        "exampleInputs4": "palindrome = \"aba\"",
        "exampleOutputs4": "\"abb\""
    },
    {
        "id": 1328,
        "title": "1328. Break a Palindrome",
        "description": "A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2].",
        "exampleInputs1": "mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]",
        "exampleOutputs1": "[[1,1,1,1],[1,2,2,2],[1,2,3,3]]",
        "exampleInputs2": "mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]",
        "exampleOutputs2": "[[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]"
    },
    {
        "id": 1329,
        "title": "1329. Sort the Matrix Diagonally",
        "description": "Given the array restaurants where  restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]. You have to filter the restaurants using three filters.",
        "exampleInputs1": "restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10",
        "exampleOutputs1": "[3,1,5]",
        "exampleInputs2": "restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10",
        "exampleOutputs2": "[4,3,2,1,5]",
        "exampleInputs3": "restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3",
        "exampleOutputs3": "[4,5]"
    },
    {
        "id": 1333,
        "title": "1333. Filter Restaurants by Vegan-Friendly, Price and Distance",
        "description": "There are n cities numbered from 0 to n-1. Given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities fromi and toi, and given the integer distanceThreshold.",
        "exampleInputs1": "n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4",
        "exampleOutputs1": "3",
        "exampleInputs2": "n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2",
        "exampleOutputs2": "0"
    },
    {
        "id": 1334,
        "title": "1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance",
        "description": "You are given an integer array arr. You can choose a set of integers and remove all the occurrences of these integers in the array.",
        "exampleInputs1": "arr = [3,3,3,3,5,5,5,2,2,7]",
        "exampleOutputs1": "2",
        "exampleInputs2": "arr = [7,7,7,7,7,7]",
        "exampleOutputs2": "1",
        "exampleInputs3": "arr = [1,9]",
        "exampleOutputs3": "1",
        "exampleInputs4": "arr = [1000,1000,3,7]",
        "exampleOutputs4": "1",
        "exampleInputs5": "arr = [1,2,3,4,5,6,7,8,9,10]",
        "exampleOutputs5": "5"
    },
    {
        "id": 1338,
        "title": "1338. Reduce Array Size to The Half",
        "description": "Given the root of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized.",
        "exampleInputs1": "root = [1,2,3,4,5,6]",
        "exampleOutputs1": "110",
        "exampleInputs2": "root = [1,null,2,3,4,null,null,5,6]",
        "exampleOutputs2": "90",
        "exampleInputs3": "root = [2,3,9,10,7,8,6,5,4,11,1]",
        "exampleOutputs3": "1025",
        "exampleInputs4": "root = [1,1]",
        "exampleOutputs4": "1"
    },
    {
        "id": 1339,
        "title": "1339. Maximum Product of Splitted Binary Tree",
        "description": "Given an array of integers arr and two integers k and threshold.",
        "exampleInputs1": "arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4",
        "exampleOutputs1": "3",
        "exampleInputs2": "arr = [1,1,1,1,1], k = 1, threshold = 0",
        "exampleOutputs2": "5",
        "exampleInputs3": "arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5",
        "exampleOutputs3": "6",
        "exampleInputs4": "arr = [7,7,7,7,7,7,7], k = 7, threshold = 7",
        "exampleOutputs4": "1",
        "exampleInputs5": "arr = [4,4,4,4], k = 4, threshold = 1",
        "exampleOutputs5": "1"
    },
    {
        "id": 1343,
        "title": "1343. Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
        "description": "Given two numbers, hour and minutes. Return the smaller angle (in degrees) formed between the hour and the minute hand.",
        "exampleInputs1": "hour = 12, minutes = 30",
        "exampleOutputs1": "165",
        "exampleInputs2": "hour = 3, minutes = 30",
        "exampleOutputs2": "75",
        "exampleInputs3": "hour = 3, minutes = 15",
        "exampleOutputs3": "7.5",
        "exampleInputs4": "hour = 4, minutes = 50",
        "exampleOutputs4": "155",
        "exampleInputs5": "hour = 12, minutes = 0",
        "exampleOutputs5": "0"
    },
    {
        "id": 1344,
        "title": "1344. Angle Between Hands of a Clock",
        "description": "Given two equal-size strings s and t. In one step you can choose any character of t and replace it with another character.",
        "exampleInputs1": "s = \"bab\", t = \"aba\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "s = \"leetcode\", t = \"practice\"",
        "exampleOutputs2": "5",
        "exampleInputs3": "s = \"anagram\", t = \"mangaar\"",
        "exampleOutputs3": "0",
        "exampleInputs4": "s = \"xxyyzz\", t = \"xxyyzz\"",
        "exampleOutputs4": "0",
        "exampleInputs5": "s = \"friend\", t = \"family\"",
        "exampleOutputs5": "4"
    },
    {
        "id": 1347,
        "title": "1347. Minimum Number of Steps to Make Two Strings Anagram",
        "description": "A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. These periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day).",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"TweetCounts\",\"recordTweet\",\"recordTweet\",\"recordTweet\",\"getTweetCountsPerFrequency\",\"getTweetCountsPerFrequency\",\"recordTweet\",\"getTweetCountsPerFrequency\"]"
    },
    {
        "id": 1348,
        "title": "1348. Tweet Counts Per Frequency",
        "description": "Design an algorithm that accepts a stream of integers and retrieves the product of the last k integers of the stream.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"ProductOfNumbers\",\"add\",\"add\",\"add\",\"add\",\"add\",\"getProduct\",\"getProduct\",\"getProduct\",\"add\",\"getProduct\"]"
    },
    {
        "id": 1352,
        "title": "1352. Product of the Last K Numbers",
        "description": "Given an array of events where events[i] = [startDayi, endDayi]. Every event i starts at startDayi and ends at endDayi.",
        "exampleInputs1": "events = [[1,2],[2,3],[3,4]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "events= [[1,2],[2,3],[3,4],[1,2]]",
        "exampleOutputs2": "4",
        "exampleInputs3": "events = [[1,4],[4,4],[2,2],[3,4],[1,1]]",
        "exampleOutputs3": "4",
        "exampleInputs4": "events = [[1,100000]]",
        "exampleOutputs4": "1",
        "exampleInputs5": "events = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]]",
        "exampleOutputs5": "7"
    },
    {
        "id": 1353,
        "title": "1353. Maximum Number of Events That Can Be Attended",
        "description": "There is a supermarket that is frequented by many customers. The products sold at the supermarket are represented as two parallel integer arrays products and prices, where the ith product has an ID of products[i] and a price of prices[i].",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"Cashier\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\"]"
    },
    {
        "id": 1357,
        "title": "1357. Apply Discount Every n Orders",
        "description": "Given a string s consisting only of characters a, b and c.",
        "exampleInputs1": "s = \"abcabc\"",
        "exampleOutputs1": "10",
        "exampleInputs2": "s = \"aaacb\"",
        "exampleOutputs2": "3",
        "exampleInputs3": "s = \"abc\"",
        "exampleOutputs3": "1"
    },
    {
        "id": 1358,
        "title": "1358. Number of Substrings Containing All Three Characters",
        "description": "You have n binary tree nodes numbered from 0 to n - 1 where node i has two children leftChild[i] and rightChild[i], return true if and only if all the given nodes form exactly one valid binary tree.",
        "exampleInputs1": "n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]",
        "exampleOutputs1": "true",
        "exampleInputs2": "n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]",
        "exampleOutputs2": "false",
        "exampleInputs3": "n = 2, leftChild = [1,0], rightChild = [-1,-1]",
        "exampleOutputs3": "false",
        "exampleInputs4": "n = 6, leftChild = [1,-1,-1,4,-1,-1], rightChild = [2,-1,-1,5,-1,-1]",
        "exampleOutputs4": "false"
    },
    {
        "id": 1361,
        "title": "1361. Validate Binary Tree Nodes",
        "description": "Given an integer num, find the closest two integers in absolute difference whose product equals num + 1 or num + 2.",
        "exampleInputs1": "num = 8",
        "exampleOutputs1": "[3,3]",
        "exampleInputs2": "num = 123",
        "exampleOutputs2": "[5,25]",
        "exampleInputs3": "num = 999",
        "exampleOutputs3": "[40,25]"
    },
    {
        "id": 1362,
        "title": "1362. Closest Divisors",
        "description": "In a special ranking system, each voter gives a rank from highest to lowest to all teams participated in the competition.",
        "exampleInputs1": "votes = [\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"]",
        "exampleOutputs1": "\"ACB\"",
        "exampleInputs2": "votes = [\"WXYZ\",\"XYZW\"]",
        "exampleOutputs2": "\"XWYZ\"",
        "exampleInputs3": "votes = [\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"]",
        "exampleOutputs3": "\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"",
        "exampleInputs4": "votes = [\"BCA\",\"CAB\",\"CBA\",\"ABC\",\"ACB\",\"BAC\"]",
        "exampleOutputs4": "\"ABC\"",
        "exampleInputs5": "votes = [\"M\",\"M\",\"M\",\"M\"]",
        "exampleOutputs5": "\"M\""
    },
    {
        "id": 1366,
        "title": "1366. Rank Teams by Votes",
        "description": "Given a binary tree root and a linked list with head as the first node.",
        "exampleInputs1": "head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]",
        "exampleOutputs1": "true",
        "exampleInputs2": "head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]",
        "exampleOutputs2": "true",
        "exampleInputs3": "head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]",
        "exampleOutputs3": "false"
    },
    {
        "id": 1367,
        "title": "1367. Linked List in Binary Tree",
        "description": "Given the string s, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.",
        "exampleInputs1": "s = \"eleetminicoworoep\"",
        "exampleOutputs1": "13",
        "exampleInputs2": "s = \"leetcodeisgreat\"",
        "exampleOutputs2": "5",
        "exampleInputs3": "s = \"bcbcbc\"",
        "exampleOutputs3": "6"
    },
    {
        "id": 1371,
        "title": "1371. Find the Longest Substring Containing Vowels in Even Counts",
        "description": "You are given the root of a binary tree.",
        "exampleInputs1": "root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]",
        "exampleOutputs1": "3",
        "exampleInputs2": "root = [1,1,1,null,1,null,null,1,1,null,1]",
        "exampleOutputs2": "4",
        "exampleInputs3": "root = [1]",
        "exampleOutputs3": "0"
    },
    {
        "id": 1372,
        "title": "1372. Longest ZigZag Path in a Binary Tree",
        "description": "There is a room with n bulbs, numbered from 1 to n, arranged in a row from left to right. Initially, all the bulbs are turned off.",
        "exampleInputs1": "light = [2,1,3,5,4]",
        "exampleOutputs1": "3",
        "exampleInputs2": "light = [3,2,4,1,5]",
        "exampleOutputs2": "2",
        "exampleInputs3": "light = [4,1,2,3]",
        "exampleOutputs3": "1",
        "exampleInputs4": "light = [2,1,4,3,6,5]",
        "exampleOutputs4": "3",
        "exampleInputs5": "light = [1,2,3,4,5,6]",
        "exampleOutputs5": "6"
    },
    {
        "id": 1375,
        "title": "1375. Bulb Switcher III",
        "description": "A company has n employees with a unique ID for each employee from 0 to n - 1. The head of the company is the one with headID.",
        "exampleInputs1": "n = 1, headID = 0, manager = [-1], informTime = [0]",
        "exampleOutputs1": "0",
        "exampleInputs2": "n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]",
        "exampleOutputs2": "1",
        "exampleInputs3": "n = 7, headID = 6, manager = [1,2,3,4,5,6,-1], informTime = [0,6,5,4,3,2,1]",
        "exampleOutputs3": "21",
        "exampleInputs4": "n = 15, headID = 0, manager = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6], informTime = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0]",
        "exampleOutputs4": "3",
        "exampleInputs5": "n = 4, headID = 2, manager = [3,3,-1,2], informTime = [0,0,162,914]",
        "exampleOutputs5": "1076"
    },
    {
        "id": 1376,
        "title": "1376. Time Needed to Inform All Employees",
        "description": "Given two binary trees original and cloned and given a reference to a node target in the original tree.",
        "exampleInputs1": "tree = [7,4,3,null,null,6,19], target = 3",
        "exampleOutputs1": "3",
        "exampleInputs2": "tree = [7], target =  7",
        "exampleOutputs2": "7",
        "exampleInputs3": "tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4",
        "exampleOutputs3": "4",
        "exampleInputs4": "tree = [1,2,3,4,5,6,7,8,9,10], target = 5",
        "exampleOutputs4": "5",
        "exampleInputs5": "tree = [1,2,null,3], target = 2",
        "exampleOutputs5": "2"
    },
    {
        "id": 1379,
        "title": "1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
        "description": "Design a stack which supports the following operations.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]"
    },
    {
        "id": 1381,
        "title": "1381. Design a Stack With Increment Operation",
        "description": "Given the root of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them.",
        "exampleInputs1": "root = [1,null,2,null,3,null,4,null,null]",
        "exampleOutputs1": "[2,1,3,null,null,null,4]",
        "exampleInputs2": "root = [2,1,3]",
        "exampleOutputs2": "[2,1,3]"
    },
    {
        "id": 1382,
        "title": "1382. Balance a Binary Search Tree",
        "description": "",
        "exampleInputs1": "n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]",
        "exampleOutputs1": "4",
        "exampleInputs2": "n = 2, reservedSeats = [[2,1],[1,8],[2,6]]",
        "exampleOutputs2": "2",
        "exampleInputs3": "n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]",
        "exampleOutputs3": "4"
    },
    {
        "id": 1386,
        "title": "1386. Cinema Seat Allocation",
        "description": "The power of an integer x is defined as the number of steps needed to transform x into 1 using the following steps:",
        "exampleInputs1": "lo = 12, hi = 15, k = 2",
        "exampleOutputs1": "13",
        "exampleInputs2": "lo = 1, hi = 1, k = 1",
        "exampleOutputs2": "1",
        "exampleInputs3": "lo = 7, hi = 11, k = 4",
        "exampleOutputs3": "7",
        "exampleInputs4": "lo = 10, hi = 20, k = 5",
        "exampleOutputs4": "13",
        "exampleInputs5": "lo = 1, hi = 1000, k = 777",
        "exampleOutputs5": "570"
    },
    {
        "id": 1387,
        "title": "1387. Sort Integers by The Power Value",
        "description": "Given an integer array nums, return the sum of divisors of the integers in that array that have exactly four divisors. If there is no such integer in the array, return 0.",
        "exampleInputs1": "nums = [21,4,7]",
        "exampleOutputs1": "32",
        "exampleInputs2": "nums = [21,21]",
        "exampleOutputs2": "64",
        "exampleInputs3": "nums = [1,2,3,4,5]",
        "exampleOutputs3": "0"
    },
    {
        "id": 1390,
        "title": "1390. Four Divisors",
        "description": "",
        "exampleInputs1": "grid = [[2,4,3],[6,5,2]]",
        "exampleOutputs1": "true",
        "exampleInputs2": "grid = [[1,2,1],[1,2,1]]",
        "exampleOutputs2": "false",
        "exampleInputs3": "grid = [[1,1,2]]",
        "exampleOutputs3": "false",
        "exampleInputs4": "grid = [[1,1,1,1,1,1,3]]",
        "exampleOutputs4": "true",
        "exampleInputs5": "grid = [[2],[2],[2],[2],[2],[2],[6]]",
        "exampleOutputs5": "true"
    },
    {
        "id": 1391,
        "title": "1391. Check if There is a Valid Path in a Grid",
        "description": "There are n soldiers standing in a line. Each soldier is assigned a unique rating value.",
        "exampleInputs1": "rating = [2,5,3,4,1]",
        "exampleOutputs1": "3",
        "exampleInputs2": "rating = [2,1,3]",
        "exampleOutputs2": "0",
        "exampleInputs3": "rating = [1,2,3,4]",
        "exampleOutputs3": "4"
    },
    {
        "id": 1395,
        "title": "1395. Count Number of Teams",
        "description": "An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"UndergroundSystem\",\"checkIn\",\"checkIn\",\"checkIn\",\"checkOut\",\"checkOut\",\"checkOut\",\"getAverageTime\",\"getAverageTime\",\"checkIn\",\"getAverageTime\",\"checkOut\",\"getAverageTime\"]",
        "exampleInputs2": "Input",
        "exampleOutputs2": "[\"UndergroundSystem\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\"]"
    },
    {
        "id": 1396,
        "title": "1396. Design Underground System",
        "description": "Given a string s and an integer k. You should construct k non-empty palindrome strings using all the characters in s.",
        "exampleInputs1": "s = \"annabelle\", k = 2",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"leetcode\", k = 3",
        "exampleOutputs2": "false",
        "exampleInputs3": "s = \"true\", k = 4",
        "exampleOutputs3": "true",
        "exampleInputs4": "s = \"yzyzyzyzyzyzyzy\", k = 2",
        "exampleOutputs4": "true",
        "exampleInputs5": "s = \"cr\", k = 7",
        "exampleOutputs5": "false"
    },
    {
        "id": 1400,
        "title": "1400. Construct K Palindrome Strings",
        "description": "Given a circle represented as (radius, x_center, y_center) and an axis-aligned rectangle represented as (x1, y1, x2, y2), where (x1, y1) are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of the rectangle.",
        "exampleInputs1": "radius = 1, x_center = 0, y_center = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1",
        "exampleOutputs1": "true",
        "exampleInputs2": "radius = 1, x_center = 0, y_center = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1",
        "exampleOutputs2": "true",
        "exampleInputs3": "radius = 1, x_center = 1, y_center = 1, x1 = -3, y1 = -3, x2 = 3, y2 = 3",
        "exampleOutputs3": "true",
        "exampleInputs4": "radius = 1, x_center = 1, y_center = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1",
        "exampleOutputs4": "false"
    },
    {
        "id": 1401,
        "title": "1401. Circle and Rectangle Overlapping",
        "description": "Given the binary representation of an integer as a string s, return the number of steps to reduce it to 1 under the following rules:",
        "exampleInputs1": "s = \"1101\"",
        "exampleOutputs1": "6",
        "exampleInputs2": "s = \"10\"",
        "exampleOutputs2": "1",
        "exampleInputs3": "s = \"1\"",
        "exampleOutputs3": "0"
    },
    {
        "id": 1404,
        "title": "1404. Number of Steps to Reduce a Number in Binary Representation to One",
        "description": "A string is called happy if it does not have any of the strings 'aaa', 'bbb' or 'ccc' as a substring.",
        "exampleInputs1": "a = 1, b = 1, c = 7",
        "exampleOutputs1": "\"ccaccbcc\"",
        "exampleInputs2": "a = 2, b = 2, c = 1",
        "exampleOutputs2": "\"aabbc\"",
        "exampleInputs3": "a = 7, b = 1, c = 0",
        "exampleOutputs3": "\"aabaa\""
    },
    {
        "id": 1405,
        "title": "1405. Longest Happy String",
        "description": "Given the array queries of positive integers between 1 and m, you have to process all queries[i] (from i=0 to i=queries.length-1) according to the following rules:",
        "exampleInputs1": "queries = [3,1,2,1], m = 5",
        "exampleOutputs1": "[2,1,2,1]",
        "exampleInputs2": "queries = [4,1,2,2], m = 4",
        "exampleOutputs2": "[3,1,2,0]",
        "exampleInputs3": "queries = [7,5,5,8,3], m = 8",
        "exampleOutputs3": "[6,5,0,7,5]"
    },
    {
        "id": 1409,
        "title": "1409. Queries on a Permutation With Key",
        "description": "HTML entity parser is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.",
        "exampleInputs1": "text = \"&amp; is an HTML entity but &ambassador; is not.\"",
        "exampleOutputs1": "\"& is an HTML entity but &ambassador; is not.\"",
        "exampleInputs2": "text = \"and I quote: &quot;...&quot;\"",
        "exampleOutputs2": "\"and I quote: \\\"...\\\"\"",
        "exampleInputs3": "text = \"Stay home! Practice on Leetcode :)\"",
        "exampleOutputs3": "\"Stay home! Practice on Leetcode :)\"",
        "exampleInputs4": "text = \"x &gt; y &amp;&amp; x &lt; y is always false\"",
        "exampleOutputs4": "\"x > y && x < y is always false\"",
        "exampleInputs5": "text = \"leetcode.com&frasl;problemset&frasl;all\"",
        "exampleOutputs5": "\"leetcode.com/problemset/all\""
    },
    {
        "id": 1410,
        "title": "1410. HTML Entity Parser",
        "description": "Given an integer k, return the minimum number of Fibonacci numbers whose sum is equal to k. The same Fibonacci number can be used multiple times.",
        "exampleInputs1": "k = 7",
        "exampleOutputs1": "2",
        "exampleInputs2": "k = 10",
        "exampleOutputs2": "2",
        "exampleInputs3": "k = 19",
        "exampleOutputs3": "3"
    },
    {
        "id": 1414,
        "title": "1414. Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
        "description": "A happy string is a string that:",
        "exampleInputs1": "n = 1, k = 3",
        "exampleOutputs1": "\"c\"",
        "exampleInputs2": "n = 1, k = 4",
        "exampleOutputs2": "\"\"",
        "exampleInputs3": "n = 3, k = 9",
        "exampleOutputs3": "\"cab\"",
        "exampleInputs4": "n = 2, k = 7",
        "exampleOutputs4": "\"\"",
        "exampleInputs5": "n = 10, k = 100",
        "exampleOutputs5": "\"abacbabacb\""
    },
    {
        "id": 1415,
        "title": "1415. The k-th Lexicographical String of All Happy Strings of Length n",
        "description": "Given the array orders, which represents the orders that customers have done in a restaurant. More specifically orders[i]=[customerNamei,tableNumberi,foodItemi] where customerNamei is the name of the customer, tableNumberi is the table customer sit at, and foodItemi is the item customer orders.",
        "exampleInputs1": "orders = [[\"David\",\"3\",\"Ceviche\"],[\"Corina\",\"10\",\"Beef Burrito\"],[\"David\",\"3\",\"Fried Chicken\"],[\"Carla\",\"5\",\"Water\"],[\"Carla\",\"5\",\"Ceviche\"],[\"Rous\",\"3\",\"Ceviche\"]]",
        "exampleOutputs1": "[[\"Table\",\"Beef Burrito\",\"Ceviche\",\"Fried Chicken\",\"Water\"],[\"3\",\"0\",\"2\",\"1\",\"0\"],[\"5\",\"0\",\"1\",\"0\",\"1\"],[\"10\",\"1\",\"0\",\"0\",\"0\"]]",
        "exampleInputs2": "orders = [[\"James\",\"12\",\"Fried Chicken\"],[\"Ratesh\",\"12\",\"Fried Chicken\"],[\"Amadeus\",\"12\",\"Fried Chicken\"],[\"Adam\",\"1\",\"Canadian Waffles\"],[\"Brianna\",\"1\",\"Canadian Waffles\"]]",
        "exampleOutputs2": "[[\"Table\",\"Canadian Waffles\",\"Fried Chicken\"],[\"1\",\"2\",\"0\"],[\"12\",\"0\",\"3\"]]",
        "exampleInputs3": "orders = [[\"Laura\",\"2\",\"Bean Burrito\"],[\"Jhon\",\"2\",\"Beef Burrito\"],[\"Melissa\",\"2\",\"Soda\"]]",
        "exampleOutputs3": "[[\"Table\",\"Bean Burrito\",\"Beef Burrito\",\"Soda\"],[\"2\",\"1\",\"1\",\"1\"]]"
    },
    {
        "id": 1418,
        "title": "1418. Display Table of Food Orders in a Restaurant",
        "description": "Given the string croakOfFrogs, which represents a combination of the string \"croak\" from different frogs, that is, multiple frogs can croak at the same time, so multiple “croak” are mixed. Return the minimum number of different frogs to finish all the croak in the given string.",
        "exampleInputs1": "croakOfFrogs = \"croakcroak\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "croakOfFrogs = \"crcoakroak\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "croakOfFrogs = \"croakcrook\"",
        "exampleOutputs3": "-1",
        "exampleInputs4": "croakOfFrogs = \"croakcroa\"",
        "exampleOutputs4": "-1"
    },
    {
        "id": 1419,
        "title": "1419. Minimum Number of Frogs Croaking",
        "description": "There are several cards arranged in a row, and each card has an associated number of points. The points are given in the integer array cardPoints.",
        "exampleInputs1": "cardPoints = [1,2,3,4,5,6,1], k = 3",
        "exampleOutputs1": "12",
        "exampleInputs2": "cardPoints = [2,2,2], k = 2",
        "exampleOutputs2": "4",
        "exampleInputs3": "cardPoints = [9,7,7,9,7,7,9], k = 7",
        "exampleOutputs3": "55",
        "exampleInputs4": "cardPoints = [1,1000,1], k = 1",
        "exampleOutputs4": "1",
        "exampleInputs5": "cardPoints = [1,79,80,1,1,1,200,1], k = 3",
        "exampleOutputs5": "202"
    },
    {
        "id": 1423,
        "title": "1423. Maximum Points You Can Obtain from Cards",
        "description": "",
        "exampleInputs1": "nums = [[1,2,3],[4,5,6],[7,8,9]]",
        "exampleOutputs1": "[1,4,2,7,5,3,8,6,9]",
        "exampleInputs2": "nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]",
        "exampleOutputs2": "[1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]",
        "exampleInputs3": "nums = [[1,2,3],[4],[5,6,7],[8],[9,10,11]]",
        "exampleOutputs3": "[1,4,2,5,3,8,6,9,7,10,11]",
        "exampleInputs4": "nums = [[1,2,3,4,5,6]]",
        "exampleOutputs4": "[1,2,3,4,5,6]"
    },
    {
        "id": 1424,
        "title": "1424. Diagonal Traverse II",
        "description": "You are given an integer num. You will apply the following steps exactly two times:",
        "exampleInputs1": "num = 555",
        "exampleOutputs1": "888",
        "exampleInputs2": "num = 9",
        "exampleOutputs2": "8",
        "exampleInputs3": "num = 123456",
        "exampleOutputs3": "820000",
        "exampleInputs4": "num = 10000",
        "exampleOutputs4": "80000",
        "exampleInputs5": "num = 9288",
        "exampleOutputs5": "8700"
    },
    {
        "id": 1432,
        "title": "1432. Max Difference You Can Get From Changing an Integer",
        "description": "Given two strings: s1 and s2 with the same size, check if some permutation of string s1 can break some permutation of string s2 or vice-versa. In other words s2 can break s1 or vice-versa.",
        "exampleInputs1": "s1 = \"abc\", s2 = \"xya\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s1 = \"abe\", s2 = \"acd\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "s1 = \"leetcodee\", s2 = \"interview\"",
        "exampleOutputs3": "true"
    },
    {
        "id": 1433,
        "title": "1433. Check If a String Can Break Another String",
        "description": "Given an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.",
        "exampleInputs1": "nums = [8,2,4,7], limit = 4",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [10,1,2,4,7,2], limit = 5",
        "exampleOutputs2": "4",
        "exampleInputs3": "nums = [4,2,2,2,4,4,2,2], limit = 0",
        "exampleOutputs3": "3"
    },
    {
        "id": 1438,
        "title": "1438. Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
        "description": "Given an array of integers arr.",
        "exampleInputs1": "arr = [2,3,1,6,7]",
        "exampleOutputs1": "4",
        "exampleInputs2": "arr = [1,1,1,1,1]",
        "exampleOutputs2": "10",
        "exampleInputs3": "arr = [2,3]",
        "exampleOutputs3": "0",
        "exampleInputs4": "arr = [1,3,5,7,9]",
        "exampleOutputs4": "3",
        "exampleInputs5": "arr = [7,11,12,9,5,2,7,17,22]",
        "exampleOutputs5": "8"
    },
    {
        "id": 1442,
        "title": "1442. Count Triplets That Can Form Two Arrays of Equal XOR",
        "description": "Given an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.",
        "exampleInputs1": "n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]",
        "exampleOutputs1": "8",
        "exampleInputs2": "n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]",
        "exampleOutputs2": "6",
        "exampleInputs3": "n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,false,false,false,false,false]",
        "exampleOutputs3": "0"
    },
    {
        "id": 1443,
        "title": "1443. Minimum Time to Collect All Apples in a Tree",
        "description": "Given an integer n, return a list of all simplified fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to n. The fractions can be in any order.",
        "exampleInputs1": "n = 2",
        "exampleOutputs1": "[\"1/2\"]",
        "exampleInputs2": "n = 3",
        "exampleOutputs2": "[\"1/2\",\"1/3\",\"2/3\"]",
        "exampleInputs3": "n = 4",
        "exampleOutputs3": "[\"1/2\",\"1/3\",\"1/4\",\"2/3\",\"3/4\"]",
        "exampleInputs4": "n = 1",
        "exampleOutputs4": "[]"
    },
    {
        "id": 1447,
        "title": "1447. Simplified Fractions",
        "description": "Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.",
        "exampleInputs1": "root = [3,1,4,3,null,1,5]",
        "exampleOutputs1": "4",
        "exampleInputs2": "root = [3,3,null,4,2]",
        "exampleOutputs2": "3",
        "exampleInputs3": "root = [1]",
        "exampleOutputs3": "1"
    },
    {
        "id": 1448,
        "title": "1448. Count Good Nodes in Binary Tree",
        "description": "Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.",
        "exampleInputs1": "root = [3,1,4,3,null,1,5]",
        "exampleOutputs1": "4",
        "exampleInputs2": "root = [3,3,null,4,2]",
        "exampleOutputs2": "3",
        "exampleInputs3": "root = [1]",
        "exampleOutputs3": "1"
    },
    {
        "id": 1448,
        "title": "1448. Count Good Nodes in Binary Tree",
        "description": "Given a sentence text (A sentence is a string of space-separated words) in the following format:",
        "exampleInputs1": "text = \"Leetcode is cool\"",
        "exampleOutputs1": "\"Is cool leetcode\"",
        "exampleInputs2": "text = \"Keep calm and code on\"",
        "exampleOutputs2": "\"On and keep calm code\"",
        "exampleInputs3": "text = \"To be or not to be\"",
        "exampleOutputs3": "\"To be or to be not\""
    },
    {
        "id": 1451,
        "title": "1451. Rearrange Words in a Sentence",
        "description": "Given the array favoriteCompanies where favoriteCompanies[i] is the list of favorites companies for the ith person (indexed from 0).",
        "exampleInputs1": "favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]]",
        "exampleOutputs1": "[0,1,4]",
        "exampleInputs2": "favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"leetcode\",\"amazon\"],[\"facebook\",\"google\"]]",
        "exampleOutputs2": "[0,1]",
        "exampleInputs3": "favoriteCompanies = [[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]]",
        "exampleOutputs3": "[0,1,2,3]"
    },
    {
        "id": 1452,
        "title": "1452. People Whose List of Favorite Companies Is Not a Subset of Another List",
        "description": "Given a string s and an integer k.",
        "exampleInputs1": "s = \"abciiidef\", k = 3",
        "exampleOutputs1": "3",
        "exampleInputs2": "s = \"aeiou\", k = 2",
        "exampleOutputs2": "2",
        "exampleInputs3": "s = \"leetcode\", k = 3",
        "exampleOutputs3": "2",
        "exampleInputs4": "s = \"rhythms\", k = 4",
        "exampleOutputs4": "0",
        "exampleInputs5": "s = \"tryhard\", k = 4",
        "exampleOutputs5": "1"
    },
    {
        "id": 1456,
        "title": "1456. Maximum Number of Vowels in a Substring of Given Length",
        "description": "Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.",
        "exampleInputs1": "root = [2,3,1,3,1,null,1]",
        "exampleOutputs1": "2",
        "exampleInputs2": "root = [2,1,1,1,3,null,null,null,null,null,1]",
        "exampleOutputs2": "1",
        "exampleInputs3": "root = [9]",
        "exampleOutputs3": "1"
    },
    {
        "id": 1457,
        "title": "1457. Pseudo-Palindromic Paths in a Binary Tree",
        "description": "Given a binary string s and an integer k.",
        "exampleInputs1": "s = \"00110110\", k = 2",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"00110\", k = 2",
        "exampleOutputs2": "true",
        "exampleInputs3": "s = \"0110\", k = 1",
        "exampleOutputs3": "true",
        "exampleInputs4": "s = \"0110\", k = 2",
        "exampleOutputs4": "false",
        "exampleInputs5": "s = \"0000000001011100\", k = 4",
        "exampleOutputs5": "false"
    },
    {
        "id": 1461,
        "title": "1461. Check If a String Contains All Binary Codes of Size K",
        "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course ai first if you want to take course bi.",
        "exampleInputs1": "numCourses = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]",
        "exampleOutputs1": "[false,true]",
        "exampleInputs2": "numCourses = 2, prerequisites = [], queries = [[1,0],[0,1]]",
        "exampleOutputs2": "[false,false]",
        "exampleInputs3": "numCourses = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]",
        "exampleOutputs3": "[true,true]"
    },
    {
        "id": 1462,
        "title": "1462. Course Schedule IV",
        "description": "You are given a rectangular cake of size h x w and two arrays of integers horizontalCuts and verticalCuts where:",
        "exampleInputs1": "h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]",
        "exampleOutputs1": "4",
        "exampleInputs2": "h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]",
        "exampleOutputs2": "6",
        "exampleInputs3": "h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]",
        "exampleOutputs3": "9"
    },
    {
        "id": 1465,
        "title": "1465. Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
        "description": "There are n cities numbered from 0 to n - 1 and n - 1 roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.",
        "exampleInputs1": "n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]",
        "exampleOutputs2": "2",
        "exampleInputs3": "n = 3, connections = [[1,0],[2,0]]",
        "exampleOutputs3": "0"
    },
    {
        "id": 1466,
        "title": "1466. Reorder Routes to Make All Paths Lead to the City Zero",
        "description": "Given an array of integers arr and an integer k.",
        "exampleInputs1": "arr = [1,2,3,4,5], k = 2",
        "exampleOutputs1": "[5,1]",
        "exampleInputs2": "arr = [1,1,3,5,5], k = 2",
        "exampleOutputs2": "[5,5]",
        "exampleInputs3": "arr = [6,7,11,7,6,8], k = 5",
        "exampleOutputs3": "[11,8,6,6,7]",
        "exampleInputs4": "arr = [6,-3,7,2,11], k = 3",
        "exampleOutputs4": "[-3,11,2]",
        "exampleInputs5": "arr = [-7,22,17,3], k = 2",
        "exampleOutputs5": "[22,17]"
    },
    {
        "id": 1471,
        "title": "1471. The k Strongest Values in an Array",
        "description": "You have a browser of one tab where you start on the homepage and you can visit another url, get back in the history number of steps or move forward in the history number of steps.",
        "exampleInputs1": "",
        "exampleOutputs1": "[\"BrowserHistory\",\"visit\",\"visit\",\"visit\",\"back\",\"back\",\"forward\",\"visit\",\"forward\",\"back\",\"back\"]"
    },
    {
        "id": 1472,
        "title": "1472. Design Browser History",
        "description": "Implement the class SubrectangleQueries which receives a rows x cols rectangle as a matrix of integers in the constructor and supports two methods:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\"]",
        "exampleInputs2": "Input",
        "exampleOutputs2": "[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\"]"
    },
    {
        "id": 1476,
        "title": "1476. Subrectangle Queries",
        "description": "Given an array of integers arr and an integer target.",
        "exampleInputs1": "arr = [3,2,2,4,3], target = 3",
        "exampleOutputs1": "2",
        "exampleInputs2": "arr = [7,3,4,7], target = 7",
        "exampleOutputs2": "2",
        "exampleInputs3": "arr = [4,3,2,6,2,3,4], target = 6",
        "exampleOutputs3": "-1",
        "exampleInputs4": "arr = [5,5,4,4,5], target = 3",
        "exampleOutputs4": "-1",
        "exampleInputs5": "arr = [3,1,1,1,5,1,2,1], target = 3",
        "exampleOutputs5": "3"
    },
    {
        "id": 1477,
        "title": "1477. Find Two Non-overlapping Sub-arrays Each With Target Sum",
        "description": "Given an array of integers arr and an integer k. Find the least number of unique integers after removing exactly k elements.",
        "exampleInputs1": "arr = [5,5,4], k = 1",
        "exampleOutputs1": "1",
        "exampleInputs2": "arr = [4,3,1,1,3,3,2], k = 3",
        "exampleOutputs2": "2"
    },
    {
        "id": 1481,
        "title": "1481. Least Number of Unique Integers after K Removals",
        "description": "Given an integer array bloomDay, an integer m and an integer k.",
        "exampleInputs1": "bloomDay = [1,10,3,10,2], m = 3, k = 1",
        "exampleOutputs1": "3",
        "exampleInputs2": "bloomDay = [1,10,3,10,2], m = 3, k = 2",
        "exampleOutputs2": "-1",
        "exampleInputs3": "bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3",
        "exampleOutputs3": "12",
        "exampleInputs4": "bloomDay = [1000000000,1000000000], m = 1, k = 1",
        "exampleOutputs4": "1000000000",
        "exampleInputs5": "bloomDay = [1,10,2,9,3,8,4,7,5,6], m = 4, k = 2",
        "exampleOutputs5": "9"
    },
    {
        "id": 1482,
        "title": "1482. Minimum Number of Days to Make m Bouquets",
        "description": "Given an array of strings names of size n. You will create n folders in your file system such that, at the ith minute, you will create a folder with the name names[i].",
        "exampleInputs1": "names = [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]",
        "exampleOutputs1": "[\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]",
        "exampleInputs2": "names = [\"gta\",\"gta(1)\",\"gta\",\"avalon\"]",
        "exampleOutputs2": "[\"gta\",\"gta(1)\",\"gta(2)\",\"avalon\"]",
        "exampleInputs3": "names = [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece\"]",
        "exampleOutputs3": "[\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece(4)\"]",
        "exampleInputs4": "names = [\"wano\",\"wano\",\"wano\",\"wano\"]",
        "exampleOutputs4": "[\"wano\",\"wano(1)\",\"wano(2)\",\"wano(3)\"]",
        "exampleInputs5": "names = [\"kaido\",\"kaido(1)\",\"kaido\",\"kaido(1)\"]",
        "exampleOutputs5": "[\"kaido\",\"kaido(1)\",\"kaido(2)\",\"kaido(1)(1)\"]"
    },
    {
        "id": 1487,
        "title": "1487. Making File Names Unique",
        "description": "Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the nth lake, the nth lake becomes full of water. If it rains over a lake which is full of water, there will be a flood. Your goal is to avoid the flood in any lake.",
        "exampleInputs1": "rains = [1,2,3,4]",
        "exampleOutputs1": "[-1,-1,-1,-1]",
        "exampleInputs2": "rains = [1,2,0,0,2,1]",
        "exampleOutputs2": "[-1,-1,2,1,-1,-1]",
        "exampleInputs3": "rains = [1,2,0,1,2]",
        "exampleOutputs3": "[]",
        "exampleInputs4": "rains = [69,0,0,0,69]",
        "exampleOutputs4": "[-1,69,1,1,-1]",
        "exampleInputs5": "rains = [10,20,20]",
        "exampleOutputs5": "[]"
    },
    {
        "id": 1488,
        "title": "1488. Avoid Flood in The City",
        "description": "Given two positive integers n and k.",
        "exampleInputs1": "n = 12, k = 3",
        "exampleOutputs1": "3",
        "exampleInputs2": "n = 7, k = 2",
        "exampleOutputs2": "7",
        "exampleInputs3": "n = 4, k = 4",
        "exampleOutputs3": "-1",
        "exampleInputs4": "n = 1, k = 1",
        "exampleOutputs4": "1",
        "exampleInputs5": "n = 1000, k = 3",
        "exampleOutputs5": "4"
    },
    {
        "id": 1492,
        "title": "1492. The kth Factor of n",
        "description": "Given a binary array nums, you should delete one element from it.",
        "exampleInputs1": "nums = [1,1,0,1]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [0,1,1,1,0,1,1,0,1]",
        "exampleOutputs2": "5",
        "exampleInputs3": "nums = [1,1,1]",
        "exampleOutputs3": "2",
        "exampleInputs4": "nums = [1,1,0,0,1,1,1,0,1]",
        "exampleOutputs4": "4",
        "exampleInputs5": "nums = [0,0,0]",
        "exampleOutputs5": "0"
    },
    {
        "id": 1493,
        "title": "1493. Longest Subarray of 1's After Deleting One Element",
        "description": "Given an array of integers arr of even length n and an integer k.",
        "exampleInputs1": "arr = [1,2,3,4,5,10,6,7,8,9], k = 5",
        "exampleOutputs1": "true",
        "exampleInputs2": "arr = [1,2,3,4,5,6], k = 7",
        "exampleOutputs2": "true",
        "exampleInputs3": "arr = [1,2,3,4,5,6], k = 10",
        "exampleOutputs3": "false",
        "exampleInputs4": "arr = [-10,10], k = 2",
        "exampleOutputs4": "true",
        "exampleInputs5": "arr = [-1,1,-2,2,-3,3,-4,4], k = 3",
        "exampleOutputs5": "true"
    },
    {
        "id": 1497,
        "title": "1497. Check If Array Pairs Are Divisible by k",
        "description": "Given an array of integers nums and an integer target.",
        "exampleInputs1": "nums = [3,5,6,7], target = 9",
        "exampleOutputs1": "4",
        "exampleInputs2": "nums = [3,3,6,8], target = 10",
        "exampleOutputs2": "6",
        "exampleInputs3": "nums = [2,3,3,4,6,7], target = 12",
        "exampleOutputs3": "61",
        "exampleInputs4": "nums = [5,2,4,1,7,6,8], target = 16",
        "exampleOutputs4": "127"
    },
    {
        "id": 1498,
        "title": "1498. Number of Subsequences That Satisfy the Given Sum Condition",
        "description": "We have a wooden plank of the length n units. Some ants are walking on the plank, each ant moves with speed 1 unit per second. Some of the ants move to the left, the other move to the right.",
        "exampleInputs1": "n = 4, left = [4,3], right = [0,1]",
        "exampleOutputs1": "4",
        "exampleInputs2": "n = 7, left = [], right = [0,1,2,3,4,5,6,7]",
        "exampleOutputs2": "7",
        "exampleInputs3": "n = 7, left = [0,1,2,3,4,5,6,7], right = []",
        "exampleOutputs3": "7",
        "exampleInputs4": "n = 9, left = [5], right = [4]",
        "exampleOutputs4": "5",
        "exampleInputs5": "n = 6, left = [6], right = [0]",
        "exampleOutputs5": "6"
    },
    {
        "id": 1503,
        "title": "1503. Last Moment Before All Ants Fall Out of a Plank",
        "description": "Given a rows * columns matrix mat of ones and zeros, return how many submatrices have all ones.",
        "exampleInputs1": "mat = [[1,0,1],",
        "exampleOutputs1": "[1,1,0],",
        "exampleInputs2": "mat = [[0,1,1,0],",
        "exampleOutputs2": "[0,1,1,1],",
        "exampleInputs3": "mat = [[1,1,1,1,1,1]]",
        "exampleOutputs3": "21",
        "exampleInputs4": "mat = [[1,0,1],[0,1,0],[1,0,1]]",
        "exampleOutputs4": "5"
    },
    {
        "id": 1504,
        "title": "1504. Count Submatrices With All Ones",
        "description": "You are given the array nums consisting of n positive integers. You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers.",
        "exampleInputs1": "nums = [1,2,3,4], n = 4, left = 1, right = 5",
        "exampleOutputs1": "13",
        "exampleInputs2": "nums = [1,2,3,4], n = 4, left = 3, right = 4",
        "exampleOutputs2": "6",
        "exampleInputs3": "nums = [1,2,3,4], n = 4, left = 1, right = 10",
        "exampleOutputs3": "50"
    },
    {
        "id": 1508,
        "title": "1508. Range Sum of Sorted Subarray Sums",
        "description": "Given an array nums, you are allowed to choose one element of nums and change it by any value in one move.",
        "exampleInputs1": "nums = [5,3,2,4]",
        "exampleOutputs1": "0",
        "exampleInputs2": "nums = [1,5,0,10,14]",
        "exampleOutputs2": "1",
        "exampleInputs3": "nums = [6,6,0,1,1,4,6]",
        "exampleOutputs3": "2",
        "exampleInputs4": "nums = [1,5,6,14,15]",
        "exampleOutputs4": "1"
    },
    {
        "id": 1509,
        "title": "1509. Minimum Difference Between Largest and Smallest Value in Three Moves",
        "description": "Given a binary string s (a string consisting only of '0' and '1's).",
        "exampleInputs1": "s = \"0110111\"",
        "exampleOutputs1": "9",
        "exampleInputs2": "s = \"101\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "s = \"111111\"",
        "exampleOutputs3": "21",
        "exampleInputs4": "s = \"000\"",
        "exampleOutputs4": "0"
    },
    {
        "id": 1513,
        "title": "1513. Number of Substrings With Only 1s",
        "description": "You are given an undirected weighted graph of n nodes (0-indexed), represented by an edge list where edges[i] = [a, b] is an undirected edge connecting the nodes a and b with a probability of success of traversing that edge succProb[i].",
        "exampleInputs1": "n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2",
        "exampleOutputs1": "0.25000",
        "exampleInputs2": "n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2",
        "exampleOutputs2": "0.30000",
        "exampleInputs3": "n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2",
        "exampleOutputs3": "0.00000"
    },
    {
        "id": 1514,
        "title": "1514. Path with Maximum Probability",
        "description": "Given a tree (i.e. a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. The root of the tree is the node 0, and each node of the tree has a label which is a lower-case character given in the string labels (i.e. The node with the number i has the label labels[i]).",
        "exampleInputs1": "n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = \"abaedcd\"",
        "exampleOutputs1": "[2,1,1,1,1,1,1]",
        "exampleInputs2": "n = 4, edges = [[0,1],[1,2],[0,3]], labels = \"bbbb\"",
        "exampleOutputs2": "[4,2,1,1]",
        "exampleInputs3": "n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = \"aabab\"",
        "exampleOutputs3": "[3,2,1,1,1]",
        "exampleInputs4": "n = 6, edges = [[0,1],[0,2],[1,3],[3,4],[4,5]], labels = \"cbabaa\"",
        "exampleOutputs4": "[1,2,1,1,2,1]",
        "exampleInputs5": "n = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], labels = \"aaabaaa\"",
        "exampleOutputs5": "[6,5,4,1,3,2,1]"
    },
    {
        "id": 1519,
        "title": "1519. Number of Nodes in the Sub-Tree With the Same Label",
        "description": "Given an array of integers arr, return the number of subarrays with an odd sum.",
        "exampleInputs1": "arr = [1,3,5]",
        "exampleOutputs1": "4",
        "exampleInputs2": "arr = [2,4,6]",
        "exampleOutputs2": "0",
        "exampleInputs3": "arr = [1,2,3,4,5,6,7]",
        "exampleOutputs3": "16"
    },
    {
        "id": 1524,
        "title": "1524. Number of Sub-arrays With Odd Sum",
        "description": "You are given a string s, a split is called good if you can split s into 2 non-empty strings p and q where its concatenation is equal to s and the number of distinct letters in p and q are the same.",
        "exampleInputs1": "s = \"aacaba\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"abcd\"",
        "exampleOutputs2": "1",
        "exampleInputs3": "s = \"aaaaa\"",
        "exampleOutputs3": "4",
        "exampleInputs4": "s = \"acbadbaada\"",
        "exampleOutputs4": "2"
    },
    {
        "id": 1525,
        "title": "1525. Number of Good Ways to Split a String",
        "description": "There is a room with n bulbs, numbered from 0 to n - 1, arranged in a row from left to right. Initially, all the bulbs are turned off.",
        "exampleInputs1": "target = \"10111\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "target = \"101\"",
        "exampleOutputs2": "3",
        "exampleInputs3": "target = \"00000\"",
        "exampleOutputs3": "0",
        "exampleInputs4": "target = \"001011101\"",
        "exampleOutputs4": "5"
    },
    {
        "id": 1529,
        "title": "1529. Bulb Switcher IV",
        "description": "Given the root of a binary tree and an integer distance. A pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to distance.",
        "exampleInputs1": "root = [1,2,3,null,4], distance = 3",
        "exampleOutputs1": "1",
        "exampleInputs2": "root = [1,2,3,4,5,6,7], distance = 3",
        "exampleOutputs2": "2",
        "exampleInputs3": "root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3",
        "exampleOutputs3": "1",
        "exampleInputs4": "root = [100], distance = 1",
        "exampleOutputs4": "0",
        "exampleInputs5": "root = [1,1,1], distance = 2",
        "exampleOutputs5": "1"
    },
    {
        "id": 1530,
        "title": "1530. Number of Good Leaf Nodes Pairs",
        "description": "Given an integer array arr of distinct integers and an integer k.",
        "exampleInputs1": "arr = [2,1,3,5,4,6,7], k = 2",
        "exampleOutputs1": "5",
        "exampleInputs2": "arr = [3,2,1], k = 10",
        "exampleOutputs2": "3",
        "exampleInputs3": "arr = [1,9,8,2,3,7,6,4,5], k = 7",
        "exampleOutputs3": "9",
        "exampleInputs4": "arr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000",
        "exampleOutputs4": "99"
    },
    {
        "id": 1535,
        "title": "1535. Find the Winner of an Array Game",
        "description": "Given an n x n binary grid, in one step you can choose two adjacent rows of the grid and swap them.",
        "exampleInputs1": "grid = [[0,0,1],[1,1,0],[1,0,0]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]",
        "exampleOutputs2": "-1",
        "exampleInputs3": "grid = [[1,0,0],[1,1,0],[1,1,1]]",
        "exampleOutputs3": "0"
    },
    {
        "id": 1536,
        "title": "1536. Minimum Swaps to Arrange a Binary Grid",
        "description": "Given two strings s and t, your goal is to convert s into t in k moves or less.",
        "exampleInputs1": "s = \"input\", t = \"ouput\", k = 9",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"abc\", t = \"bcd\", k = 10",
        "exampleOutputs2": "false",
        "exampleInputs3": "s = \"aab\", t = \"bbb\", k = 27",
        "exampleOutputs3": "true"
    },
    {
        "id": 1540,
        "title": "1540. Can Convert String in K Moves",
        "description": "Given a parentheses string s containing only the characters '(' and ')'. A parentheses string is balanced if:",
        "exampleInputs1": "s = \"(()))\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "s = \"())\"",
        "exampleOutputs2": "0",
        "exampleInputs3": "s = \"))())(\"",
        "exampleOutputs3": "3",
        "exampleInputs4": "s = \"((((((\"",
        "exampleOutputs4": "12",
        "exampleInputs5": "s = \")))))))\"",
        "exampleOutputs5": "5"
    },
    {
        "id": 1541,
        "title": "1541. Minimum Insertions to Balance a Parentheses String",
        "description": "Given two positive integers n and k, the binary string  Sn is formed as follows:",
        "exampleInputs1": "n = 3, k = 1",
        "exampleOutputs1": "\"0\"",
        "exampleInputs2": "n = 4, k = 11",
        "exampleOutputs2": "\"1\"",
        "exampleInputs3": "n = 1, k = 1",
        "exampleOutputs3": "\"0\"",
        "exampleInputs4": "n = 2, k = 3",
        "exampleOutputs4": "\"1\""
    },
    {
        "id": 1545,
        "title": "1545. Find Kth Bit in Nth Binary String",
        "description": "Given an array nums and an integer target.",
        "exampleInputs1": "nums = [1,1,1,1,1], target = 2",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [-1,3,5,1,4,2,-9], target = 6",
        "exampleOutputs2": "2",
        "exampleInputs3": "nums = [-2,6,6,3,5,4,1,2,8], target = 10",
        "exampleOutputs3": "3",
        "exampleInputs4": "nums = [0,0,0], target = 0",
        "exampleOutputs4": "3"
    },
    {
        "id": 1546,
        "title": "1546. Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
        "description": "You have an array arr of length n where arr[i] = (2 * i) + 1 for all valid values of i (i.e. 0 <= i < n).",
        "exampleInputs1": "n = 3",
        "exampleOutputs1": "2",
        "exampleInputs2": "n = 6",
        "exampleOutputs2": "9"
    },
    {
        "id": 1551,
        "title": "1551. Minimum Operations to Make Array Equal",
        "description": "In universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. Rick has n empty baskets, the ith basket is at position[i], Morty has m balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum.",
        "exampleInputs1": "position = [1,2,3,4,7], m = 3",
        "exampleOutputs1": "3",
        "exampleInputs2": "position = [5,4,3,2,1,1000000000], m = 2",
        "exampleOutputs2": "999999999"
    },
    {
        "id": 1552,
        "title": "1552. Magnetic Force Between Two Balls",
        "description": "Given a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi.",
        "exampleInputs1": "n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]",
        "exampleOutputs1": "[0,3]",
        "exampleInputs2": "n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]",
        "exampleOutputs2": "[0,2,3]"
    },
    {
        "id": 1557,
        "title": "1557. Minimum Number of Vertices to Reach All Nodes",
        "description": "",
        "exampleInputs1": "nums = [1,5]",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [2,2]",
        "exampleOutputs2": "3",
        "exampleInputs3": "nums = [4,2,5]",
        "exampleOutputs3": "6",
        "exampleInputs4": "nums = [3,2,2,4]",
        "exampleOutputs4": "7",
        "exampleInputs5": "nums = [2,4,8,16]",
        "exampleOutputs5": "8"
    },
    {
        "id": 1558,
        "title": "1558. Minimum Numbers of Function Calls to Make Target Array",
        "description": "There are 3n piles of coins of varying size, you and your friends will take piles of coins as follows:",
        "exampleInputs1": "piles = [2,4,1,2,7,8]",
        "exampleOutputs1": "9",
        "exampleInputs2": "piles = [2,4,5]",
        "exampleOutputs2": "4",
        "exampleInputs3": "piles = [9,8,7,6,5,1,2,3,4]",
        "exampleOutputs3": "18"
    },
    {
        "id": 1561,
        "title": "1561. Maximum Number of Coins You Can Get",
        "description": "Given an array arr that represents a permutation of numbers from 1 to n. You have a binary string of size n that initially has all its bits set to zero.",
        "exampleInputs1": "arr = [3,5,1,2,4], m = 1",
        "exampleOutputs1": "4",
        "exampleInputs2": "arr = [3,1,5,4,2], m = 2",
        "exampleOutputs2": "-1",
        "exampleInputs3": "arr = [1], m = 1",
        "exampleOutputs3": "1",
        "exampleInputs4": "arr = [2,1], m = 2",
        "exampleOutputs4": "2"
    },
    {
        "id": 1562,
        "title": "1562. Find Latest Group of Size M",
        "description": "Given an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive.",
        "exampleInputs1": "nums = [1,-2,-3,4]",
        "exampleOutputs1": "4",
        "exampleInputs2": "nums = [0,1,-2,-3,-4]",
        "exampleOutputs2": "3",
        "exampleInputs3": "nums = [-1,-2,-3,0,1]",
        "exampleOutputs3": "2",
        "exampleInputs4": "nums = [-1,2]",
        "exampleOutputs4": "1",
        "exampleInputs5": "nums = [1,2,3,5,-6,4,0,10]",
        "exampleOutputs5": "4"
    },
    {
        "id": 1567,
        "title": "1567. Maximum Length of Subarray With Positive Product",
        "description": "Given a binary string s (a string consisting only of '0's and '1's), we can split s into 3 non-empty strings s1, s2, s3 (s1+ s2+ s3 = s).",
        "exampleInputs1": "s = \"10101\"",
        "exampleOutputs1": "4",
        "exampleInputs2": "s = \"1001\"",
        "exampleOutputs2": "0",
        "exampleInputs3": "s = \"0000\"",
        "exampleOutputs3": "3",
        "exampleInputs4": "s = \"100100010100110\"",
        "exampleOutputs4": "12"
    },
    {
        "id": 1573,
        "title": "1573. Number of Ways to Split a String",
        "description": "Given an integer array arr, remove a subarray (can be empty) from arr such that the remaining elements in arr are non-decreasing.",
        "exampleInputs1": "arr = [1,2,3,10,4,2,3,5]",
        "exampleOutputs1": "3",
        "exampleInputs2": "arr = [5,4,3,2,1]",
        "exampleOutputs2": "4",
        "exampleInputs3": "arr = [1,2,3]",
        "exampleOutputs3": "0",
        "exampleInputs4": "arr = [1]",
        "exampleOutputs4": "0"
    },
    {
        "id": 1574,
        "title": "1574. Shortest Subarray to be Removed to Make Array Sorted",
        "description": "Given two arrays of integers nums1 and nums2, return the number of triplets formed (type 1 and type 2) under the following rules:",
        "exampleInputs1": "nums1 = [7,4], nums2 = [5,2,8,9]",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums1 = [1,1], nums2 = [1,1,1]",
        "exampleOutputs2": "9",
        "exampleInputs3": "nums1 = [7,7,8,3], nums2 = [1,2,9,7]",
        "exampleOutputs3": "2",
        "exampleInputs4": "nums1 = [4,7,9,11,23], nums2 = [3,5,1024,12,18]",
        "exampleOutputs4": "0"
    },
    {
        "id": 1577,
        "title": "1577. Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
        "description": "Given a string s and an array of integers cost where cost[i] is the cost of deleting the ith character in s.",
        "exampleInputs1": "s = \"abaac\", cost = [1,2,3,4,5]",
        "exampleOutputs1": "3",
        "exampleInputs2": "s = \"abc\", cost = [1,2,3]",
        "exampleOutputs2": "0",
        "exampleInputs3": "s = \"aabaa\", cost = [1,2,3,4,1]",
        "exampleOutputs3": "2"
    },
    {
        "id": 1578,
        "title": "1578. Minimum Deletion Cost to Avoid Repeating Letters",
        "description": "You are given a list of preferences for n friends, where n is always even.",
        "exampleInputs1": "n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "n = 2, preferences = [[1], [0]], pairs = [[1, 0]]",
        "exampleOutputs2": "0",
        "exampleInputs3": "n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]",
        "exampleOutputs3": "4"
    },
    {
        "id": 1583,
        "title": "1583. Count Unhappy Friends",
        "description": "You are given an array points representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi].",
        "exampleInputs1": "points = [[0,0],[2,2],[3,10],[5,2],[7,0]]",
        "exampleOutputs1": "20",
        "exampleInputs2": "points = [[3,12],[-2,5],[-4,1]]",
        "exampleOutputs2": "18",
        "exampleInputs3": "points = [[0,0],[1,1],[1,0],[-1,1]]",
        "exampleOutputs3": "4",
        "exampleInputs4": "points = [[-1000000,-1000000],[1000000,1000000]]",
        "exampleOutputs4": "4000000",
        "exampleInputs5": "points = [[0,0]]",
        "exampleOutputs5": "0"
    },
    {
        "id": 1584,
        "title": "1584. Min Cost to Connect All Points",
        "description": "We have an array of integers, nums, and an array of requests where requests[i] = [starti, endi]. The ith request asks for the sum of nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]. Both starti and endi are 0-indexed.",
        "exampleInputs1": "nums = [1,2,3,4,5], requests = [[1,3],[0,1]]",
        "exampleOutputs1": "19",
        "exampleInputs2": "nums = [1,2,3,4,5,6], requests = [[0,1]]",
        "exampleOutputs2": "11",
        "exampleInputs3": "nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]",
        "exampleOutputs3": "47"
    },
    {
        "id": 1589,
        "title": "1589. Maximum Sum Obtained of Any Permutation",
        "description": "Given an array of positive integers nums, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by p. It is not allowed to remove the whole array.",
        "exampleInputs1": "nums = [3,1,4,2], p = 6",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [6,3,5,2], p = 9",
        "exampleOutputs2": "2",
        "exampleInputs3": "nums = [1,2,3], p = 3",
        "exampleOutputs3": "0",
        "exampleInputs4": "nums = [1,2,3], p = 7",
        "exampleOutputs4": "-1",
        "exampleInputs5": "nums = [1000000000,1000000000,1000000000], p = 3",
        "exampleOutputs5": "0"
    },
    {
        "id": 1590,
        "title": "1590. Make Sum Divisible by P",
        "description": "Given a string s, return the maximum number of unique substrings that the given string can be split into.",
        "exampleInputs1": "s = \"ababccc\"",
        "exampleOutputs1": "5",
        "exampleInputs2": "s = \"aba\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "s = \"aa\"",
        "exampleOutputs3": "1"
    },
    {
        "id": 1593,
        "title": "1593. Split a String Into the Max Number of Unique Substrings",
        "description": "You are given a rows x cols matrix grid. Initially, you are located at the top-left corner (0, 0), and in each step, you can only move right or down in the matrix.",
        "exampleInputs1": "grid = [[-1,-2,-3],",
        "exampleOutputs1": "[-2,-3,-3],",
        "exampleInputs2": "grid = [[1,-2,1],",
        "exampleOutputs2": "[1,-2,1],",
        "exampleInputs3": "grid = [[1, 3],",
        "exampleOutputs3": "[0,-4]]",
        "exampleInputs4": "grid = [[ 1, 4,4,0],",
        "exampleOutputs4": "[-2, 0,0,1],"
    },
    {
        "id": 1594,
        "title": "1594. Maximum Non Negative Product in a Matrix",
        "description": "You are the operator of a Centennial Wheel that has four gondolas, and each gondola has room for up to four people. You have the ability to rotate the gondolas counterclockwise, which costs you runningCost dollars.",
        "exampleInputs1": "customers = [8,3], boardingCost = 5, runningCost = 6",
        "exampleOutputs1": "3",
        "exampleInputs2": "customers = [10,9,6], boardingCost = 6, runningCost = 4",
        "exampleOutputs2": "7",
        "exampleInputs3": "customers = [3,4,0,5,1], boardingCost = 1, runningCost = 92",
        "exampleOutputs3": "-1",
        "exampleInputs4": "customers = [10,10,6,4,7], boardingCost = 3, runningCost = 8",
        "exampleOutputs4": "9"
    },
    {
        "id": 1599,
        "title": "1599. Maximum Profit of Operating a Centennial Wheel",
        "description": "A kingdom consists of a king, his children, his grandchildren, and so on. Every once in a while, someone in the family dies or a child is born.",
        "exampleInputs1": "Successor(x, curOrder):",
        "exampleOutputs1": "if x has no children or all of x's children are in curOrder:",
        "exampleInputs2": "Input",
        "exampleOutputs2": "[\"ThroneInheritance\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"getInheritanceOrder\", \"death\", \"getInheritanceOrder\"]"
    },
    {
        "id": 1600,
        "title": "1600. Throne Inheritance",
        "description": "LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. The system emits an alert if any worker uses the key-card three or more times in a one-hour period.",
        "exampleInputs1": "keyName = [\"daniel\",\"daniel\",\"daniel\",\"luis\",\"luis\",\"luis\",\"luis\"], keyTime = [\"10:00\",\"10:40\",\"11:00\",\"09:00\",\"11:00\",\"13:00\",\"15:00\"]",
        "exampleOutputs1": "[\"daniel\"]",
        "exampleInputs2": "keyName = [\"alice\",\"alice\",\"alice\",\"bob\",\"bob\",\"bob\",\"bob\"], keyTime = [\"12:01\",\"12:00\",\"18:00\",\"21:00\",\"21:20\",\"21:30\",\"23:00\"]",
        "exampleOutputs2": "[\"bob\"]",
        "exampleInputs3": "keyName = [\"john\",\"john\",\"john\"], keyTime = [\"23:58\",\"23:59\",\"00:01\"]",
        "exampleOutputs3": "[]",
        "exampleInputs4": "keyName = [\"leslie\",\"leslie\",\"leslie\",\"clare\",\"clare\",\"clare\",\"clare\"], keyTime = [\"13:00\",\"13:20\",\"14:00\",\"18:00\",\"18:51\",\"19:30\",\"19:49\"]",
        "exampleOutputs4": "[\"clare\",\"leslie\"]"
    },
    {
        "id": 1604,
        "title": "1604. Alert Using Same Key-Card Three or More Times in a One Hour Period",
        "description": "You are given two arrays rowSum and colSum of non-negative integers where rowSum[i] is the sum of the elements in the ith row and colSum[j] is the sum of the elements of the jth column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.",
        "exampleInputs1": "rowSum = [3,8], colSum = [4,7]",
        "exampleOutputs1": "[[3,0],",
        "exampleInputs2": "rowSum = [5,7,10], colSum = [8,6,8]",
        "exampleOutputs2": "[[0,5,0],",
        "exampleInputs3": "rowSum = [14,9], colSum = [6,9,8]",
        "exampleOutputs3": "[[0,9,5],",
        "exampleInputs4": "rowSum = [1,0], colSum = [1]",
        "exampleOutputs4": "[[1],",
        "exampleInputs5": "rowSum = [0], colSum = [0]",
        "exampleOutputs5": "[[0]]"
    },
    {
        "id": 1605,
        "title": "1605. Find Valid Matrix Given Row and Column Sums",
        "description": "A binary tree is named Even-Odd if it meets the following conditions:",
        "exampleInputs1": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2]",
        "exampleOutputs1": "true",
        "exampleInputs2": "root = [5,4,2,3,3,7]",
        "exampleOutputs2": "false",
        "exampleInputs3": "root = [5,9,1,3,5,7]",
        "exampleOutputs3": "false",
        "exampleInputs4": "root = [1]",
        "exampleOutputs4": "true",
        "exampleInputs5": "root = [11,8,6,1,3,9,11,30,20,18,16,12,10,4,2,17]",
        "exampleOutputs5": "true"
    },
    {
        "id": 1609,
        "title": "1609. Even Odd Tree",
        "description": "There is an infrastructure of n cities with some number of roads connecting these cities. Each roads[i] = [ai, bi] indicates that there is a bidirectional road between cities ai and bi.",
        "exampleInputs1": "n = 4, roads = [[0,1],[0,3],[1,2],[1,3]]",
        "exampleOutputs1": "4",
        "exampleInputs2": "n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]",
        "exampleOutputs2": "5",
        "exampleInputs3": "n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]",
        "exampleOutputs3": "5"
    },
    {
        "id": 1615,
        "title": "1615. Maximal Network Rank",
        "description": "You are given two strings a and b of the same length. Choose an index and split both strings at the same index, splitting a into two strings: aprefix and asuffix where a = aprefix + asuffix, and splitting b into two strings: bprefix and bsuffix where b = bprefix + bsuffix. Check if aprefix + bsuffix or bprefix + asuffix forms a palindrome.",
        "exampleInputs1": "a = \"x\", b = \"y\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "a = \"abdef\", b = \"fecab\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "a = \"ulacfd\", b = \"jizalu\"",
        "exampleOutputs3": "true",
        "exampleInputs4": "a = \"xbdef\", b = \"xecab\"",
        "exampleOutputs4": "false"
    },
    {
        "id": 1616,
        "title": "1616. Split Two Strings to Make Palindrome",
        "description": "You are given an array of network towers towers and an integer radius, where towers[i] = [xi, yi, qi] denotes the ith network tower with location (xi, yi) and quality factor qi. All the coordinates are integral coordinates on the X-Y plane, and the distance between two coordinates is the Euclidean distance.",
        "exampleInputs1": "towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2",
        "exampleOutputs1": "[2,1]",
        "exampleInputs2": "towers = [[23,11,21]], radius = 9",
        "exampleOutputs2": "[23,11]",
        "exampleInputs3": "towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2",
        "exampleOutputs3": "[1,2]",
        "exampleInputs4": "towers = [[2,1,9],[0,1,9]], radius = 2",
        "exampleOutputs4": "[0,1]"
    },
    {
        "id": 1620,
        "title": "1620. Coordinate With Maximum Network Quality",
        "description": "Given n points on a 1-D plane, where the ith point (from 0 to n-1) is at x = i, find the number of ways we can draw exactly k non-overlapping line segments such that each segment covers two or more points. The endpoints of each segment must have integral coordinates. The k line segments do not have to cover all n points, and they are allowed to share endpoints.",
        "exampleInputs1": "n = 4, k = 2",
        "exampleOutputs1": "5",
        "exampleInputs2": "n = 3, k = 1",
        "exampleOutputs2": "3",
        "exampleInputs3": "n = 30, k = 7",
        "exampleOutputs3": "796297179",
        "exampleInputs4": "n = 5, k = 3",
        "exampleOutputs4": "7",
        "exampleInputs5": "n = 3, k = 2",
        "exampleOutputs5": "1"
    },
    {
        "id": 1621,
        "title": "1621. Number of Sets of K Non-Overlapping Line Segments",
        "description": "You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.",
        "exampleInputs1": "s = \"5525\", a = 9, b = 2",
        "exampleOutputs1": "\"2050\"",
        "exampleInputs2": "s = \"74\", a = 5, b = 1",
        "exampleOutputs2": "\"24\"",
        "exampleInputs3": "s = \"0011\", a = 4, b = 2",
        "exampleOutputs3": "\"0011\"",
        "exampleInputs4": "s = \"43987654\", a = 7, b = 3",
        "exampleOutputs4": "\"00553311\""
    },
    {
        "id": 1625,
        "title": "1625. Lexicographically Smallest String After Applying Operations",
        "description": "You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the sum of scores of all the players in the team.",
        "exampleInputs1": "scores = [1,3,5,10,15], ages = [1,2,3,4,5]",
        "exampleOutputs1": "34",
        "exampleInputs2": "scores = [4,5,6,5], ages = [2,1,2,1]",
        "exampleOutputs2": "16",
        "exampleInputs3": "scores = [1,2,3,5], ages = [8,9,10,1]",
        "exampleOutputs3": "6"
    },
    {
        "id": 1626,
        "title": "1626. Best Team With No Conflicts",
        "description": "A sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every two consecutive elements is the same. More formally, a sequence s is arithmetic if and only if s[i+1] - s[i] == s[1] - s[0] for all valid i.",
        "exampleInputs1": "1, 3, 5, 7, 9",
        "exampleOutputs1": "7, 7, 7, 7",
        "exampleInputs3": "nums = [4,6,5,9,3,7], l = [0,0,2], r = [2,3,5]",
        "exampleOutputs3": "[true,false,true]",
        "exampleInputs4": "nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]",
        "exampleOutputs4": "[false,true,false,false,true,true]"
    },
    {
        "id": 1630,
        "title": "1630. Arithmetic Subarrays",
        "description": "You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.",
        "exampleInputs1": "heights = [[1,2,2],[3,8,2],[5,3,5]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "heights = [[1,2,3],[3,8,4],[5,3,5]]",
        "exampleOutputs2": "1",
        "exampleInputs3": "heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]",
        "exampleOutputs3": "0"
    },
    {
        "id": 1631,
        "title": "1631. Path With Minimum Effort",
        "description": "Given n points on a 2D plane where points[i] = [xi, yi], Return the widest vertical area between two points such that no points are inside the area.",
        "exampleInputs1": "points = [[8,7],[9,9],[7,4],[9,7]]",
        "exampleOutputs1": "1",
        "exampleInputs2": "points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]",
        "exampleOutputs2": "3"
    },
    {
        "id": 1637,
        "title": "1637. Widest Vertical Area Between Two Points Containing No Points",
        "description": "Given two strings s and t, find the number of ways you can choose a non-empty substring of s and replace a single character by a different character such that the resulting substring is a substring of t. In other words, find the number of substrings in s that differ from some substring in t by exactly one character.",
        "exampleInputs1": "s = \"aba\", t = \"baba\"",
        "exampleOutputs1": "6",
        "exampleInputs2": "s = \"ab\", t = \"bb\"",
        "exampleOutputs2": "3",
        "exampleInputs3": "s = \"a\", t = \"a\"",
        "exampleOutputs3": "0",
        "exampleInputs4": "s = \"abe\", t = \"bbc\"",
        "exampleOutputs4": "10"
    },
    {
        "id": 1638,
        "title": "1638. Count Substrings That Differ by One Character",
        "description": "Given an integer n, return the number of strings of length n that consist only of vowels (a, e, i, o, u) and are lexicographically sorted.",
        "exampleInputs1": "n = 1",
        "exampleOutputs1": "5",
        "exampleInputs2": "n = 2",
        "exampleOutputs2": "15",
        "exampleInputs3": "n = 33",
        "exampleOutputs3": "66045"
    },
    {
        "id": 1641,
        "title": "1641. Count Sorted Vowel Strings",
        "description": "You are given an integer array heights representing the heights of buildings, some bricks, and some ladders.",
        "exampleInputs1": "heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1",
        "exampleOutputs1": "4",
        "exampleInputs2": "heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2",
        "exampleOutputs2": "7",
        "exampleInputs3": "heights = [14,3,19,3], bricks = 17, ladders = 0",
        "exampleOutputs3": "3"
    },
    {
        "id": 1642,
        "title": "1642. Furthest Building You Can Reach",
        "description": "A string s is called good if there are no two different characters in s that have the same frequency.",
        "exampleInputs1": "s = \"aab\"",
        "exampleOutputs1": "0",
        "exampleInputs2": "s = \"aaabbbcc\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "s = \"ceabaacb\"",
        "exampleOutputs3": "2"
    },
    {
        "id": 1647,
        "title": "1647. Minimum Deletions to Make Character Frequencies Unique",
        "description": "You have an inventory of different colored balls, and there is a customer that wants orders balls of any color.",
        "exampleInputs1": "inventory = [2,5], orders = 4",
        "exampleOutputs1": "14",
        "exampleInputs2": "inventory = [3,5], orders = 6",
        "exampleOutputs2": "19",
        "exampleInputs3": "inventory = [2,8,4,10,6], orders = 20",
        "exampleOutputs3": "110",
        "exampleInputs4": "inventory = [1000000000], orders = 1000000000",
        "exampleOutputs4": "21"
    },
    {
        "id": 1648,
        "title": "1648. Sell Diminishing-Valued Colored Balls",
        "description": "You are given a string s consisting only of characters 'a' and 'b'​​​​.",
        "exampleInputs1": "s = \"aababbab\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"bbaaaaabb\"",
        "exampleOutputs2": "2"
    },
    {
        "id": 1653,
        "title": "1653. Minimum Deletions to Make String Balanced",
        "description": "A certain bug's home is on the x-axis at position x. Help them get there from position 0.",
        "exampleInputs1": "forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9",
        "exampleOutputs1": "3",
        "exampleInputs2": "forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11",
        "exampleOutputs2": "-1",
        "exampleInputs3": "forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7",
        "exampleOutputs3": "2"
    },
    {
        "id": 1654,
        "title": "1654. Minimum Jumps to Reach Home",
        "description": "Two strings are considered close if you can attain one from the other using the following operations:",
        "exampleInputs1": "word1 = \"abc\", word2 = \"bca\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "word1 = \"a\", word2 = \"aa\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "word1 = \"cabbba\", word2 = \"abbccc\"",
        "exampleOutputs3": "true",
        "exampleInputs4": "word1 = \"cabbba\", word2 = \"aabbss\"",
        "exampleOutputs4": "false"
    },
    {
        "id": 1657,
        "title": "1657. Determine if Two Strings Are Close",
        "description": "You are given an integer array nums and an integer x. In one operation, you can either remove the leftmost or the rightmost element from the array nums and subtract its value from x. Note that this modifies the array for future operations.",
        "exampleInputs1": "nums = [1,1,4,2,3], x = 5",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [5,6,7,8,9], x = 4",
        "exampleOutputs2": "-1",
        "exampleInputs3": "nums = [3,2,20,1,1,3], x = 10",
        "exampleOutputs3": "5"
    },
    {
        "id": 1658,
        "title": "1658. Minimum Operations to Reduce X to Zero",
        "description": "The numeric value of a lowercase character is defined as its position (1-indexed) in the alphabet, so the numeric value of a is 1, the numeric value of b is 2, the numeric value of c is 3, and so on.",
        "exampleInputs1": "n = 3, k = 27",
        "exampleOutputs1": "\"aay\"",
        "exampleInputs2": "n = 5, k = 73",
        "exampleOutputs2": "\"aaszz\""
    },
    {
        "id": 1663,
        "title": "1663. Smallest String With A Given Numeric Value",
        "description": "You are given an integer array nums. You can choose exactly one index (0-indexed) and remove the element. Notice that the index of the elements may change after the removal.",
        "exampleInputs1": "nums = [2,1,6,4]",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [1,1,1]",
        "exampleOutputs2": "3",
        "exampleInputs3": "nums = [1,2,3]",
        "exampleOutputs3": "0"
    },
    {
        "id": 1664,
        "title": "1664. Ways to Make a Fair Array",
        "description": "You are given two linked lists: list1 and list2 of sizes n and m respectively.",
        "exampleInputs1": "list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]",
        "exampleOutputs1": "[0,1,2,1000000,1000001,1000002,5]",
        "exampleInputs2": "list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]",
        "exampleOutputs2": "[0,1,1000000,1000001,1000002,1000003,1000004,6]"
    },
    {
        "id": 1669,
        "title": "1669. Merge In Between Linked Lists",
        "description": "Design a queue that supports push and pop operations in the front, middle, and back.",
        "exampleInputs1": "",
        "exampleOutputs1": "[\"FrontMiddleBackQueue\", \"pushFront\", \"pushBack\", \"pushMiddle\", \"pushMiddle\", \"popFront\", \"popMiddle\", \"popMiddle\", \"popBack\", \"popFront\"]"
    },
    {
        "id": 1670,
        "title": "1670. Design Front Middle Back Queue",
        "description": "Given an integer array nums and a positive integer k, return the most competitive subsequence of nums of size k.",
        "exampleInputs1": "nums = [3,5,2,6], k = 2",
        "exampleOutputs1": "[2,6]",
        "exampleInputs2": "nums = [2,4,3,3,5,4,9,6], k = 4",
        "exampleOutputs2": "[2,3,3,4]"
    },
    {
        "id": 1673,
        "title": "1673. Find the Most Competitive Subsequence",
        "description": "You are given an integer array nums of even length n and an integer limit. In one move, you can replace any integer from nums with another integer between 1 and limit, inclusive.",
        "exampleInputs1": "nums = [1,2,4,3], limit = 4",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [1,2,2,1], limit = 2",
        "exampleOutputs2": "2",
        "exampleInputs3": "nums = [1,2,1,2], limit = 2",
        "exampleOutputs3": "0"
    },
    {
        "id": 1674,
        "title": "1674. Minimum Moves to Make Array Complementary",
        "description": "You are given an integer array nums and an integer k.",
        "exampleInputs1": "nums = [1,2,3,4], k = 5",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [3,1,3,4,3], k = 6",
        "exampleOutputs2": "1"
    },
    {
        "id": 1679,
        "title": "1679. Max Number of K-Sum Pairs",
        "description": "Given an integer n, return the decimal value of the binary string formed by concatenating the binary representations of 1 to n in order, modulo 109 + 7.",
        "exampleInputs1": "n = 1",
        "exampleOutputs1": "1",
        "exampleInputs2": "n = 3",
        "exampleOutputs2": "27",
        "exampleInputs3": "n = 12",
        "exampleOutputs3": "505379714"
    },
    {
        "id": 1680,
        "title": "1680. Concatenation of Consecutive Binary Numbers",
        "description": "You are given an integer array nums sorted in non-decreasing order.",
        "exampleInputs1": "nums = [2,3,5]",
        "exampleOutputs1": "[4,3,5]",
        "exampleInputs2": "nums = [1,4,6,8,10]",
        "exampleOutputs2": "[24,15,13,15,21]"
    },
    {
        "id": 1685,
        "title": "1685. Sum of Absolute Differences in a Sorted Array",
        "description": "Alice and Bob take turns playing a game, with Alice starting first.",
        "exampleInputs1": "aliceValues = [1,3], bobValues = [2,1]",
        "exampleOutputs1": "1",
        "exampleInputs2": "aliceValues = [1,2], bobValues = [3,1]",
        "exampleOutputs2": "0",
        "exampleInputs3": "aliceValues = [2,4,3], bobValues = [1,6,7]",
        "exampleOutputs3": "-1"
    },
    {
        "id": 1686,
        "title": "1686. Stone Game VI",
        "description": "A decimal number is called deci-binary if each of its digits is either 0 or 1 without any leading zeros. For example, 101 and 1100 are deci-binary, while 112 and 3001 are not.",
        "exampleInputs1": "n = \"32\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "n = \"82734\"",
        "exampleOutputs2": "8",
        "exampleInputs3": "n = \"27346209830709182346\"",
        "exampleOutputs3": "9"
    },
    {
        "id": 1689,
        "title": "1689. Partitioning Into Minimum Number Of Deci-Binary Numbers",
        "description": "Alice and Bob take turns playing a game, with Alice starting first.",
        "exampleInputs1": "stones = [5,3,1,4,2]",
        "exampleOutputs1": "6",
        "exampleInputs2": "stones = [7,90,5,1,100,10,10,2]",
        "exampleOutputs2": "122"
    },
    {
        "id": 1690,
        "title": "1690. Stone Game VII",
        "description": "You are given an array of positive integers nums and want to erase a subarray containing unique elements. The score you get by erasing the subarray is equal to the sum of its elements.",
        "exampleInputs1": "nums = [4,2,4,5,6]",
        "exampleOutputs1": "17",
        "exampleInputs2": "nums = [5,2,1,2,5,2,1,2,5]",
        "exampleOutputs2": "8"
    },
    {
        "id": 1695,
        "title": "1695. Maximum Erasure Value",
        "description": "You are given a 0-indexed integer array nums and an integer k.",
        "exampleInputs1": "nums = [1,-1,-2,4,-7,3], k = 2",
        "exampleOutputs1": "7",
        "exampleInputs2": "nums = [10,-5,-2,4,0,3], k = 3",
        "exampleOutputs2": "17",
        "exampleInputs3": "nums = [1,-5,-20,4,-1,3,-6,-3], k = 2",
        "exampleOutputs3": "0"
    },
    {
        "id": 1696,
        "title": "1696. Jump Game VI",
        "description": "There is a restaurant with a single chef. You are given an array customers, where customers[i] = [arrivali, timei]:",
        "exampleInputs1": "customers = [[1,2],[2,5],[4,3]]",
        "exampleOutputs1": "5.00000",
        "exampleInputs2": "customers = [[5,2],[5,4],[10,3],[20,1]]",
        "exampleOutputs2": "3.25000"
    },
    {
        "id": 1701,
        "title": "1701. Average Waiting Time",
        "description": "You are given a binary string binary consisting of only 0's or 1's. You can apply each of the following operations any number of times:",
        "exampleInputs1": "binary = \"000110\"",
        "exampleOutputs1": "\"111011\"",
        "exampleInputs2": "binary = \"01\"",
        "exampleOutputs2": "\"01\""
    },
    {
        "id": 1702,
        "title": "1702. Maximum Binary String After Change",
        "description": "There is a special kind of apple tree that grows apples every day for n days. On the ith day, the tree grows apples[i] apples that will rot after days[i] days, that is on day i + days[i] the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by apples[i] == 0 and days[i] == 0.",
        "exampleInputs1": "apples = [1,2,3,5,2], days = [3,2,1,4,2]",
        "exampleOutputs1": "7",
        "exampleInputs2": "apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]",
        "exampleOutputs2": "5"
    },
    {
        "id": 1705,
        "title": "1705. Maximum Number of Eaten Apples",
        "description": "You have a 2-D grid of size m x n representing a box, and you have n balls. The box is open on the top and bottom sides.",
        "exampleInputs1": "grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]",
        "exampleOutputs1": "[1,-1,-1,-1,-1]",
        "exampleInputs2": "grid = [[-1]]",
        "exampleOutputs2": "[-1]",
        "exampleInputs3": "grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]",
        "exampleOutputs3": "[0,1,2,3,4,-1]"
    },
    {
        "id": 1706,
        "title": "1706. Where Will the Ball Fall",
        "description": "A good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two.",
        "exampleInputs1": "deliciousness = [1,3,5,7,9]",
        "exampleOutputs1": "4",
        "exampleInputs2": "deliciousness = [1,1,1,3,3,3,7]",
        "exampleOutputs2": "15"
    },
    {
        "id": 1711,
        "title": "1711. Count Good Meals",
        "description": "A split of an integer array is good if:",
        "exampleInputs1": "nums = [1,1,1]",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [1,2,2,2,5,0]",
        "exampleOutputs2": "3",
        "exampleInputs3": "nums = [3,2,1]",
        "exampleOutputs3": "0"
    },
    {
        "id": 1712,
        "title": "1712. Ways to Split Array Into Three Subarrays",
        "description": "You are given a string s and two integers x and y. You can perform two types of operations any number of times.",
        "exampleInputs1": "s = \"cdbcbbaaabab\", x = 4, y = 5",
        "exampleOutputs1": "19",
        "exampleInputs2": "s = \"aabbaaxybbaabb\", x = 5, y = 4",
        "exampleOutputs2": "20"
    },
    {
        "id": 1717,
        "title": "1717. Maximum Score From Removing Substrings",
        "description": "Given an integer n, find a sequence that satisfies all of the following:",
        "exampleInputs1": "n = 3",
        "exampleOutputs1": "[3,1,2,3,2]",
        "exampleInputs2": "n = 5",
        "exampleOutputs2": "[5,3,1,4,3,5,2,4,2]"
    },
    {
        "id": 1718,
        "title": "1718. Construct the Lexicographically Largest Valid Sequence",
        "description": "You are given the head of a linked list, and an integer k.",
        "exampleInputs1": "head = [1,2,3,4,5], k = 2",
        "exampleOutputs1": "[1,4,3,2,5]",
        "exampleInputs2": "head = [7,9,6,6,7,8,3,0,9,5], k = 5",
        "exampleOutputs2": "[7,9,6,6,8,7,3,0,9,5]",
        "exampleInputs3": "head = [1], k = 1",
        "exampleOutputs3": "[1]",
        "exampleInputs4": "head = [1,2], k = 1",
        "exampleOutputs4": "[2,1]",
        "exampleInputs5": "head = [1,2,3], k = 2",
        "exampleOutputs5": "[1,2,3]"
    },
    {
        "id": 1721,
        "title": "1721. Swapping Nodes in a Linked List",
        "description": "You are given two integer arrays, source and target, both of length n. You are also given an array allowedSwaps where each allowedSwaps[i] = [ai, bi] indicates that you are allowed to swap the elements at index ai and index bi (0-indexed) of array source. Note that you can swap elements at a specific pair of indices multiple times and in any order.",
        "exampleInputs1": "source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]",
        "exampleOutputs1": "1",
        "exampleInputs2": "source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []",
        "exampleOutputs2": "2",
        "exampleInputs3": "source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]",
        "exampleOutputs3": "0"
    },
    {
        "id": 1722,
        "title": "1722. Minimize Hamming Distance After Swap Operations",
        "description": "Given an array nums of distinct positive integers, return the number of tuples (a, b, c, d) such that a * b = c * d where a, b, c, and d are elements of nums, and a != b != c != d.",
        "exampleInputs1": "nums = [2,3,4,6]",
        "exampleOutputs1": "8",
        "exampleInputs2": "nums = [1,2,4,5,10]",
        "exampleOutputs2": "16",
        "exampleInputs3": "nums = [2,3,4,6,8,12]",
        "exampleOutputs3": "40",
        "exampleInputs4": "nums = [2,3,5,7]",
        "exampleOutputs4": "0"
    },
    {
        "id": 1726,
        "title": "1726. Tuple with Same Product",
        "description": "You are given a binary matrix matrix of size m x n, and you are allowed to rearrange the columns of the matrix in any order.",
        "exampleInputs1": "matrix = [[0,0,1],[1,1,1],[1,0,1]]",
        "exampleOutputs1": "4",
        "exampleInputs2": "matrix = [[1,0,1,0,1]]",
        "exampleOutputs2": "3",
        "exampleInputs3": "matrix = [[1,1,0],[1,0,1]]",
        "exampleOutputs3": "2",
        "exampleInputs4": "matrix = [[0,0],[0,0]]",
        "exampleOutputs4": "0"
    },
    {
        "id": 1727,
        "title": "1727. Largest Submatrix With Rearrangements",
        "description": "On a social network consisting of m users and some friendships between users, two users can communicate with each other if they know a common language.",
        "exampleInputs1": "n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]",
        "exampleOutputs1": "1",
        "exampleInputs2": "n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]",
        "exampleOutputs2": "2"
    },
    {
        "id": 1733,
        "title": "1733. Minimum Number of People to Teach",
        "description": "There is an integer array perm that is a permutation of the first n positive integers, where n is always odd.",
        "exampleInputs1": "encoded = [3,1]",
        "exampleOutputs1": "[1,2,3]",
        "exampleInputs2": "encoded = [6,5,4,6]",
        "exampleOutputs2": "[2,4,1,5,3]"
    },
    {
        "id": 1734,
        "title": "1734. Decode XORed Permutation",
        "description": "You are given two strings a and b that consist of lowercase letters. In one operation, you can change any character in a or b to any lowercase letter.",
        "exampleInputs1": "a = \"aba\", b = \"caa\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "a = \"dabadd\", b = \"cda\"",
        "exampleOutputs2": "3"
    },
    {
        "id": 1737,
        "title": "1737. Change Minimum Characters to Satisfy One of Three Conditions",
        "description": "You are given a 2D matrix of size m x n, consisting of non-negative integers. You are also given an integer k.",
        "exampleInputs1": "matrix = [[5,2],[1,6]], k = 1",
        "exampleOutputs1": "7",
        "exampleInputs2": "matrix = [[5,2],[1,6]], k = 2",
        "exampleOutputs2": "5",
        "exampleInputs3": "matrix = [[5,2],[1,6]], k = 3",
        "exampleOutputs3": "4",
        "exampleInputs4": "matrix = [[5,2],[1,6]], k = 4",
        "exampleOutputs4": "0"
    },
    {
        "id": 1738,
        "title": "1738. Find Kth Largest XOR Coordinate Value",
        "description": "There is an integer array nums that consists of n unique elements, but you have forgotten it. However, you do remember every pair of adjacent elements in nums.",
        "exampleInputs1": "adjacentPairs = [[2,1],[3,4],[3,2]]",
        "exampleOutputs1": "[1,2,3,4]",
        "exampleInputs2": "adjacentPairs = [[4,-2],[1,4],[-3,1]]",
        "exampleOutputs2": "[-2,4,1,-3]",
        "exampleInputs3": "adjacentPairs = [[100000,-100000]]",
        "exampleOutputs3": "[100000,-100000]"
    },
    {
        "id": 1743,
        "title": "1743. Restore the Array From Adjacent Pairs",
        "description": "You are given a (0-indexed) array of positive integers candiesCount where candiesCount[i] represents the number of candies of the ith type you have. You are also given a 2D array queries where queries[i] = [favoriteTypei, favoriteDayi, dailyCapi].",
        "exampleInputs1": "candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]",
        "exampleOutputs1": "[true,false,true]",
        "exampleInputs2": "candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]",
        "exampleOutputs2": "[false,true,true,false,false]"
    },
    {
        "id": 1744,
        "title": "1744. Can You Eat Your Favorite Candy on Your Favorite Day?",
        "description": "You are given an integer array nums. The absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr).",
        "exampleInputs1": "nums = [1,-3,2,3,-4]",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [2,-5,1,-4,3,-2]",
        "exampleOutputs2": "8"
    },
    {
        "id": 1749,
        "title": "1749. Maximum Absolute Sum of Any Subarray",
        "description": "Given a string s consisting only of characters 'a', 'b', and 'c'. You are asked to apply the following algorithm on the string any number of times:",
        "exampleInputs1": "s = \"ca\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"cabaabac\"",
        "exampleOutputs2": "0",
        "exampleInputs3": "s = \"aabccabba\"",
        "exampleOutputs3": "3"
    },
    {
        "id": 1750,
        "title": "1750. Minimum Length of String After Deleting Similar Ends",
        "description": "You are playing a solitaire game with three piles of stones of sizes a​​​​​​, b,​​​​​​ and c​​​​​​ respectively. Each turn you choose two different non-empty piles, take one stone from each, and add 1 point to your score. The game stops when there are fewer than two non-empty piles (meaning there are no more available moves).",
        "exampleInputs1": "a = 2, b = 4, c = 6",
        "exampleOutputs1": "6",
        "exampleInputs2": "a = 4, b = 4, c = 6",
        "exampleOutputs2": "7",
        "exampleInputs3": "a = 1, b = 8, c = 8",
        "exampleOutputs3": "8"
    },
    {
        "id": 1753,
        "title": "1753. Maximum Score From Removing Stones",
        "description": "You are given two strings word1 and word2. You want to construct a string merge in the following way: while either word1 or word2 are non-empty, choose one of the following options:",
        "exampleInputs1": "word1 = \"cabaa\", word2 = \"bcaaa\"",
        "exampleOutputs1": "\"cbcabaaaaa\"",
        "exampleInputs2": "word1 = \"abcabc\", word2 = \"abdcaba\"",
        "exampleOutputs2": "\"abdcabcabcaba\""
    },
    {
        "id": 1754,
        "title": "1754. Largest Merge Of Two Strings",
        "description": "Given a string s, return the number of homogenous substrings of s. Since the answer may be too large, return it modulo 109 + 7.",
        "exampleInputs1": "s = \"abbcccaa\"",
        "exampleOutputs1": "13",
        "exampleInputs2": "s = \"xy\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "s = \"zzzzz\"",
        "exampleOutputs3": "15"
    },
    {
        "id": 1759,
        "title": "1759. Count Number of Homogenous Substrings",
        "description": "You are given an integer array nums where the ith bag contains nums[i] balls. You are also given an integer maxOperations.",
        "exampleInputs1": "nums = [9], maxOperations = 2",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [2,4,8,2], maxOperations = 4",
        "exampleOutputs2": "2",
        "exampleInputs3": "nums = [7,17], maxOperations = 2",
        "exampleOutputs3": "7"
    },
    {
        "id": 1760,
        "title": "1760. Minimum Limit of Balls in a Bag",
        "description": "You are given a 2D integer array groups of length n. You are also given an integer array nums.",
        "exampleInputs1": "groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]",
        "exampleOutputs1": "true",
        "exampleInputs2": "groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]",
        "exampleOutputs2": "false",
        "exampleInputs3": "groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]",
        "exampleOutputs3": "false"
    },
    {
        "id": 1764,
        "title": "1764. Form Array by Concatenating Subarrays of Another Array",
        "description": "You are given an integer matrix isWater of size m x n that represents a map of land and water cells.",
        "exampleInputs1": "isWater = [[0,1],[0,0]]",
        "exampleOutputs1": "[[1,0],[2,1]]",
        "exampleInputs2": "isWater = [[0,0,1],[1,0,0],[0,0,0]]",
        "exampleOutputs2": "[[1,1,0],[0,1,1],[1,2,2]]"
    },
    {
        "id": 1765,
        "title": "1765. Map of Highest Peak",
        "description": "You have n boxes. You are given a binary string boxes of length n, where boxes[i] is '0' if the ith box is empty, and '1' if it contains one ball.",
        "exampleInputs1": "boxes = \"110\"",
        "exampleOutputs1": "[1,1,3]",
        "exampleInputs2": "boxes = \"001011\"",
        "exampleOutputs2": "[11,8,5,4,3,4]"
    },
    {
        "id": 1769,
        "title": "1769. Minimum Number of Operations to Move All Balls to Each Box",
        "description": "You are given two integer arrays nums and multipliers of size n and m respectively, where n >= m. The arrays are 1-indexed.",
        "exampleInputs1": "nums = [1,2,3], multipliers = [3,2,1]",
        "exampleOutputs1": "14",
        "exampleInputs2": "nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]",
        "exampleOutputs2": "102"
    },
    {
        "id": 1770,
        "title": "1770. Maximum Score from Performing Multiplication Operations",
        "description": "You would like to make dessert and are preparing to buy the ingredients. You have n ice cream base flavors and m types of toppings to choose from. You must follow these rules when making your dessert:",
        "exampleInputs1": "baseCosts = [1,7], toppingCosts = [3,4], target = 10",
        "exampleOutputs1": "10",
        "exampleInputs2": "baseCosts = [2,3], toppingCosts = [4,5,100], target = 18",
        "exampleOutputs2": "17",
        "exampleInputs3": "baseCosts = [3,10], toppingCosts = [2,5], target = 9",
        "exampleOutputs3": "8",
        "exampleInputs4": "baseCosts = [10], toppingCosts = [1], target = 1",
        "exampleOutputs4": "10"
    },
    {
        "id": 1774,
        "title": "1774. Closest Dessert Cost",
        "description": "You are given two arrays of integers nums1 and nums2, possibly of different lengths. The values in the arrays are between 1 and 6, inclusive.",
        "exampleInputs1": "nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums1 = [1,1,1,1,1,1,1], nums2 = [6]",
        "exampleOutputs2": "-1",
        "exampleInputs3": "nums1 = [6,6], nums2 = [1]",
        "exampleOutputs3": "3"
    },
    {
        "id": 1775,
        "title": "1775. Equal Sum Arrays With Minimum Number of Operations",
        "description": "Given an integer n, return true if it is possible to represent n as the sum of distinct powers of three. Otherwise, return false.",
        "exampleInputs1": "n = 12",
        "exampleOutputs1": "true",
        "exampleInputs2": "n = 91",
        "exampleOutputs2": "true",
        "exampleInputs3": "n = 21",
        "exampleOutputs3": "false"
    },
    {
        "id": 1780,
        "title": "1780. Check if Number is a Sum of Powers of Three",
        "description": "The beauty of a string is the difference in frequencies between the most frequent and least frequent characters.",
        "exampleInputs1": "s = \"aabcb\"",
        "exampleOutputs1": "5",
        "exampleInputs2": "s = \"aabcbaa\"",
        "exampleOutputs2": "17"
    },
    {
        "id": 1781,
        "title": "1781. Sum of Beauty of All Substrings",
        "description": "You are given an integer array nums and two integers limit and goal. The array nums has an interesting property that abs(nums[i]) <= limit.",
        "exampleInputs1": "nums = [1,-1,1], limit = 3, goal = -4",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,-10,9,1], limit = 100, goal = 0",
        "exampleOutputs2": "1"
    },
    {
        "id": 1785,
        "title": "1785. Minimum Elements to Add to Form a Given Sum",
        "description": "There is an undirected weighted connected graph. You are given a positive integer n which denotes that the graph has n nodes labeled from 1 to n, and an array edges where each edges[i] = [ui, vi, weighti] denotes that there is an edge between nodes ui and vi with weight equal to weighti.",
        "exampleInputs1": "n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]",
        "exampleOutputs2": "1"
    },
    {
        "id": 1786,
        "title": "1786. Number of Restricted Paths From First to Last Node",
        "description": "There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array classes, where classes[i] = [passi, totali]. You know beforehand that in the ith class, there are totali total students, but only passi number of students will pass the exam.",
        "exampleInputs1": "classes = [[1,2],[3,5],[2,2]], extraStudents = 2",
        "exampleOutputs1": "0.78333",
        "exampleInputs2": "classes = [[2,4],[3,9],[4,5],[2,10]], extraStudents = 4",
        "exampleOutputs2": "0.53485"
    },
    {
        "id": 1792,
        "title": "1792. Maximum Average Pass Ratio",
        "description": "There is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token that will expire timeToLive seconds after the currentTime. If the token is renewed, the expiry time will be extended to expire timeToLive seconds after the (potentially different) currentTime.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"AuthenticationManager\", \"renew\", \"generate\", \"countUnexpiredTokens\", \"generate\", \"renew\", \"renew\", \"countUnexpiredTokens\"]"
    },
    {
        "id": 1797,
        "title": "1797. Design Authentication Manager",
        "description": "You are given an integer array coins of length n which represents the n coins that you own. The value of the ith coin is coins[i]. You can make some value x if you can choose some of your n coins such that their values sum up to x.",
        "exampleInputs1": "coins = [1,3]",
        "exampleOutputs1": "2",
        "exampleInputs2": "coins = [1,1,1,4]",
        "exampleOutputs2": "8",
        "exampleInputs3": "nums = [1,4,10,3,1]",
        "exampleOutputs3": "20"
    },
    {
        "id": 1798,
        "title": "1798. Maximum Number of Consecutive Values You Can Make",
        "description": "You are given a 2D integer array orders, where each orders[i] = [pricei, amounti, orderTypei] denotes that amounti orders have been placed of type orderTypei at the price pricei. The orderTypei is:",
        "exampleInputs1": "orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]",
        "exampleOutputs1": "6",
        "exampleInputs2": "orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]",
        "exampleOutputs2": "999999984"
    },
    {
        "id": 1801,
        "title": "1801. Number of Orders in the Backlog",
        "description": "You are given three positive integers: n, index, and maxSum. You want to construct an array nums (0-indexed) that satisfies the following conditions:",
        "exampleInputs1": "n = 4, index = 2,  maxSum = 6",
        "exampleOutputs1": "2",
        "exampleInputs2": "n = 6, index = 1,  maxSum = 10",
        "exampleOutputs2": "3"
    },
    {
        "id": 1802,
        "title": "1802. Maximum Value at a Given Index in a Bounded Array",
        "description": "You are given an even integer n​​​​​​. You initially have a permutation perm of size n​​ where perm[i] == i​ (0-indexed)​​​​.",
        "exampleInputs1": "n = 2",
        "exampleOutputs1": "1",
        "exampleInputs2": "n = 4",
        "exampleOutputs2": "2",
        "exampleInputs3": "n = 6",
        "exampleOutputs3": "4"
    },
    {
        "id": 1806,
        "title": "1806. Minimum Number of Operations to Reinitialize a Permutation",
        "description": "You are given a string s that contains some bracket pairs, with each pair containing a non-empty key.",
        "exampleInputs1": "s = \"(name)is(age)yearsold\", knowledge = [[\"name\",\"bob\"],[\"age\",\"two\"]]",
        "exampleOutputs1": "\"bobistwoyearsold\"",
        "exampleInputs2": "s = \"hi(name)\", knowledge = [[\"a\",\"b\"]]",
        "exampleOutputs2": "\"hi?\"",
        "exampleInputs3": "s = \"(a)(a)(a)aaa\", knowledge = [[\"a\",\"yes\"]]",
        "exampleOutputs3": "\"yesyesyesaaa\"",
        "exampleInputs4": "s = \"(a)(b)\", knowledge = [[\"a\",\"b\"],[\"b\",\"a\"]]",
        "exampleOutputs4": "\"ba\""
    },
    {
        "id": 1807,
        "title": "1807. Evaluate the Bracket Pairs of a String",
        "description": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, \"Hello World\", \"HELLO\", \"hello world hello world\" are all sentences. Words consist of only uppercase and lowercase English letters.",
        "exampleInputs1": "sentence1 = \"My name is Haley\", sentence2 = \"My Haley\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "sentence1 = \"of\", sentence2 = \"A lot of words\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "sentence1 = \"Eating right now\", sentence2 = \"Eating\"",
        "exampleOutputs3": "true",
        "exampleInputs4": "sentence1 = \"Luky\", sentence2 = \"Lucccky\"",
        "exampleOutputs4": "false"
    },
    {
        "id": 1813,
        "title": "1813. Sentence Similarity III",
        "description": "You are given an array nums that consists of non-negative integers. Let us define rev(x) as the reverse of the non-negative integer x. For example, rev(123) = 321, and rev(120) = 21. A pair of indices (i, j) is nice if it satisfies all of the following conditions:",
        "exampleInputs1": "nums = [42,11,1,97]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [13,10,35,24,76]",
        "exampleOutputs2": "4"
    },
    {
        "id": 1814,
        "title": "1814. Count Nice Pairs in an Array",
        "description": "You are given the logs for users' actions on LeetCode, and an integer k. The logs are represented by a 2D integer array logs where each logs[i] = [IDi, timei] indicates that the user with IDi performed an action at the minute timei.",
        "exampleInputs1": "logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5",
        "exampleOutputs1": "[0,2,0,0,0]",
        "exampleInputs2": "logs = [[1,1],[2,2],[2,3]], k = 4",
        "exampleOutputs2": "[1,1,0,0]"
    },
    {
        "id": 1817,
        "title": "1817. Finding the Users Active Minutes",
        "description": "You are given two positive integer arrays nums1 and nums2, both of length n.",
        "exampleInputs1": "nums1 = [1,7,5], nums2 = [2,3,5]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]",
        "exampleOutputs2": "0",
        "exampleInputs3": "nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]",
        "exampleOutputs3": "20"
    },
    {
        "id": 1818,
        "title": "1818. Minimum Absolute Sum Difference",
        "description": "There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.",
        "exampleInputs1": "n = 5, k = 2",
        "exampleOutputs1": "3",
        "exampleInputs2": "n = 6, k = 5",
        "exampleOutputs2": "1"
    },
    {
        "id": 1823,
        "title": "1823. Find the Winner of the Circular Game",
        "description": "There is a 3 lane road of length n that consists of n + 1 points labeled from 0 to n. A frog starts at point 0 in the second lane and wants to jump to point n. However, there could be obstacles along the way.",
        "exampleInputs1": "obstacles = [0,1,2,3,0]",
        "exampleOutputs1": "2",
        "exampleInputs2": "obstacles = [0,1,1,3,3,0]",
        "exampleOutputs2": "0",
        "exampleInputs3": "obstacles = [0,2,1,0,3,0]",
        "exampleOutputs3": "2"
    },
    {
        "id": 1824,
        "title": "1824. Minimum Sideway Jumps",
        "description": "You are given an array points where points[i] = [xi, yi] is the coordinates of the ith point on a 2D plane. Multiple points can have the same coordinates.",
        "exampleInputs1": "points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]]",
        "exampleOutputs1": "[3,2,2]",
        "exampleInputs2": "points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]]",
        "exampleOutputs2": "[2,3,2,4]"
    },
    {
        "id": 1828,
        "title": "1828. Queries on Number of Points Inside a Circle",
        "description": "You are given a sorted array nums of n non-negative integers and an integer maximumBit. You want to perform the following query n times:",
        "exampleInputs1": "nums = [0,1,1,3], maximumBit = 2",
        "exampleOutputs1": "[0,3,2,3]",
        "exampleInputs2": "nums = [2,3,4,7], maximumBit = 3",
        "exampleOutputs2": "[5,2,6,5]",
        "exampleInputs3": "nums = [0,1,2,2,5,7], maximumBit = 3",
        "exampleOutputs3": "[4,3,6,4,6,7]"
    },
    {
        "id": 1829,
        "title": "1829. Maximum XOR for Each Query",
        "description": "It is a sweltering summer day, and a boy wants to buy some ice cream bars.",
        "exampleInputs1": "costs = [1,3,2,4,1], coins = 7",
        "exampleOutputs1": "4",
        "exampleInputs2": "costs = [10,6,8,7,7,8], coins = 5",
        "exampleOutputs2": "0",
        "exampleInputs3": "costs = [1,6,3,1,2,5], coins = 20",
        "exampleOutputs3": "6"
    },
    {
        "id": 1833,
        "title": "1833. Maximum Ice Cream Bars",
        "description": "You are given n​​​​​​ tasks labeled from 0 to n - 1 represented by a 2D integer array tasks, where tasks[i] = [enqueueTimei, processingTimei] means that the i​​​​​​th​​​​ task will be available to process at enqueueTimei and will take processingTimei to finish processing.",
        "exampleInputs1": "tasks = [[1,2],[2,4],[3,2],[4,1]]",
        "exampleOutputs1": "[0,2,3,1]",
        "exampleInputs2": "tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]",
        "exampleOutputs2": "[4,3,2,0,1]"
    },
    {
        "id": 1834,
        "title": "1834. Single-Threaded CPU",
        "description": "The frequency of an element is the number of times it occurs in an array.",
        "exampleInputs1": "nums = [1,2,4], k = 5",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [1,4,8,13], k = 5",
        "exampleOutputs2": "2",
        "exampleInputs3": "nums = [3,9,6], k = 2",
        "exampleOutputs3": "1"
    },
    {
        "id": 1838,
        "title": "1838. Frequency of the Most Frequent Element",
        "description": "A string is considered beautiful if it satisfies the following conditions:",
        "exampleInputs1": "word = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\"",
        "exampleOutputs1": "13",
        "exampleInputs2": "word = \"aeeeiiiioooauuuaeiou\"",
        "exampleOutputs2": "5",
        "exampleInputs3": "word = \"a\"",
        "exampleOutputs3": "0"
    },
    {
        "id": 1839,
        "title": "1839. Longest Substring Of All Vowels in Order",
        "description": "Design a system that manages the reservation state of n seats that are numbered from 1 to n.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"SeatManager\", \"reserve\", \"reserve\", \"unreserve\", \"reserve\", \"reserve\", \"reserve\", \"reserve\", \"unreserve\"]"
    },
    {
        "id": 1845,
        "title": "1845. Seat Reservation Manager",
        "description": "You are given an array of positive integers arr. Perform some operations (possibly none) on arr so that it satisfies these conditions:",
        "exampleInputs1": "arr = [2,2,1,2,1]",
        "exampleOutputs1": "2",
        "exampleInputs2": "arr = [100,1,1000]",
        "exampleOutputs2": "3",
        "exampleInputs3": "arr = [1,2,3,4,5]",
        "exampleOutputs3": "5"
    },
    {
        "id": 1846,
        "title": "1846. Maximum Element After Decreasing and Rearranging",
        "description": "You are given a string s that consists of only digits.",
        "exampleInputs1": "s = \"1234\"",
        "exampleOutputs1": "false",
        "exampleInputs2": "s = \"050043\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "s = \"9080701\"",
        "exampleOutputs3": "false",
        "exampleInputs4": "s = \"10009998\"",
        "exampleOutputs4": "true"
    },
    {
        "id": 1849,
        "title": "1849. Splitting a String Into Descending Consecutive Values",
        "description": "You are given a string num, representing a large integer, and an integer k.",
        "exampleInputs1": "num = \"5489355142\", k = 4",
        "exampleOutputs1": "2",
        "exampleInputs2": "num = \"11112\", k = 4",
        "exampleOutputs2": "4",
        "exampleInputs3": "num = \"00123\", k = 1",
        "exampleOutputs3": "1"
    },
    {
        "id": 1850,
        "title": "1850. Minimum Adjacent Swaps to Reach the Kth Smallest Number",
        "description": "You are given two non-increasing 0-indexed integer arrays nums1​​​​​​ and nums2​​​​​​.",
        "exampleInputs1": "nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums1 = [2,2,2], nums2 = [10,10,1]",
        "exampleOutputs2": "1",
        "exampleInputs3": "nums1 = [30,29,19,5], nums2 = [25,25,25,25,25]",
        "exampleOutputs3": "2",
        "exampleInputs4": "nums1 = [5,4], nums2 = [3,2]",
        "exampleOutputs4": "0"
    },
    {
        "id": 1855,
        "title": "1855. Maximum Distance Between a Pair of Values",
        "description": "The min-product of an array is equal to the minimum value in the array multiplied by the array's sum.",
        "exampleInputs1": "nums = [1,2,3,2]",
        "exampleOutputs1": "14",
        "exampleInputs2": "nums = [2,3,3,1,2]",
        "exampleOutputs2": "18",
        "exampleInputs3": "nums = [3,1,5,6,4,2]",
        "exampleOutputs3": "60"
    },
    {
        "id": 1856,
        "title": "1856. Maximum Subarray Min-Product",
        "description": "You are given two integers memory1 and memory2 representing the available memory in bits on two memory sticks. There is currently a faulty program running that consumes an increasing amount of memory every second.",
        "exampleInputs1": "memory1 = 2, memory2 = 2",
        "exampleOutputs1": "[3,1,0]",
        "exampleInputs2": "memory1 = 8, memory2 = 11",
        "exampleOutputs2": "[6,0,4]"
    },
    {
        "id": 1860,
        "title": "1860. Incremental Memory Leak",
        "description": "You are given an m x n matrix of characters box representing a side-view of a box. Each cell of the box is one of the following:",
        "exampleInputs1": "box = [[\"#\",\".\",\"#\"]]",
        "exampleOutputs1": "[[\".\"],",
        "exampleInputs2": "box = [[\"#\",\".\",\"*\",\".\"],",
        "exampleOutputs2": "[\"#\",\"#\",\"*\",\".\"]]",
        "exampleInputs3": "box = [[\"#\",\"#\",\"*\",\".\",\"*\",\".\"],",
        "exampleOutputs3": "[\"#\",\"#\",\"#\",\"*\",\".\",\".\"],"
    },
    {
        "id": 1861,
        "title": "1861. Rotating the Box",
        "description": "Given a binary string s, return the minimum number of character swaps to make it alternating, or -1 if it is impossible.",
        "exampleInputs1": "s = \"111000\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "s = \"010\"",
        "exampleOutputs2": "0",
        "exampleInputs3": "s = \"1110\"",
        "exampleOutputs3": "-1"
    },
    {
        "id": 1864,
        "title": "1864. Minimum Number of Swaps to Make the Binary String Alternating",
        "description": "You are given two integer arrays nums1 and nums2. You are tasked to implement a data structure that supports queries of two types:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"FindSumPairs\", \"count\", \"add\", \"count\", \"count\", \"add\", \"add\", \"count\"]"
    },
    {
        "id": 1865,
        "title": "1865. Finding Pairs With a Certain Sum",
        "description": "You are given a floating-point number hour, representing the amount of time you have to reach the office. To commute to the office, you must take n trains in sequential order. You are also given an integer array dist of length n, where dist[i] describes the distance (in kilometers) of the ith train ride.",
        "exampleInputs1": "dist = [1,3,2], hour = 6",
        "exampleOutputs1": "1",
        "exampleInputs2": "dist = [1,3,2], hour = 2.7",
        "exampleOutputs2": "3",
        "exampleInputs3": "dist = [1,3,2], hour = 1.9",
        "exampleOutputs3": "-1"
    },
    {
        "id": 1870,
        "title": "1870. Minimum Speed to Arrive on Time",
        "description": "You are given a 0-indexed binary string s and two integers minJump and maxJump. In the beginning, you are standing at index 0, which is equal to '0'. You can move from index i to index j if the following conditions are fulfilled:",
        "exampleInputs1": "s = \"011010\", minJump = 2, maxJump = 3",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"01101110\", minJump = 2, maxJump = 3",
        "exampleOutputs2": "false"
    },
    {
        "id": 1871,
        "title": "1871. Jump Game VII",
        "description": "The pair sum of a pair (a,b) is equal to a + b. The maximum pair sum is the largest pair sum in a list of pairs.",
        "exampleInputs1": "nums = [3,5,2,3]",
        "exampleOutputs1": "7",
        "exampleInputs2": "nums = [3,5,4,2,4,6]",
        "exampleOutputs2": "8"
    },
    {
        "id": 1877,
        "title": "1877. Minimize Maximum Pair Sum in Array",
        "description": "You are given an m x n integer matrix grid​​​.",
        "exampleInputs1": "grid = [[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]]",
        "exampleOutputs1": "[228,216,211]",
        "exampleInputs2": "grid = [[1,2,3],[4,5,6],[7,8,9]]",
        "exampleOutputs2": "[20,9,8]",
        "exampleInputs3": "grid = [[7,7,7]]",
        "exampleOutputs3": "[7]"
    },
    {
        "id": 1878,
        "title": "1878. Get Biggest Three Rhombus Sums in a Grid",
        "description": "You are given a very large integer n, represented as a string,​​​​​​ and an integer digit x. The digits in n and the digit x are in the inclusive range [1, 9], and n may represent a negative number.",
        "exampleInputs1": "n = \"99\", x = 9",
        "exampleOutputs1": "\"999\"",
        "exampleInputs2": "n = \"-13\", x = 2",
        "exampleOutputs2": "\"-123\""
    },
    {
        "id": 1881,
        "title": "1881. Maximum Value after Insertion",
        "description": "You are given two 0-indexed integer arrays servers and tasks of lengths n​​​​​​ and m​​​​​​ respectively. servers[i] is the weight of the i​​​​​​th​​​​ server, and tasks[j] is the time needed to process the j​​​​​​th​​​​ task in seconds.",
        "exampleInputs1": "servers = [3,3,2], tasks = [1,2,3,2,1,2]",
        "exampleOutputs1": "[2,2,0,2,1,2]",
        "exampleInputs2": "servers = [5,1,4,3,2], tasks = [2,1,2,4,5,2,1]",
        "exampleOutputs2": "[1,4,1,4,1,3,2]"
    },
    {
        "id": 1882,
        "title": "1882. Process Tasks Using Servers",
        "description": "You are given two identical eggs and you have access to a building with n floors labeled from 1 to n.",
        "exampleInputs1": "n = 2",
        "exampleOutputs1": "2",
        "exampleInputs2": "n = 100",
        "exampleOutputs2": "14"
    },
    {
        "id": 1884,
        "title": "1884. Egg Drop With 2 Eggs and N Floors",
        "description": "Given an integer array nums, your goal is to make all elements in nums equal. To complete one operation, follow these steps:",
        "exampleInputs1": "nums = [5,1,3]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [1,1,1]",
        "exampleOutputs2": "0",
        "exampleInputs3": "nums = [1,1,2,2,3]",
        "exampleOutputs3": "4"
    },
    {
        "id": 1887,
        "title": "1887. Reduction Operations to Make the Array Elements Equal",
        "description": "You are given a binary string s. You are allowed to perform two types of operations on the string in any sequence:",
        "exampleInputs1": "s = \"111000\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"010\"",
        "exampleOutputs2": "0",
        "exampleInputs3": "s = \"1110\"",
        "exampleOutputs3": "1"
    },
    {
        "id": 1888,
        "title": "1888. Minimum Number of Flips to Make the Binary String Alternating",
        "description": "There are n students in a class numbered from 0 to n - 1. The teacher will give each student a problem starting with the student number 0, then the student number 1, and so on until the teacher reaches the student number n - 1. After that, the teacher will restart the process, starting with the student number 0 again.",
        "exampleInputs1": "chalk = [5,1,5], k = 22",
        "exampleOutputs1": "0",
        "exampleInputs2": "chalk = [3,4,1,2], k = 25",
        "exampleOutputs2": "1"
    },
    {
        "id": 1894,
        "title": "1894. Find the Student that Will Replace the Chalk",
        "description": "A k x k magic square is a k x k grid filled with integers such that every row sum, every column sum, and both diagonal sums are all equal. The integers in the magic square do not have to be distinct. Every 1 x 1 grid is trivially a magic square.",
        "exampleInputs1": "grid = [[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "grid = [[5,1,3,1],[9,3,3,1],[1,3,3,8]]",
        "exampleOutputs2": "2"
    },
    {
        "id": 1895,
        "title": "1895. Largest Magic Square",
        "description": "You are given two strings s and p where p is a subsequence of s. You are also given a distinct 0-indexed integer array removable containing a subset of indices of s (s is also 0-indexed).",
        "exampleInputs1": "s = \"abcacb\", p = \"ab\", removable = [3,1,0]",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"abcbddddd\", p = \"abcd\", removable = [3,2,1,4,5,6]",
        "exampleOutputs2": "1",
        "exampleInputs3": "s = \"abcab\", p = \"abc\", removable = [0,1,2,3,4]",
        "exampleOutputs3": "0"
    },
    {
        "id": 1898,
        "title": "1898. Maximum Number of Removable Characters",
        "description": "A triplet is an array of three integers. You are given a 2D integer array triplets, where triplets[i] = [ai, bi, ci] describes the ith triplet. You are also given an integer array target = [x, y, z] that describes the triplet you want to obtain.",
        "exampleInputs1": "triplets = [[2,5,3],[1,8,4],[1,7,5]], target = [2,7,5]",
        "exampleOutputs1": "true",
        "exampleInputs2": "triplets = [[1,3,4],[2,5,8]], target = [2,5,8]",
        "exampleOutputs2": "true",
        "exampleInputs3": "triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]], target = [5,5,5]",
        "exampleOutputs3": "true",
        "exampleInputs4": "triplets = [[3,4,5],[4,5,6]], target = [3,2,5]",
        "exampleOutputs4": "false"
    },
    {
        "id": 1899,
        "title": "1899. Merge Triplets to Form Target Triplet",
        "description": "A peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.",
        "exampleInputs1": "mat = [[1,4],[3,2]]",
        "exampleOutputs1": "[0,1]",
        "exampleInputs2": "mat = [[10,20,15],[21,30,14],[7,16,32]]",
        "exampleOutputs2": "[1,1]"
    },
    {
        "id": 1901,
        "title": "1901. Find a Peak Element II",
        "description": "A new online video game has been released, and in this video game, there are 15-minute rounds scheduled every quarter-hour period. This means that at HH:00, HH:15, HH:30 and HH:45, a new round starts, where HH represents an integer number from 00 to 23. A 24-hour clock is used, so the earliest time in the day is 00:00 and the latest is 23:59.",
        "exampleInputs1": "startTime = \"12:01\", finishTime = \"12:44\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "startTime = \"20:00\", finishTime = \"06:00\"",
        "exampleOutputs2": "40",
        "exampleInputs3": "startTime = \"00:00\", finishTime = \"23:59\"",
        "exampleOutputs3": "95"
    },
    {
        "id": 1904,
        "title": "1904. The Number of Full Rounds You Have Played",
        "description": "You are given two m x n binary matrices grid1 and grid2 containing only 0's (representing water) and 1's (representing land). An island is a group of 1's connected 4-directionally (horizontal or vertical). Any cells outside of the grid are considered water cells.",
        "exampleInputs1": "grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "grid1 = [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]], grid2 = [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]",
        "exampleOutputs2": "2"
    },
    {
        "id": 1905,
        "title": "1905. Count Sub Islands",
        "description": "The minimum absolute difference of an array a is defined as the minimum value of |a[i] - a[j]|, where 0 <= i < j < a.length and a[i] != a[j]. If all elements of a are the same, the minimum absolute difference is -1.",
        "exampleInputs1": "nums = [1,3,4,8], queries = [[0,1],[1,2],[2,3],[0,3]]",
        "exampleOutputs1": "[2,1,4,1]",
        "exampleInputs2": "nums = [4,5,2,2,7,10], queries = [[2,3],[0,2],[0,5],[3,5]]",
        "exampleOutputs2": "[-1,1,1,3]"
    },
    {
        "id": 1906,
        "title": "1906. Minimum Absolute Difference Queries",
        "description": "Given two strings s and part, perform the following operation on s until all occurrences of the substring part are removed:",
        "exampleInputs1": "s = \"daabcbaabcbc\", part = \"abc\"",
        "exampleOutputs1": "\"dab\"",
        "exampleInputs2": "s = \"axxxxyyyyb\", part = \"xy\"",
        "exampleOutputs2": "\"ab\""
    },
    {
        "id": 1910,
        "title": "1910. Remove All Occurrences of a Substring",
        "description": "The alternating sum of a 0-indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices.",
        "exampleInputs1": "nums = [4,2,5,3]",
        "exampleOutputs1": "7",
        "exampleInputs2": "nums = [5,6,7,8]",
        "exampleOutputs2": "8",
        "exampleInputs3": "nums = [6,2,1,2,4,5]",
        "exampleOutputs3": "10"
    },
    {
        "id": 1911,
        "title": "1911. Maximum Alternating Subsequence Sum",
        "description": "You are given an m x n integer matrix grid​​​, where m and n are both even integers, and an integer k.",
        "exampleInputs1": "grid = [[40,10],[30,20]], k = 1",
        "exampleOutputs1": "[[10,20],[40,30]]",
        "exampleInputs2": "grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 2",
        "exampleOutputs2": "[[3,4,8,12],[2,11,10,16],[1,7,6,15],[5,9,13,14]]"
    },
    {
        "id": 1914,
        "title": "1914. Cyclically Rotating a Grid",
        "description": "A wonderful string is a string where at most one letter appears an odd number of times.",
        "exampleInputs1": "word = \"aba\"",
        "exampleOutputs1": "4",
        "exampleInputs2": "word = \"aabb\"",
        "exampleOutputs2": "9",
        "exampleInputs3": "word = \"he\"",
        "exampleOutputs3": "2"
    },
    {
        "id": 1915,
        "title": "1915. Number of Wonderful Substrings",
        "description": "You are playing a video game where you are defending your city from a group of n monsters. You are given a 0-indexed integer array dist of size n, where dist[i] is the initial distance in kilometers of the ith monster from the city.",
        "exampleInputs1": "dist = [1,3,4], speed = [1,1,1]",
        "exampleOutputs1": "3",
        "exampleInputs2": "dist = [1,1,2,3], speed = [1,1,1,1]",
        "exampleOutputs2": "1",
        "exampleInputs3": "dist = [3,2,4], speed = [5,3,2]",
        "exampleOutputs3": "1"
    },
    {
        "id": 1921,
        "title": "1921. Eliminate Maximum Number of Monsters",
        "description": "A digit string is good if the digits (0-indexed) at even indices are even and the digits at odd indices are prime (2, 3, 5, or 7).",
        "exampleInputs1": "n = 1",
        "exampleOutputs1": "5",
        "exampleInputs2": "n = 4",
        "exampleOutputs2": "400",
        "exampleInputs3": "n = 50",
        "exampleOutputs3": "564908303"
    },
    {
        "id": 1922,
        "title": "1922. Count Good Numbers",
        "description": "You are given an m x n matrix maze (0-indexed) with empty cells (represented as '.') and walls (represented as '+'). You are also given the entrance of the maze, where entrance = [entrancerow, entrancecol] denotes the row and column of the cell you are initially standing at.",
        "exampleInputs1": "maze = [[\"+\",\"+\",\".\",\"+\"],[\".\",\".\",\".\",\"+\"],[\"+\",\"+\",\"+\",\".\"]], entrance = [1,2]",
        "exampleOutputs1": "1",
        "exampleInputs2": "maze = [[\"+\",\"+\",\"+\"],[\".\",\".\",\".\"],[\"+\",\"+\",\"+\"]], entrance = [1,0]",
        "exampleOutputs2": "2",
        "exampleInputs3": "maze = [[\".\",\"+\"]], entrance = [0,0]",
        "exampleOutputs3": "-1"
    },
    {
        "id": 1926,
        "title": "1926. Nearest Exit from Entrance in Maze",
        "description": "Alice and Bob take turns playing a game, with Alice starting first.",
        "exampleInputs1": "num = \"5023\"",
        "exampleOutputs1": "false",
        "exampleInputs2": "num = \"25??\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "num = \"?3295???\"",
        "exampleOutputs3": "false"
    },
    {
        "id": 1927,
        "title": "1927. Sum Game",
        "description": "Given a string s, return the number of unique palindromes of length three that are a subsequence of s.",
        "exampleInputs1": "s = \"aabca\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "s = \"adc\"",
        "exampleOutputs2": "0",
        "exampleInputs3": "s = \"bbcbaba\"",
        "exampleOutputs3": "4"
    },
    {
        "id": 1930,
        "title": "1930. Unique Length-3 Palindromic Subsequences",
        "description": "You are given a strictly increasing integer array rungs that represents the height of rungs on a ladder. You are currently on the floor at height 0, and you want to reach the last rung.",
        "exampleInputs1": "rungs = [1,3,5,10], dist = 2",
        "exampleOutputs1": "2",
        "exampleInputs2": "rungs = [3,6,8,10], dist = 3",
        "exampleOutputs2": "0",
        "exampleInputs3": "rungs = [3,4,6,7], dist = 2",
        "exampleOutputs3": "1",
        "exampleInputs4": "rungs = [5], dist = 10",
        "exampleOutputs4": "0"
    },
    {
        "id": 1936,
        "title": "1936. Add Minimum Number of Rungs",
        "description": "You are given an m x n integer matrix points (0-indexed). Starting with 0 points, you want to maximize the number of points you can get from the matrix.",
        "exampleInputs1": "points = [[1,2,3],[1,5,1],[3,1,1]]",
        "exampleOutputs1": "9",
        "exampleInputs2": "points = [[1,5],[2,3],[4,2]]",
        "exampleOutputs2": "11"
    },
    {
        "id": 1937,
        "title": "1937. Maximum Number of Points with Cost",
        "description": "There is a party where n friends numbered from 0 to n - 1 are attending. There is an infinite number of chairs in this party that are numbered from 0 to infinity. When a friend arrives at the party, they sit on the unoccupied chair with the smallest number.",
        "exampleInputs1": "times = [[1,4],[2,3],[4,6]], targetFriend = 1",
        "exampleOutputs1": "1",
        "exampleInputs2": "times = [[3,10],[1,5],[2,6]], targetFriend = 0",
        "exampleOutputs2": "2"
    },
    {
        "id": 1942,
        "title": "1942. The Number of the Smallest Unoccupied Chair",
        "description": "There is a long and thin painting that can be represented by a number line. The painting was painted with multiple overlapping segments where each segment was painted with a unique color. You are given a 2D integer array segments, where segments[i] = [starti, endi, colori] represents the half-closed segment [starti, endi) with colori as the color.",
        "exampleInputs1": "segments = [[1,4,5],[4,7,7],[1,7,9]]",
        "exampleOutputs1": "[[1,4,14],[4,7,16]]",
        "exampleInputs2": "segments = [[1,7,9],[6,8,15],[8,10,7]]",
        "exampleOutputs2": "[[1,6,9],[6,7,24],[7,8,15],[8,10,7]]",
        "exampleInputs3": "segments = [[1,4,5],[1,4,7],[4,7,1],[4,7,11]]",
        "exampleOutputs3": "[[1,4,12],[4,7,12]]"
    },
    {
        "id": 1943,
        "title": "1943. Describe the Painting",
        "description": "You are given a string num, which represents a large integer. You are also given a 0-indexed integer array change of length 10 that maps each digit 0-9 to another digit. More formally, digit d maps to digit change[d].",
        "exampleInputs1": "num = \"132\", change = [9,8,5,0,3,6,4,2,6,8]",
        "exampleOutputs1": "\"832\"",
        "exampleInputs2": "num = \"021\", change = [9,4,3,5,7,2,1,9,0,6]",
        "exampleOutputs2": "\"934\"",
        "exampleInputs3": "num = \"5\", change = [1,4,7,5,3,2,5,6,9,4]",
        "exampleOutputs3": "\"5\""
    },
    {
        "id": 1946,
        "title": "1946. Largest Number After Mutating Substring",
        "description": "There is a survey that consists of n questions where each question's answer is either 0 (no) or 1 (yes).",
        "exampleInputs1": "students = [[1,1,0],[1,0,1],[0,0,1]], mentors = [[1,0,0],[0,0,1],[1,1,0]]",
        "exampleOutputs1": "8",
        "exampleInputs2": "students = [[0,0],[0,0],[0,0]], mentors = [[1,1],[1,1],[1,1]]",
        "exampleOutputs2": "0"
    },
    {
        "id": 1947,
        "title": "1947. Maximum Compatibility Score Sum",
        "description": "There are n projects numbered from 0 to n - 1. You are given an integer array milestones where each milestones[i] denotes the number of milestones the ith project has.",
        "exampleInputs1": "milestones = [1,2,3]",
        "exampleOutputs1": "6",
        "exampleInputs2": "milestones = [5,2,1]",
        "exampleOutputs2": "7"
    },
    {
        "id": 1953,
        "title": "1953. Maximum Number of Weeks for Which You Can Work",
        "description": "In a garden represented as an infinite 2D grid, there is an apple tree planted at every integer coordinate. The apple tree planted at an integer coordinate (i, j) has |i| + |j| apples growing on it.",
        "exampleInputs1": "neededApples = 1",
        "exampleOutputs1": "8",
        "exampleInputs2": "neededApples = 13",
        "exampleOutputs2": "16",
        "exampleInputs3": "neededApples = 1000000000",
        "exampleOutputs3": "5040"
    },
    {
        "id": 1954,
        "title": "1954. Minimum Garden Perimeter to Collect Enough Apples",
        "description": "You are given a 0-indexed 8 x 8 grid board, where board[r][c] represents the cell (r, c) on a game board. On the board, free cells are represented by '.', white cells are represented by 'W', and black cells are represented by 'B'.",
        "exampleInputs1": "board = [[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\"W\",\"B\",\"B\",\".\",\"W\",\"W\",\"W\",\"B\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"]], rMove = 4, cMove = 3, color = \"B\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"B\",\".\",\".\",\"W\",\".\",\".\",\".\"],[\".\",\".\",\"W\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\"B\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\"B\",\"W\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\"W\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"B\"]], rMove = 4, cMove = 4, color = \"W\"",
        "exampleOutputs2": "false"
    },
    {
        "id": 1958,
        "title": "1958. Check if Move is Legal",
        "description": "You are currently designing a dynamic array. You are given a 0-indexed integer array nums, where nums[i] is the number of elements that will be in the array at time i. In addition, you are given an integer k, the maximum number of times you can resize the array (to any size).",
        "exampleInputs1": "nums = [10,20], k = 0",
        "exampleOutputs1": "10",
        "exampleInputs2": "nums = [10,20,30], k = 1",
        "exampleOutputs2": "10",
        "exampleInputs3": "nums = [10,20,15,30,20], k = 2",
        "exampleOutputs3": "15"
    },
    {
        "id": 1959,
        "title": "1959. Minimum Total Space Wasted With K Resizing Operations",
        "description": "You are given a 0-indexed integer array piles, where piles[i] represents the number of stones in the ith pile, and an integer k. You should apply the following operation exactly k times:",
        "exampleInputs1": "piles = [5,4,9], k = 2",
        "exampleOutputs1": "12",
        "exampleInputs2": "piles = [4,3,6,7], k = 3",
        "exampleOutputs2": "12"
    },
    {
        "id": 1962,
        "title": "1962. Remove Stones to Minimize the Total",
        "description": "You are given a 0-indexed string s of even length n. The string consists of exactly n / 2 opening brackets '[' and n / 2 closing brackets ']'.",
        "exampleInputs1": "s = \"][][\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "s = \"]]][[[\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "s = \"[]\"",
        "exampleOutputs3": "0"
    },
    {
        "id": 1963,
        "title": "1963. Minimum Number of Swaps to Make the String Balanced",
        "description": "You are given a 0-indexed array nums of distinct integers. You want to rearrange the elements in the array such that every element in the rearranged array is not equal to the average of its neighbors.",
        "exampleInputs1": "nums = [1,2,3,4,5]",
        "exampleOutputs1": "[1,2,4,5,3]",
        "exampleInputs2": "nums = [6,2,0,9,7]",
        "exampleOutputs2": "[9,7,6,2,0]"
    },
    {
        "id": 1968,
        "title": "1968. Array With Elements Not Equal to Average of Neighbors",
        "description": "You are given a positive integer p. Consider an array nums (1-indexed) that consists of the integers in the inclusive range [1, 2p - 1] in their binary representations. You are allowed to do the following operation any number of times:",
        "exampleInputs1": "p = 1",
        "exampleOutputs1": "1",
        "exampleInputs2": "p = 2",
        "exampleOutputs2": "6",
        "exampleInputs3": "p = 3",
        "exampleOutputs3": "1512"
    },
    {
        "id": 1969,
        "title": "1969. Minimum Non-Zero Product of the Array Elements",
        "description": "You are given an n x n integer matrix. You can do the following operation any number of times:",
        "exampleInputs1": "matrix = [[1,-1],[-1,1]]",
        "exampleOutputs1": "4",
        "exampleInputs2": "matrix = [[1,2,3],[-1,-2,-3],[1,2,3]]",
        "exampleOutputs2": "16"
    },
    {
        "id": 1975,
        "title": "1975. Maximum Matrix Sum",
        "description": "You are in a city that consists of n intersections numbered from 0 to n - 1 with bi-directional roads between some intersections. The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.",
        "exampleInputs1": "n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]",
        "exampleOutputs1": "4",
        "exampleInputs2": "n = 2, roads = [[1,0,10]]",
        "exampleOutputs2": "1"
    },
    {
        "id": 1976,
        "title": "1976. Number of Ways to Arrive at Destination",
        "description": "Given an array of strings nums containing n unique binary strings each of length n, return a binary string of length n that does not appear in nums. If there are multiple answers, you may return any of them.",
        "exampleInputs1": "nums = [\"01\",\"10\"]",
        "exampleOutputs1": "\"11\"",
        "exampleInputs2": "nums = [\"00\",\"01\"]",
        "exampleOutputs2": "\"11\"",
        "exampleInputs3": "nums = [\"111\",\"011\",\"001\"]",
        "exampleOutputs3": "\"101\""
    },
    {
        "id": 1980,
        "title": "1980. Find Unique Binary String",
        "description": "You are given an m x n integer matrix mat and an integer target.",
        "exampleInputs1": "mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13",
        "exampleOutputs1": "0",
        "exampleInputs2": "mat = [[1],[2],[3]], target = 100",
        "exampleOutputs2": "94",
        "exampleInputs3": "mat = [[1,2,9,8,7]], target = 6",
        "exampleOutputs3": "1"
    },
    {
        "id": 1981,
        "title": "1981. Minimize the Difference Between Target and Chosen Elements",
        "description": "You are given an array of strings nums and an integer k. Each string in nums represents an integer without leading zeros.",
        "exampleInputs1": "nums = [\"3\",\"6\",\"7\",\"10\"], k = 4",
        "exampleOutputs1": "\"3\"",
        "exampleInputs2": "nums = [\"2\",\"21\",\"12\",\"1\"], k = 3",
        "exampleOutputs2": "\"2\"",
        "exampleInputs3": "nums = [\"0\",\"0\"], k = 2",
        "exampleOutputs3": "\"0\""
    },
    {
        "id": 1985,
        "title": "1985. Find the Kth Largest Integer in the Array",
        "description": "There are n tasks assigned to you. The task times are represented as an integer array tasks of length n, where the ith task takes tasks[i] hours to finish. A work session is when you work for at most sessionTime consecutive hours and then take a break.",
        "exampleInputs1": "tasks = [1,2,3], sessionTime = 3",
        "exampleOutputs1": "2",
        "exampleInputs2": "tasks = [3,1,3,1,1], sessionTime = 8",
        "exampleOutputs2": "2",
        "exampleInputs3": "tasks = [1,2,3,4,5], sessionTime = 15",
        "exampleOutputs3": "1"
    },
    {
        "id": 1986,
        "title": "1986. Minimum Number of Work Sessions to Finish the Tasks",
        "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.",
        "exampleInputs1": "nums1 = [1,3], nums2 = [2]",
        "exampleOutputs1": "2.00000",
        "exampleInputs2": "nums1 = [1,2], nums2 = [3,4]",
        "exampleOutputs2": "2.50000",
        "exampleInputs3": "nums1 = [0,0], nums2 = [0,0]",
        "exampleOutputs3": "0.00000",
        "exampleInputs4": "nums1 = [], nums2 = [1]",
        "exampleOutputs4": "1.00000",
        "exampleInputs5": "nums1 = [2], nums2 = []",
        "exampleOutputs5": "2.00000"
    },
    {
        "id": 4,
        "title": "4. Median of Two Sorted Arrays",
        "description": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:",
        "exampleInputs1": "s = \"aa\", p = \"a\"",
        "exampleOutputs1": "false",
        "exampleInputs2": "s = \"aa\", p = \"a*\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "s = \"ab\", p = \".*\"",
        "exampleOutputs3": "true",
        "exampleInputs4": "s = \"aab\", p = \"c*a*b\"",
        "exampleOutputs4": "true",
        "exampleInputs5": "s = \"mississippi\", p = \"mis*is*p*.\"",
        "exampleOutputs5": "false"
    },
    {
        "id": 10,
        "title": "10. Regular Expression Matching",
        "description": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.",
        "exampleInputs1": "lists = [[1,4,5],[1,3,4],[2,6]]",
        "exampleOutputs1": "[1,1,2,3,4,4,5,6]",
        "exampleInputs2": "lists = []",
        "exampleOutputs2": "[]",
        "exampleInputs3": "lists = [[]]",
        "exampleOutputs3": "[]"
    },
    {
        "id": 23,
        "title": "23. Merge k Sorted Lists",
        "description": "Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.",
        "exampleInputs1": "head = [1,2,3,4,5], k = 2",
        "exampleOutputs1": "[2,1,4,3,5]",
        "exampleInputs2": "head = [1,2,3,4,5], k = 3",
        "exampleOutputs2": "[3,2,1,4,5]",
        "exampleInputs3": "head = [1,2,3,4,5], k = 1",
        "exampleOutputs3": "[1,2,3,4,5]",
        "exampleInputs4": "head = [1], k = 1",
        "exampleOutputs4": "[1]"
    },
    {
        "id": 25,
        "title": "25. Reverse Nodes in k-Group",
        "description": "You are given a string s and an array of strings words of the same length. Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, in any order, and without any intervening characters.",
        "exampleInputs1": "s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]",
        "exampleOutputs1": "[0,9]",
        "exampleInputs2": "s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]",
        "exampleOutputs2": "[]",
        "exampleInputs3": "s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]",
        "exampleOutputs3": "[6,9,12]"
    },
    {
        "id": 30,
        "title": "30. Substring with Concatenation of All Words",
        "description": "Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.",
        "exampleInputs1": "s = \"(()\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \")()())\"",
        "exampleOutputs2": "4",
        "exampleInputs3": "s = \"\"",
        "exampleOutputs3": "0"
    },
    {
        "id": 32,
        "title": "32. Longest Valid Parentheses",
        "description": "Write a program to solve a Sudoku puzzle by filling the empty cells.",
        "exampleInputs1": "board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
        "exampleOutputs1": "[[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]"
    },
    {
        "id": 37,
        "title": "37. Sudoku Solver",
        "description": "Given an unsorted integer array nums, return the smallest missing positive integer.",
        "exampleInputs1": "nums = [1,2,0]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [3,4,-1,1]",
        "exampleOutputs2": "2",
        "exampleInputs3": "nums = [7,8,9,11,12]",
        "exampleOutputs3": "1"
    },
    {
        "id": 41,
        "title": "41. First Missing Positive",
        "description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.",
        "exampleInputs1": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "exampleOutputs1": "6",
        "exampleInputs2": "height = [4,2,0,3,2,5]",
        "exampleOutputs2": "9"
    },
    {
        "id": 42,
        "title": "42. Trapping Rain Water",
        "description": "Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:",
        "exampleInputs1": "s = \"aa\", p = \"a\"",
        "exampleOutputs1": "false",
        "exampleInputs2": "s = \"aa\", p = \"*\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "s = \"cb\", p = \"?a\"",
        "exampleOutputs3": "false",
        "exampleInputs4": "s = \"adceb\", p = \"*a*b\"",
        "exampleOutputs4": "true",
        "exampleInputs5": "s = \"acdcb\", p = \"a*c?b\"",
        "exampleOutputs5": "false"
    },
    {
        "id": 44,
        "title": "44. Wildcard Matching",
        "description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.",
        "exampleInputs1": "n = 4",
        "exampleOutputs1": "[[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]",
        "exampleInputs2": "n = 1",
        "exampleOutputs2": "[[\"Q\"]]"
    },
    {
        "id": 51,
        "title": "51. N-Queens",
        "description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.",
        "exampleInputs1": "n = 4",
        "exampleOutputs1": "2",
        "exampleInputs2": "n = 1",
        "exampleOutputs2": "1"
    },
    {
        "id": 52,
        "title": "52. N-Queens II",
        "description": "The set [1, 2, 3, ..., n] contains a total of n! unique permutations.",
        "exampleInputs1": "n = 3, k = 3",
        "exampleOutputs1": "\"213\"",
        "exampleInputs2": "n = 4, k = 9",
        "exampleOutputs2": "\"2314\"",
        "exampleInputs3": "n = 3, k = 1",
        "exampleOutputs3": "\"123\""
    },
    {
        "id": 60,
        "title": "60. Permutation Sequence",
        "description": "A valid number can be split up into these components (in order):",
        "exampleInputs1": "s = \"0\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"e\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "s = \".\"",
        "exampleOutputs3": "false",
        "exampleInputs4": "s = \".1\"",
        "exampleOutputs4": "true"
    },
    {
        "id": 65,
        "title": "65. Valid Number",
        "description": "Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.",
        "exampleInputs1": "words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16",
        "exampleOutputs1": "",
        "exampleInputs2": "words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16",
        "exampleOutputs2": "",
        "exampleInputs3": "words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20",
        "exampleOutputs3": ""
    },
    {
        "id": 68,
        "title": "68. Text Justification",
        "description": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.",
        "exampleInputs1": "word1 = \"horse\", word2 = \"ros\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "word1 = \"intention\", word2 = \"execution\"",
        "exampleOutputs2": "5"
    },
    {
        "id": 72,
        "title": "72. Edit Distance",
        "description": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".",
        "exampleInputs1": "s = \"ADOBECODEBANC\", t = \"ABC\"",
        "exampleOutputs1": "\"BANC\"",
        "exampleInputs2": "s = \"a\", t = \"a\"",
        "exampleOutputs2": "\"a\"",
        "exampleInputs3": "s = \"a\", t = \"aa\"",
        "exampleOutputs3": "\"\""
    },
    {
        "id": 76,
        "title": "76. Minimum Window Substring",
        "description": "Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.",
        "exampleInputs1": "heights = [2,1,5,6,2,3]",
        "exampleOutputs1": "10",
        "exampleInputs2": "heights = [2,4]",
        "exampleOutputs2": "4"
    },
    {
        "id": 84,
        "title": "84. Largest Rectangle in Histogram",
        "description": "Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.",
        "exampleInputs1": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]",
        "exampleOutputs1": "6",
        "exampleInputs2": "matrix = []",
        "exampleOutputs2": "0",
        "exampleInputs3": "matrix = [[\"0\"]]",
        "exampleOutputs3": "0",
        "exampleInputs4": "matrix = [[\"1\"]]",
        "exampleOutputs4": "1",
        "exampleInputs5": "matrix = [[\"0\",\"0\"]]",
        "exampleOutputs5": "0"
    },
    {
        "id": 85,
        "title": "85. Maximal Rectangle",
        "description": "We can scramble a string s to get a string t using the following algorithm:",
        "exampleInputs1": "s1 = \"great\", s2 = \"rgeat\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s1 = \"abcde\", s2 = \"caebd\"",
        "exampleOutputs2": "false",
        "exampleInputs3": "s1 = \"a\", s2 = \"a\"",
        "exampleOutputs3": "true"
    },
    {
        "id": 87,
        "title": "87. Scramble String",
        "description": "Given two strings s and t, return the number of distinct subsequences of s which equals t.",
        "exampleInputs1": "s = \"rabbbit\", t = \"rabbit\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "s = \"babgbag\", t = \"bag\"",
        "exampleOutputs2": "5"
    },
    {
        "id": 115,
        "title": "115. Distinct Subsequences",
        "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day.",
        "exampleInputs1": "prices = [3,3,5,0,0,3,1,4]",
        "exampleOutputs1": "6",
        "exampleInputs2": "prices = [1,2,3,4,5]",
        "exampleOutputs2": "4",
        "exampleInputs3": "prices = [7,6,4,3,1]",
        "exampleOutputs3": "0",
        "exampleInputs4": "prices = [1]",
        "exampleOutputs4": "0"
    },
    {
        "id": 123,
        "title": "123. Best Time to Buy and Sell Stock III",
        "description": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.",
        "exampleInputs1": "root = [1,2,3]",
        "exampleOutputs1": "6",
        "exampleInputs2": "root = [-10,9,20,null,null,15,7]",
        "exampleOutputs2": "42"
    },
    {
        "id": 124,
        "title": "124. Binary Tree Maximum Path Sum",
        "description": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:",
        "exampleInputs1": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
        "exampleOutputs1": "[[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]",
        "exampleInputs2": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]",
        "exampleOutputs2": "[]"
    },
    {
        "id": 126,
        "title": "126. Word Ladder II",
        "description": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:",
        "exampleInputs1": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
        "exampleOutputs1": "5",
        "exampleInputs2": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]",
        "exampleOutputs2": "0"
    },
    {
        "id": 127,
        "title": "127. Word Ladder",
        "description": "Given a string s, partition s such that every substring of the partition is a palindrome.",
        "exampleInputs1": "s = \"aab\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "s = \"a\"",
        "exampleOutputs2": "0",
        "exampleInputs3": "s = \"ab\"",
        "exampleOutputs3": "1"
    },
    {
        "id": 132,
        "title": "132. Palindrome Partitioning II",
        "description": "There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.",
        "exampleInputs1": "ratings = [1,0,2]",
        "exampleOutputs1": "5",
        "exampleInputs2": "ratings = [1,2,2]",
        "exampleOutputs2": "4"
    },
    {
        "id": 135,
        "title": "135. Candy",
        "description": "Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.",
        "exampleInputs1": "s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]",
        "exampleOutputs1": "[\"cats and dog\",\"cat sand dog\"]",
        "exampleInputs2": "s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]",
        "exampleOutputs2": "[\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]",
        "exampleInputs3": "s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]",
        "exampleOutputs3": "[]"
    },
    {
        "id": 140,
        "title": "140. Word Break II",
        "description": "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.",
        "exampleInputs1": "points = [[1,1],[2,2],[3,3]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]",
        "exampleOutputs2": "4"
    },
    {
        "id": 149,
        "title": "149. Max Points on a Line",
        "description": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:",
        "exampleInputs1": "nums = [1,3,5]",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [2,2,2,0,1]",
        "exampleOutputs2": "0"
    },
    {
        "id": 154,
        "title": "154. Find Minimum in Rotated Sorted Array II",
        "description": "Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.",
        "exampleInputs1": "nums = [3,6,9,1]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [10]",
        "exampleOutputs2": "0"
    },
    {
        "id": 164,
        "title": "164. Maximum Gap",
        "description": "The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.",
        "exampleInputs1": "dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]",
        "exampleOutputs1": "7",
        "exampleInputs2": "dungeon = [[0]]",
        "exampleOutputs2": "1"
    },
    {
        "id": 174,
        "title": "174. Dungeon Game",
        "description": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.",
        "exampleInputs1": "k = 2, prices = [2,4,1]",
        "exampleOutputs1": "2",
        "exampleInputs2": "k = 2, prices = [3,2,6,5,0,3]",
        "exampleOutputs2": "7"
    },
    {
        "id": 188,
        "title": "188. Best Time to Buy and Sell Stock IV",
        "description": "Given an m x n board of characters and a list of strings words, return all words on the board.",
        "exampleInputs1": "board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]",
        "exampleOutputs1": "[\"eat\",\"oath\"]",
        "exampleInputs2": "board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]",
        "exampleOutputs2": "[]"
    },
    {
        "id": 212,
        "title": "212. Word Search II",
        "description": "You are given a string s. You can convert s to a palindrome by adding characters in front of it.",
        "exampleInputs1": "s = \"aacecaaa\"",
        "exampleOutputs1": "\"aaacecaaa\"",
        "exampleInputs2": "s = \"abcd\"",
        "exampleOutputs2": "\"dcbabcd\""
    },
    {
        "id": 214,
        "title": "214. Shortest Palindrome",
        "description": "A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.",
        "exampleInputs1": "buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]",
        "exampleOutputs1": "[[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]",
        "exampleInputs2": "buildings = [[0,2,3],[2,5,3]]",
        "exampleOutputs2": "[[0,3],[5,0]]"
    },
    {
        "id": 218,
        "title": "218. The Skyline Problem",
        "description": "Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.",
        "exampleInputs1": "s = \"1 + 1\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \" 2-1 + 2 \"",
        "exampleOutputs2": "3",
        "exampleInputs3": "s = \"(1+(4+5+2)-3)+(6+8)\"",
        "exampleOutputs3": "23"
    },
    {
        "id": 224,
        "title": "224. Basic Calculator",
        "description": "Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.",
        "exampleInputs1": "n = 13",
        "exampleOutputs1": "6",
        "exampleInputs2": "n = 0",
        "exampleOutputs2": "0"
    },
    {
        "id": 233,
        "title": "233. Number of Digit One",
        "description": "You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.",
        "exampleInputs1": "nums = [1,3,-1,-3,5,3,6,7], k = 3",
        "exampleOutputs1": "[3,3,5,5,6,7]",
        "exampleInputs2": "nums = [1], k = 1",
        "exampleOutputs2": "[1]",
        "exampleInputs3": "nums = [1,-1], k = 1",
        "exampleOutputs3": "[1,-1]",
        "exampleInputs4": "nums = [9,11], k = 2",
        "exampleOutputs4": "[11]",
        "exampleInputs5": "nums = [4,-2], k = 2",
        "exampleOutputs5": "[4]"
    },
    {
        "id": 239,
        "title": "239. Sliding Window Maximum",
        "description": "Convert a non-negative integer num to its English words representation.",
        "exampleInputs1": "num = 123",
        "exampleOutputs1": "\"One Hundred Twenty Three\"",
        "exampleInputs2": "num = 12345",
        "exampleOutputs2": "\"Twelve Thousand Three Hundred Forty Five\"",
        "exampleInputs3": "num = 1234567",
        "exampleOutputs3": "\"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"",
        "exampleInputs4": "num = 1234567891",
        "exampleOutputs4": "\"One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One\""
    },
    {
        "id": 273,
        "title": "273. Integer to English Words",
        "description": "Given a string num that contains only digits and an integer target, return all possibilities to add the binary operators '+', '-', or '*' between the digits of num so that the resultant expression evaluates to the target value.",
        "exampleInputs1": "num = \"123\", target = 6",
        "exampleOutputs1": "[\"1*2*3\",\"1+2+3\"]",
        "exampleInputs2": "num = \"232\", target = 8",
        "exampleOutputs2": "[\"2*3+2\",\"2+3*2\"]",
        "exampleInputs3": "num = \"105\", target = 5",
        "exampleOutputs3": "[\"1*0+5\",\"10-5\"]",
        "exampleInputs4": "num = \"00\", target = 0",
        "exampleOutputs4": "[\"0*0\",\"0+0\",\"0-0\"]",
        "exampleInputs5": "num = \"3456237490\", target = 9191",
        "exampleOutputs5": "[]"
    },
    {
        "id": 282,
        "title": "282. Expression Add Operators",
        "description": "The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]"
    },
    {
        "id": 295,
        "title": "295. Find Median from Data Stream",
        "description": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.",
        "exampleInputs1": "root = [1,2,3,null,null,4,5]",
        "exampleOutputs1": "[1,2,3,null,null,4,5]",
        "exampleInputs2": "root = []",
        "exampleOutputs2": "[]",
        "exampleInputs3": "root = [1]",
        "exampleOutputs3": "[1]",
        "exampleInputs4": "root = [1,2]",
        "exampleOutputs4": "[1,2]"
    },
    {
        "id": 297,
        "title": "297. Serialize and Deserialize Binary Tree",
        "description": "Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.",
        "exampleInputs1": "s = \"()())()\"",
        "exampleOutputs1": "[\"(())()\",\"()()()\"]",
        "exampleInputs2": "s = \"(a)())()\"",
        "exampleOutputs2": "[\"(a())()\",\"(a)()()\"]",
        "exampleInputs3": "s = \")(\"",
        "exampleOutputs3": "[\"\"]"
    },
    {
        "id": 301,
        "title": "301. Remove Invalid Parentheses",
        "description": "You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.",
        "exampleInputs1": "nums = [3,1,5,8]",
        "exampleOutputs1": "167",
        "exampleInputs2": "nums = [1,5]",
        "exampleOutputs2": "10"
    },
    {
        "id": 312,
        "title": "312. Burst Balloons",
        "description": "You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].",
        "exampleInputs1": "nums = [5,2,6,1]",
        "exampleOutputs1": "[2,1,1,0]",
        "exampleInputs2": "nums = [-1]",
        "exampleOutputs2": "[0]",
        "exampleInputs3": "nums = [-1,-1]",
        "exampleOutputs3": "[0,0]"
    },
    {
        "id": 315,
        "title": "315. Count of Smaller Numbers After Self",
        "description": "You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.",
        "exampleInputs1": "nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5",
        "exampleOutputs1": "[9,8,6,5,3]",
        "exampleInputs2": "nums1 = [6,7], nums2 = [6,0,4], k = 5",
        "exampleOutputs2": "[6,7,6,0,4]",
        "exampleInputs3": "nums1 = [3,9], nums2 = [8,9], k = 3",
        "exampleOutputs3": "[9,8,9]"
    },
    {
        "id": 321,
        "title": "321. Create Maximum Number",
        "description": "Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.",
        "exampleInputs1": "nums = [-2,5,-1], lower = -2, upper = 2",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [0], lower = 0, upper = 0",
        "exampleOutputs2": "1"
    },
    {
        "id": 327,
        "title": "327. Count of Range Sum",
        "description": "Given an m x n integers matrix, return the length of the longest increasing path in matrix.",
        "exampleInputs1": "matrix = [[9,9,4],[6,6,8],[2,1,1]]",
        "exampleOutputs1": "4",
        "exampleInputs2": "matrix = [[3,4,5],[3,2,6],[2,2,1]]",
        "exampleOutputs2": "4",
        "exampleInputs3": "matrix = [[1]]",
        "exampleOutputs3": "1"
    },
    {
        "id": 329,
        "title": "329. Longest Increasing Path in a Matrix",
        "description": "Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.",
        "exampleInputs1": "nums = [1,3], n = 6",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [1,5,10], n = 20",
        "exampleOutputs2": "2",
        "exampleInputs3": "nums = [1,2,2], n = 5",
        "exampleOutputs3": "0"
    },
    {
        "id": 330,
        "title": "330. Patching Array",
        "description": "You are given an array of integers distance.",
        "exampleInputs1": "distance = [2,1,1,2]",
        "exampleOutputs1": "true",
        "exampleInputs2": "distance = [1,2,3,4]",
        "exampleOutputs2": "false",
        "exampleInputs3": "distance = [1,1,1,1]",
        "exampleOutputs3": "true"
    },
    {
        "id": 335,
        "title": "335. Self Crossing",
        "description": "Given a list of unique words, return all the pairs of the distinct indices (i, j) in the given list, so that the concatenation of the two words words[i] + words[j] is a palindrome.",
        "exampleInputs1": "words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]",
        "exampleOutputs1": "[[0,1],[1,0],[3,2],[2,4]]",
        "exampleInputs2": "words = [\"bat\",\"tab\",\"cat\"]",
        "exampleOutputs2": "[[0,1],[1,0]]",
        "exampleInputs3": "words = [\"a\",\"\"]",
        "exampleOutputs3": "[[0,1],[1,0]]"
    },
    {
        "id": 336,
        "title": "336. Palindrome Pairs",
        "description": "Given a data stream input of non-negative integers a1, a2, ..., an, summarize the numbers seen so far as a list of disjoint intervals.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]"
    },
    {
        "id": 352,
        "title": "352. Data Stream as Disjoint Intervals",
        "description": "You are given a 2D array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope.",
        "exampleInputs1": "envelopes = [[5,4],[6,4],[6,7],[2,3]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "envelopes = [[1,1],[1,1],[1,1]]",
        "exampleOutputs2": "1"
    },
    {
        "id": 354,
        "title": "354. Russian Doll Envelopes",
        "description": "Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.",
        "exampleInputs1": "matrix = [[1,0,1],[0,-2,3]], k = 2",
        "exampleOutputs1": "2",
        "exampleInputs2": "matrix = [[2,2,-1]], k = 3",
        "exampleOutputs2": "3"
    },
    {
        "id": 363,
        "title": "363. Max Sum of Rectangle No Larger Than K",
        "description": "Implement the RandomizedCollection class:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]"
    },
    {
        "id": 381,
        "title": "381. Insert Delete GetRandom O(1) - Duplicates allowed",
        "description": "Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).",
        "exampleInputs1": "rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]",
        "exampleOutputs1": "true",
        "exampleInputs2": "rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]",
        "exampleOutputs2": "false",
        "exampleInputs3": "rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[3,2,4,4]]",
        "exampleOutputs3": "false",
        "exampleInputs4": "rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]",
        "exampleOutputs4": "false"
    },
    {
        "id": 391,
        "title": "391. Perfect Rectangle",
        "description": "A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.",
        "exampleInputs1": "stones = [0,1,3,5,6,8,12,17]",
        "exampleOutputs1": "true",
        "exampleInputs2": "stones = [0,1,2,3,4,8,9,11]",
        "exampleOutputs2": "false"
    },
    {
        "id": 403,
        "title": "403. Frog Jump",
        "description": "Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.",
        "exampleInputs1": "heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]",
        "exampleOutputs1": "4",
        "exampleInputs2": "heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]",
        "exampleOutputs2": "10"
    },
    {
        "id": 407,
        "title": "407. Trapping Rain Water II",
        "description": "Given an array nums which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays.",
        "exampleInputs1": "nums = [7,2,5,10,8], m = 2",
        "exampleOutputs1": "18",
        "exampleInputs2": "nums = [1,2,3,4,5], m = 2",
        "exampleOutputs2": "9",
        "exampleInputs3": "nums = [1,4,4], m = 3",
        "exampleOutputs3": "4"
    },
    {
        "id": 410,
        "title": "410. Split Array Largest Sum",
        "description": "A password is considered strong if the below conditions are all met:",
        "exampleInputs1": "password = \"a\"",
        "exampleOutputs1": "5",
        "exampleInputs2": "password = \"aA1\"",
        "exampleOutputs2": "3",
        "exampleInputs3": "password = \"1337C0d3\"",
        "exampleOutputs3": "0"
    },
    {
        "id": 420,
        "title": "420. Strong Password Checker",
        "description": "Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]"
    },
    {
        "id": 432,
        "title": "432. All O`one Data Structure",
        "description": "Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].",
        "exampleInputs1": "n = 13, k = 2",
        "exampleOutputs1": "10",
        "exampleInputs2": "n = 1, k = 1",
        "exampleOutputs2": "1"
    },
    {
        "id": 440,
        "title": "440. K-th Smallest in Lexicographical Order",
        "description": "Given an integer array nums, return the number of all the arithmetic subsequences of nums.",
        "exampleInputs1": "nums = [2,4,6,8,10]",
        "exampleOutputs1": "7",
        "exampleInputs2": "nums = [7,7,7,7,7]",
        "exampleOutputs2": "16"
    },
    {
        "id": 446,
        "title": "446. Arithmetic Slices II - Subsequence",
        "description": "There are buckets buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have minutesToTest minutes to determine which bucket is poisonous.",
        "exampleInputs1": "buckets = 1000, minutesToDie = 15, minutesToTest = 60",
        "exampleOutputs1": "5",
        "exampleInputs2": "buckets = 4, minutesToDie = 15, minutesToTest = 15",
        "exampleOutputs2": "2",
        "exampleInputs3": "buckets = 4, minutesToDie = 15, minutesToTest = 30",
        "exampleOutputs3": "2"
    },
    {
        "id": 458,
        "title": "458. Poor Pigs",
        "description": "Design and implement a data structure for a Least Frequently Used (LFU) cache.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]"
    },
    {
        "id": 460,
        "title": "460. LFU Cache",
        "description": "We define str = [s, n] as the string str which consists of the string s concatenated n times.",
        "exampleInputs1": "s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2",
        "exampleOutputs1": "2",
        "exampleInputs2": "s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1",
        "exampleOutputs2": "1"
    },
    {
        "id": 466,
        "title": "466. Count The Repetitions",
        "description": "Given an array of strings words (without duplicates), return all the concatenated words in the given list of words.",
        "exampleInputs1": "words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]",
        "exampleOutputs1": "[\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]",
        "exampleInputs2": "words = [\"cat\",\"dog\",\"catdog\"]",
        "exampleOutputs2": "[\"catdog\"]"
    },
    {
        "id": 472,
        "title": "472. Concatenated Words",
        "description": "Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. Since the answer can be very large, return it modulo 1337.",
        "exampleInputs1": "n = 2",
        "exampleOutputs1": "987",
        "exampleInputs2": "n = 1",
        "exampleOutputs2": "9"
    },
    {
        "id": 479,
        "title": "479. Largest Palindrome Product",
        "description": "The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.",
        "exampleInputs1": "nums = [1,3,-1,-3,5,3,6,7], k = 3",
        "exampleOutputs1": "[1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]",
        "exampleInputs2": "nums = [1,2,3,4,2,3,1,4,2], k = 3",
        "exampleOutputs2": "[2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]"
    },
    {
        "id": 480,
        "title": "480. Sliding Window Median",
        "description": "Given an integer n represented as a string, return the smallest good base of n.",
        "exampleInputs1": "n = \"13\"",
        "exampleOutputs1": "\"3\"",
        "exampleInputs2": "n = \"4681\"",
        "exampleOutputs2": "\"8\"",
        "exampleInputs3": "n = \"1000000000000000000\"",
        "exampleOutputs3": "\"999999999999999999\""
    },
    {
        "id": 483,
        "title": "483. Smallest Good Base",
        "description": "You are playing a variation of the game Zuma.",
        "exampleInputs1": "board = \"WRRBBW\", hand = \"RB\"",
        "exampleOutputs1": "-1",
        "exampleInputs2": "board = \"WWRRBBWW\", hand = \"WRBRW\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "board = \"G\", hand = \"GGGGG\"",
        "exampleOutputs3": "2",
        "exampleInputs4": "board = \"RBYYBBRRB\", hand = \"YRBGB\"",
        "exampleOutputs4": "3"
    },
    {
        "id": 488,
        "title": "488. Zuma Game",
        "description": "Given an integer array nums, return the number of reverse pairs in the array.",
        "exampleInputs1": "nums = [1,3,2,3,1]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [2,4,3,5,1]",
        "exampleOutputs2": "3"
    },
    {
        "id": 493,
        "title": "493. Reverse Pairs",
        "description": "Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects.",
        "exampleInputs1": "k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]",
        "exampleOutputs1": "4",
        "exampleInputs2": "k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]",
        "exampleOutputs2": "6"
    },
    {
        "id": 502,
        "title": "502. IPO",
        "description": "In the video game Fallout 4, the quest \"Road to Freedom\" requires players to reach a metal dial called the \"Freedom Trail Ring\" and use the dial to spell a specific keyword to open the door.",
        "exampleInputs1": "ring = \"godding\", key = \"gd\"",
        "exampleOutputs1": "4",
        "exampleInputs2": "ring = \"godding\", key = \"godding\"",
        "exampleOutputs2": "13"
    },
    {
        "id": 514,
        "title": "514. Freedom Trail",
        "description": "You have n super washing machines on a line. Initially, each washing machine has some dresses or is empty.",
        "exampleInputs1": "machines = [1,0,5]",
        "exampleOutputs1": "3",
        "exampleInputs2": "machines = [0,3,0]",
        "exampleOutputs2": "2",
        "exampleInputs3": "machines = [0,2,0]",
        "exampleOutputs3": "-1"
    },
    {
        "id": 517,
        "title": "517. Super Washing Machines",
        "description": "You are given several boxes with different colors represented by different positive numbers.",
        "exampleInputs1": "boxes = [1,3,2,2,2,3,4,3,1]",
        "exampleOutputs1": "23",
        "exampleInputs2": "boxes = [1,1,1]",
        "exampleOutputs2": "9",
        "exampleInputs3": "boxes = [1]",
        "exampleOutputs3": "1"
    },
    {
        "id": 546,
        "title": "546. Remove Boxes",
        "description": "An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:",
        "exampleInputs1": "n = 2",
        "exampleOutputs1": "8",
        "exampleInputs2": "n = 1",
        "exampleOutputs2": "3",
        "exampleInputs3": "n = 10101",
        "exampleOutputs3": "183236316"
    },
    {
        "id": 552,
        "title": "552. Student Attendance Record II",
        "description": "Given a string n representing an integer, return the closest integer (not including itself), which is a palindrome. If there is a tie, return the smaller one.",
        "exampleInputs1": "n = \"123\"",
        "exampleOutputs1": "\"121\"",
        "exampleInputs2": "n = \"1\"",
        "exampleOutputs2": "\"0\""
    },
    {
        "id": 564,
        "title": "564. Find the Closest Palindrome",
        "description": "You are given an array trees where trees[i] = [xi, yi] represents the location of a tree in the garden.",
        "exampleInputs1": "points = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]",
        "exampleOutputs1": "[[1,1],[2,0],[3,3],[2,4],[4,2]]",
        "exampleInputs2": "points = [[1,2],[2,2],[4,2]]",
        "exampleOutputs2": "[[4,2],[2,2],[1,2]]"
    },
    {
        "id": 587,
        "title": "587. Erect the Fence",
        "description": "Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.",
        "exampleInputs1": "code = \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "code = \"<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "code = \"<A>  <B> </A>   </B>\"",
        "exampleOutputs3": "false",
        "exampleInputs4": "code = \"<DIV>  div tag is not closed  <DIV>\"",
        "exampleOutputs4": "false"
    },
    {
        "id": 591,
        "title": "591. Tag Validator",
        "description": "Given a positive integer n, return the number of the integers in the range [0, n] whose binary representations do not contain consecutive ones.",
        "exampleInputs1": "n = 5",
        "exampleOutputs1": "5",
        "exampleInputs2": "n = 1",
        "exampleOutputs2": "2",
        "exampleInputs3": "n = 2",
        "exampleOutputs3": "3"
    },
    {
        "id": 600,
        "title": "600. Non-negative Integers without Consecutive Ones",
        "description": "For an integer array nums, an inverse pair is a pair of integers [i, j] where 0 <= i < j < nums.length and nums[i] > nums[j].",
        "exampleInputs1": "n = 3, k = 0",
        "exampleOutputs1": "1",
        "exampleInputs2": "n = 3, k = 1",
        "exampleOutputs2": "2"
    },
    {
        "id": 629,
        "title": "629. K Inverse Pairs Array",
        "description": "There are n different online courses numbered from 1 to n. You are given an array courses where courses[i] = [durationi, lastDayi] indicate that the ith course should be taken continuously for durationi days and must be finished before or on lastDayi.",
        "exampleInputs1": "courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "courses = [[1,2]]",
        "exampleOutputs2": "1",
        "exampleInputs3": "courses = [[3,2],[4,3]]",
        "exampleOutputs3": "0"
    },
    {
        "id": 630,
        "title": "630. Course Schedule III",
        "description": "You have k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists.",
        "exampleInputs1": "nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]",
        "exampleOutputs1": "[20,24]",
        "exampleInputs2": "nums = [[1,2,3],[1,2,3],[1,2,3]]",
        "exampleOutputs2": "[1,1]",
        "exampleInputs3": "nums = [[10,10],[11,11]]",
        "exampleOutputs3": "[10,11]",
        "exampleInputs4": "nums = [[10],[11]]",
        "exampleOutputs4": "[10,11]",
        "exampleInputs5": "nums = [[1],[2],[3],[4],[5],[6],[7]]",
        "exampleOutputs5": "[1,7]"
    },
    {
        "id": 632,
        "title": "632. Smallest Range Covering Elements from K Lists",
        "description": "A message containing letters from A-Z can be encoded into numbers using the following mapping:",
        "exampleInputs1": "'A' -> \"1\"",
        "exampleOutputs1": "'B' -> \"2\"",
        "exampleInputs2": "s = \"*\"",
        "exampleOutputs2": "9",
        "exampleInputs3": "s = \"1*\"",
        "exampleOutputs3": "18",
        "exampleInputs4": "s = \"2*\"",
        "exampleOutputs4": "15"
    },
    {
        "id": 639,
        "title": "639. Decode Ways II",
        "description": "There is a strange printer with the following two special properties:",
        "exampleInputs1": "s = \"aaabbb\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"aba\"",
        "exampleOutputs2": "2"
    },
    {
        "id": 664,
        "title": "664. Strange Printer",
        "description": "Nearly everyone has used the Multiplication Table. The multiplication table of size m x n is an integer matrix mat where mat[i][j] == i * j (1-indexed).",
        "exampleInputs1": "m = 3, n = 3, k = 5",
        "exampleOutputs1": "3",
        "exampleInputs2": "m = 2, n = 3, k = 6",
        "exampleOutputs2": "6"
    },
    {
        "id": 668,
        "title": "668. Kth Smallest Number in Multiplication Table",
        "description": "You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an m x n matrix. In this matrix:",
        "exampleInputs1": "forest = [[1,2,3],[0,0,4],[7,6,5]]",
        "exampleOutputs1": "6",
        "exampleInputs2": "forest = [[1,2,3],[0,0,0],[7,6,5]]",
        "exampleOutputs2": "-1",
        "exampleInputs3": "forest = [[2,3,4],[0,0,5],[8,7,6]]",
        "exampleOutputs3": "6"
    },
    {
        "id": 675,
        "title": "675. Cut Off Trees for Golf Event",
        "description": "You are given an integer array cards of length 4. You have four cards, each containing a number in the range [1, 9]. You should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24.",
        "exampleInputs1": "cards = [4,1,8,7]",
        "exampleOutputs1": "true",
        "exampleInputs2": "cards = [1,2,1,2]",
        "exampleOutputs2": "false"
    },
    {
        "id": 679,
        "title": "679. 24 Game",
        "description": "In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.",
        "exampleInputs1": "edges = [[1,2],[1,3],[2,3]]",
        "exampleOutputs1": "[2,3]",
        "exampleInputs2": "edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]",
        "exampleOutputs2": "[4,1]"
    },
    {
        "id": 685,
        "title": "685. Redundant Connection II",
        "description": "Given an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them.",
        "exampleInputs1": "nums = [1,2,1,2,6,7,5,1], k = 2",
        "exampleOutputs1": "[0,3,5]",
        "exampleInputs2": "nums = [1,2,1,2,1,2,1,2,1], k = 2",
        "exampleOutputs2": "[0,2,4]"
    },
    {
        "id": 689,
        "title": "689. Maximum Sum of 3 Non-Overlapping Subarrays",
        "description": "We are given n different types of stickers. Each sticker has a lowercase English word on it.",
        "exampleInputs1": "stickers = [\"with\",\"example\",\"science\"], target = \"thehat\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "stickers = [\"notice\",\"possible\"], target = \"basicbasic\"",
        "exampleOutputs2": "-1"
    },
    {
        "id": 691,
        "title": "691. Stickers to Spell Word",
        "description": "There are several squares being dropped onto the X-axis of a 2D plane.",
        "exampleInputs1": "positions = [[1,2],[2,3],[6,1]]",
        "exampleOutputs1": "[2,5,5]",
        "exampleInputs2": "positions = [[100,100],[200,100]]",
        "exampleOutputs2": "[100,100]"
    },
    {
        "id": 699,
        "title": "699. Falling Squares",
        "description": "You are given an integer n and an array of unique integers blacklist. Design an algorithm to pick a random integer in the range [0, n - 1] that is not in blacklist. Any integer that is in the mentioned range and not in blacklist should be equally likely returned.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]"
    },
    {
        "id": 710,
        "title": "710. Random Pick with Blacklist",
        "description": "A Range Module is a module that tracks ranges of numbers. Design a data structure to track the ranges represented as half-open intervals and query about them.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"RangeModule\", \"addRange\", \"removeRange\", \"queryRange\", \"queryRange\", \"queryRange\"]"
    },
    {
        "id": 715,
        "title": "715. Range Module",
        "description": "The distance of a pair of integers a and b is defined as the absolute difference between a and b.",
        "exampleInputs1": "nums = [1,3,1], k = 1",
        "exampleOutputs1": "0",
        "exampleInputs2": "nums = [1,1,1], k = 2",
        "exampleOutputs2": "0",
        "exampleInputs3": "nums = [1,6,1], k = 3",
        "exampleOutputs3": "5"
    },
    {
        "id": 719,
        "title": "719. Find K-th Smallest Pair Distance",
        "description": "Given a string formula representing a chemical formula, return the count of each atom.",
        "exampleInputs1": "formula = \"H2O\"",
        "exampleOutputs1": "\"H2O\"",
        "exampleInputs2": "formula = \"Mg(OH)2\"",
        "exampleOutputs2": "\"H2MgO2\"",
        "exampleInputs3": "formula = \"K4(ON(SO3)2)2\"",
        "exampleOutputs3": "\"K4N2O14S4\"",
        "exampleInputs4": "formula = \"Be32\"",
        "exampleOutputs4": "\"Be32\""
    },
    {
        "id": 726,
        "title": "726. Number of Atoms",
        "description": "Given a string s, return the number of different non-empty palindromic subsequences in s. Since the answer may be very large, return it modulo 109 + 7.",
        "exampleInputs1": "s = \"bccb\"",
        "exampleOutputs1": "6",
        "exampleInputs2": "s = \"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba\"",
        "exampleOutputs2": "104860361"
    },
    {
        "id": 730,
        "title": "730. Count Different Palindromic Subsequences",
        "description": "A k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.)",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"MyCalendarThree\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]"
    },
    {
        "id": 732,
        "title": "732. My Calendar III",
        "description": "You are given a string expression representing a Lisp-like expression to return the integer value of.",
        "exampleInputs1": "expression = \"(let x 2 (mult x (let x 3 y 4 (add x y))))\"",
        "exampleOutputs1": "14",
        "exampleInputs2": "expression = \"(let x 3 x 2 x)\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "expression = \"(let x 1 y 2 x (add x y) (add x y))\"",
        "exampleOutputs3": "5",
        "exampleInputs4": "expression = \"(let x 2 (add (let x 3 (let x 4 x)) x))\"",
        "exampleOutputs4": "6",
        "exampleInputs5": "expression = \"(let a1 3 b2 (add a1 1) b2)\"",
        "exampleOutputs5": "4"
    },
    {
        "id": 736,
        "title": "736. Parse Lisp Expression",
        "description": "You are given an n x n grid representing a field of cherries, each cell is one of three possible integers.",
        "exampleInputs1": "grid = [[0,1,-1],[1,0,-1],[1,1,1]]",
        "exampleOutputs1": "5",
        "exampleInputs2": "grid = [[1,1,-1],[1,-1,1],[-1,1,1]]",
        "exampleOutputs2": "0"
    },
    {
        "id": 741,
        "title": "741. Cherry Pickup",
        "description": "Design a special dictionary with some words that searchs the words in it by a prefix and a suffix.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"WordFilter\", \"f\"]"
    },
    {
        "id": 745,
        "title": "745. Prefix and Suffix Search",
        "description": "A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.",
        "exampleInputs1": "isInfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]",
        "exampleOutputs1": "10",
        "exampleInputs2": "isInfected = [[1,1,1],[1,0,1],[1,1,1]]",
        "exampleOutputs2": "4",
        "exampleInputs3": "isInfected = [[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]",
        "exampleOutputs3": "13"
    },
    {
        "id": 749,
        "title": "749. Contain Virus",
        "description": "There is a safe protected by a password. The password is a sequence of n digits where each digit can be in the range [0, k - 1].",
        "exampleInputs1": "n = 1, k = 2",
        "exampleOutputs1": "\"10\"",
        "exampleInputs2": "n = 2, k = 2",
        "exampleOutputs2": "\"01100\""
    },
    {
        "id": 753,
        "title": "753. Cracking the Safe",
        "description": "An integer interval [a, b] (for integers a < b) is a set of all consecutive integers from a to b, including a and b.",
        "exampleInputs1": "intervals = [[1,3],[1,4],[2,5],[3,5]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "intervals = [[1,2],[2,3],[2,4],[4,5]]",
        "exampleOutputs2": "5"
    },
    {
        "id": 757,
        "title": "757. Set Intersection Size At Least Two",
        "description": "Special binary strings are binary strings with the following two properties:",
        "exampleInputs1": "s = \"11011000\"",
        "exampleOutputs1": "\"11100100\"",
        "exampleInputs2": "s = \"10\"",
        "exampleOutputs2": "\"10\""
    },
    {
        "id": 761,
        "title": "761. Special Binary String",
        "description": "There are n couples sitting in 2n seats arranged in a row and want to hold hands.",
        "exampleInputs1": "row = [0,2,1,3]",
        "exampleOutputs1": "1",
        "exampleInputs2": "row = [3,2,0,1]",
        "exampleOutputs2": "0"
    },
    {
        "id": 765,
        "title": "765. Couples Holding Hands",
        "description": "You are given an integer array arr.",
        "exampleInputs1": "arr = [5,4,3,2,1]",
        "exampleOutputs1": "1",
        "exampleInputs2": "arr = [2,1,3,4,4]",
        "exampleOutputs2": "4"
    },
    {
        "id": 768,
        "title": "768. Max Chunks To Make Sorted II",
        "description": "Given an expression such as expression = \"e + 8 - a + 5\" and an evaluation map such as {\"e\": 1} (given in terms of evalvars = [\"e\"] and evalints = [1]), return a list of tokens representing the simplified expression, such as [\"-1*a\",\"14\"]",
        "exampleInputs1": "expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]",
        "exampleOutputs1": "[\"-1*a\",\"14\"]",
        "exampleInputs2": "expression = \"e - 8 + temperature - pressure\", evalvars = [\"e\", \"temperature\"], evalints = [1, 12]",
        "exampleOutputs2": "[\"-1*pressure\",\"5\"]",
        "exampleInputs3": "expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []",
        "exampleOutputs3": "[\"1*e*e\",\"-64\"]",
        "exampleInputs4": "expression = \"a * b * c + b * a * c * 4\", evalvars = [], evalints = []",
        "exampleOutputs4": "[\"5*a*b*c\"]",
        "exampleInputs5": "expression = \"((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))\", evalvars = [], evalints = []",
        "exampleOutputs5": "[\"-1*a*a*b*b\",\"2*a*a*b*c\",\"-1*a*a*c*c\",\"1*a*b*b*b\",\"-1*a*b*b*c\",\"-1*a*b*c*c\",\"1*a*c*c*c\",\"-1*b*b*b*c\",\"2*b*b*c*c\",\"-1*b*c*c*c\",\"2*a*a*b\",\"-2*a*a*c\",\"-2*a*b*b\",\"2*a*c*c\",\"1*b*b*b\",\"-1*b*b*c\",\"1*b*c*c\",\"-1*c*c*c\",\"-1*a*a\",\"1*a*b\",\"1*a*c\",\"-1*b*c\"]"
    },
    {
        "id": 770,
        "title": "770. Basic Calculator IV",
        "description": "On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.",
        "exampleInputs1": "board = [[1,2,3],[4,0,5]]",
        "exampleOutputs1": "1",
        "exampleInputs2": "board = [[1,2,3],[5,4,0]]",
        "exampleOutputs2": "-1",
        "exampleInputs3": "board = [[4,1,2],[5,0,3]]",
        "exampleOutputs3": "5",
        "exampleInputs4": "board = [[3,2,4],[1,5,0]]",
        "exampleOutputs4": "14"
    },
    {
        "id": 773,
        "title": "773. Sliding Puzzle",
        "description": "You are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j).",
        "exampleInputs1": "grid = [[0,2],[1,3]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]",
        "exampleOutputs2": "16"
    },
    {
        "id": 778,
        "title": "778. Swim in Rising Water",
        "description": "Given four integers sx, sy, tx, and ty, return true if it is possible to convert the point (sx, sy) to the point (tx, ty) through some operations, or false otherwise.",
        "exampleInputs1": "sx = 1, sy = 1, tx = 3, ty = 5",
        "exampleOutputs1": "true",
        "exampleInputs2": "sx = 1, sy = 1, tx = 2, ty = 2",
        "exampleOutputs2": "false",
        "exampleInputs3": "sx = 1, sy = 1, tx = 1, ty = 1",
        "exampleOutputs3": "true"
    },
    {
        "id": 780,
        "title": "780. Reaching Points",
        "description": "You are given an n x n binary grid board. In each move, you can swap any two rows with each other, or any two columns with each other.",
        "exampleInputs1": "board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "board = [[0,1],[1,0]]",
        "exampleOutputs2": "0",
        "exampleInputs3": "board = [[1,0],[1,0]]",
        "exampleOutputs3": "-1"
    },
    {
        "id": 782,
        "title": "782. Transform to Chessboard",
        "description": "You are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. You are also given an integer k.",
        "exampleInputs1": "arr = [1,2,3,5], k = 3",
        "exampleOutputs1": "[2,5]",
        "exampleInputs2": "arr = [1,7], k = 1",
        "exampleOutputs2": "[1,7]"
    },
    {
        "id": 786,
        "title": "786. K-th Smallest Prime Fraction",
        "description": "Let f(x) be the number of zeroes at the end of x!. Recall that x! = 1 * 2 * 3 * ... * x and by convention, 0! = 1.",
        "exampleInputs1": "k = 0",
        "exampleOutputs1": "5",
        "exampleInputs2": "k = 5",
        "exampleOutputs2": "0",
        "exampleInputs3": "k = 3",
        "exampleOutputs3": "5"
    },
    {
        "id": 793,
        "title": "793. Preimage Size of Factorial Zeroes Function",
        "description": "You are given an array nums. You can rotate it by a non-negative integer k so that the array becomes [nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]. Afterward, any entries that are less than or equal to their index are worth one point.",
        "exampleInputs1": "nums = [2,3,1,4,0]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [1,3,0,2,4]",
        "exampleOutputs2": "0"
    },
    {
        "id": 798,
        "title": "798. Smallest Rotation with Highest Score",
        "description": "You are given two integer arrays of the same length nums1 and nums2. In one operation, you are allowed to swap nums1[i] with nums2[i].",
        "exampleInputs1": "nums1 = [1,3,5,4], nums2 = [1,2,3,7]",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]",
        "exampleOutputs2": "1"
    },
    {
        "id": 801,
        "title": "801. Minimum Swaps To Make Sequences Increasing",
        "description": "You are given an m x n binary grid, where each 1 represents a brick and 0 represents an empty space. A brick is stable if:",
        "exampleInputs1": "grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]",
        "exampleOutputs1": "[2]",
        "exampleInputs2": "grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]",
        "exampleOutputs2": "[0,0]"
    },
    {
        "id": 803,
        "title": "803. Bricks Falling When Hit",
        "description": "You are given an integer array nums.",
        "exampleInputs1": "nums = [1,2,3,4,5,6,7,8]",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [3,1]",
        "exampleOutputs2": "false"
    },
    {
        "id": 805,
        "title": "805. Split Array With Same Average",
        "description": "You are given an array of integers nums represents the numbers written on a chalkboard.",
        "exampleInputs1": "nums = [1,1,2]",
        "exampleOutputs1": "false",
        "exampleInputs2": "nums = [0,1]",
        "exampleOutputs2": "true",
        "exampleInputs3": "nums = [1,2,3]",
        "exampleOutputs3": "true"
    },
    {
        "id": 810,
        "title": "810. Chalkboard XOR Game",
        "description": "You are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.",
        "exampleInputs1": "routes = [[1,2,7],[3,6,7]], source = 1, target = 6",
        "exampleOutputs1": "2",
        "exampleInputs2": "routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12",
        "exampleOutputs2": "-1"
    },
    {
        "id": 815,
        "title": "815. Bus Routes",
        "description": "Your car starts at position 0 and speed +1 on an infinite number line. Your car can go into negative positions. Your car drives automatically according to a sequence of instructions 'A' (accelerate) and 'R' (reverse):",
        "exampleInputs1": "target = 3",
        "exampleOutputs1": "2",
        "exampleInputs2": "target = 6",
        "exampleOutputs2": "5"
    },
    {
        "id": 818,
        "title": "818. Race Car",
        "description": "You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.",
        "exampleInputs1": "grid = [[1,0],[0,1]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "grid = [[1,1],[1,0]]",
        "exampleOutputs2": "4",
        "exampleInputs3": "grid = [[1,1],[1,1]]",
        "exampleOutputs3": "4"
    },
    {
        "id": 827,
        "title": "827. Making A Large Island",
        "description": "Let's define a function countUniqueChars(s) that returns the number of unique characters on s.",
        "exampleInputs1": "s = \"ABC\"",
        "exampleOutputs1": "10",
        "exampleInputs2": "s = \"ABA\"",
        "exampleOutputs2": "8",
        "exampleInputs3": "s = \"LEETCODE\"",
        "exampleOutputs3": "92"
    },
    {
        "id": 828,
        "title": "828. Count Unique Characters of All Substrings of a Given String",
        "description": "Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.",
        "exampleInputs1": "n = 5",
        "exampleOutputs1": "2",
        "exampleInputs2": "n = 9",
        "exampleOutputs2": "3",
        "exampleInputs3": "n = 15",
        "exampleOutputs3": "4"
    },
    {
        "id": 829,
        "title": "829. Consecutive Numbers Sum",
        "description": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.",
        "exampleInputs1": "n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]",
        "exampleOutputs1": "[8,12,6,10,10,10]",
        "exampleInputs2": "n = 1, edges = []",
        "exampleOutputs2": "[0]",
        "exampleInputs3": "n = 2, edges = [[1,0]]",
        "exampleOutputs3": "[1,1]"
    },
    {
        "id": 834,
        "title": "834. Sum of Distances in Tree",
        "description": "Two strings X and Y are similar if we can swap two letters (in different positions) of X, so that it equals Y. Also two strings X and Y are similar if they are equal.",
        "exampleInputs1": "strs = [\"tars\",\"rats\",\"arts\",\"star\"]",
        "exampleOutputs1": "2",
        "exampleInputs2": "strs = [\"omv\",\"ovm\"]",
        "exampleOutputs2": "1"
    },
    {
        "id": 839,
        "title": "839. Similar String Groups",
        "description": "This is an interactive problem.",
        "exampleInputs1": "secret = \"acckzz\", wordlist = [\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"], numguesses = 10",
        "exampleOutputs1": "You guessed the secret word correctly.",
        "exampleInputs2": "secret = \"hamada\", wordlist = [\"hamada\",\"khaled\"], numguesses = 10",
        "exampleOutputs2": "You guessed the secret word correctly."
    },
    {
        "id": 843,
        "title": "843. Guess the Word",
        "description": "You have an undirected, connected graph of n nodes labeled from 0 to n - 1. You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge.",
        "exampleInputs1": "graph = [[1,2,3],[0],[0],[0]]",
        "exampleOutputs1": "4",
        "exampleInputs2": "graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]",
        "exampleOutputs2": "4"
    },
    {
        "id": 847,
        "title": "847. Shortest Path Visiting All Nodes",
        "description": "We are given a list of (axis-aligned) rectangles. Each rectangle[i] = [xi1, yi1, xi2, yi2] , where (xi1, yi1) are the coordinates of the bottom-left corner, and (xi2, yi2) are the coordinates of the top-right corner of the ith rectangle.",
        "exampleInputs1": "rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]",
        "exampleOutputs1": "6",
        "exampleInputs2": "rectangles = [[0,0,1000000000,1000000000]]",
        "exampleOutputs2": "49"
    },
    {
        "id": 850,
        "title": "850. Rectangle Area II",
        "description": "Strings s1 and s2 are k-similar (for some non-negative integer k) if we can swap the positions of two letters in s1 exactly k times so that the resulting string equals s2.",
        "exampleInputs1": "s1 = \"ab\", s2 = \"ba\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "s1 = \"abc\", s2 = \"bca\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "s1 = \"abac\", s2 = \"baca\"",
        "exampleOutputs3": "2",
        "exampleInputs4": "s1 = \"aabc\", s2 = \"abca\"",
        "exampleOutputs4": "2"
    },
    {
        "id": 854,
        "title": "854. K-Similar Strings",
        "description": "There are n workers. You are given two integer arrays quality and wage where quality[i] is the quality of the ith worker and wage[i] is the minimum wage expectation for the ith worker.",
        "exampleInputs1": "quality = [10,20,5], wage = [70,50,30], k = 2",
        "exampleOutputs1": "105.00000",
        "exampleInputs2": "quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3",
        "exampleOutputs2": "30.66667"
    },
    {
        "id": 857,
        "title": "857. Minimum Cost to Hire K Workers",
        "description": "Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1.",
        "exampleInputs1": "nums = [1], k = 1",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [1,2], k = 4",
        "exampleOutputs2": "-1",
        "exampleInputs3": "nums = [2,-1,2], k = 3",
        "exampleOutputs3": "3"
    },
    {
        "id": 862,
        "title": "862. Shortest Subarray with Sum at Least K",
        "description": "You are given an m x n grid grid where:",
        "exampleInputs1": "grid = [\"@.a.#\",\"###.#\",\"b.A.B\"]",
        "exampleOutputs1": "8",
        "exampleInputs2": "grid = [\"@..aA\",\"..B#.\",\"....b\"]",
        "exampleOutputs2": "6",
        "exampleInputs3": "grid = [\"@Aa\"]",
        "exampleOutputs3": "-1"
    },
    {
        "id": 864,
        "title": "864. Shortest Path to Get All Keys",
        "description": "A car travels from a starting position to a destination which is target miles east of the starting position.",
        "exampleInputs1": "target = 1, startFuel = 1, stations = []",
        "exampleOutputs1": "0",
        "exampleInputs2": "target = 100, startFuel = 1, stations = [[10,100]]",
        "exampleOutputs2": "-1",
        "exampleInputs3": "target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]",
        "exampleOutputs3": "2"
    },
    {
        "id": 871,
        "title": "871. Minimum Number of Refueling Stops",
        "description": "A positive integer is magical if it is divisible by either a or b.",
        "exampleInputs1": "n = 1, a = 2, b = 3",
        "exampleOutputs1": "2",
        "exampleInputs2": "n = 4, a = 2, b = 3",
        "exampleOutputs2": "6",
        "exampleInputs3": "n = 5, a = 2, b = 4",
        "exampleOutputs3": "10",
        "exampleInputs4": "n = 3, a = 6, b = 4",
        "exampleOutputs4": "8"
    },
    {
        "id": 878,
        "title": "878. Nth Magical Number",
        "description": "There is a group of n members, and a list of various crimes they could commit. The ith crime generates a profit[i] and requires group[i] members to participate in it. If a member participates in one crime, that member can't participate in another crime.",
        "exampleInputs1": "n = 5, minProfit = 3, group = [2,2], profit = [2,3]",
        "exampleOutputs1": "2",
        "exampleInputs2": "n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]",
        "exampleOutputs2": "7"
    },
    {
        "id": 879,
        "title": "879. Profitable Schemes",
        "description": "You are given an undirected graph (the \"original graph\") with n nodes labeled from 0 to n - 1. You decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.",
        "exampleInputs1": "edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3",
        "exampleOutputs1": "13",
        "exampleInputs2": "edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4",
        "exampleOutputs2": "23",
        "exampleInputs3": "edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5",
        "exampleOutputs3": "1"
    },
    {
        "id": 882,
        "title": "882. Reachable Nodes In Subdivided Graph",
        "description": "You are given k identical eggs and you have access to a building with n floors labeled from 1 to n.",
        "exampleInputs1": "k = 1, n = 2",
        "exampleOutputs1": "2",
        "exampleInputs2": "k = 2, n = 6",
        "exampleOutputs2": "3",
        "exampleInputs3": "k = 3, n = 14",
        "exampleOutputs3": "4"
    },
    {
        "id": 887,
        "title": "887. Super Egg Drop",
        "description": "The width of a sequence is the difference between the maximum and minimum elements in the sequence.",
        "exampleInputs1": "nums = [2,1,3]",
        "exampleOutputs1": "6",
        "exampleInputs2": "nums = [2]",
        "exampleOutputs2": "0"
    },
    {
        "id": 891,
        "title": "891. Sum of Subsequence Widths",
        "description": "Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"FreqStack\", \"push\", \"push\", \"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"pop\"]"
    },
    {
        "id": 895,
        "title": "895. Maximum Frequency Stack",
        "description": "You are given a string s and an integer k. You can choose one of the first k letters of s and append it at the end of the string..",
        "exampleInputs1": "s = \"cba\", k = 1",
        "exampleOutputs1": "\"acb\"",
        "exampleInputs2": "s = \"baaca\", k = 3",
        "exampleOutputs2": "\"aaabc\""
    },
    {
        "id": 899,
        "title": "899. Orderly Queue",
        "description": "Given an array of digits which is sorted in non-decreasing order. You can write numbers using each digits[i] as many times as we want. For example, if digits = ['1','3','5'], we may write numbers such as '13', '551', and '1351315'.",
        "exampleInputs1": "digits = [\"1\",\"3\",\"5\",\"7\"], n = 100",
        "exampleOutputs1": "20",
        "exampleInputs2": "digits = [\"1\",\"4\",\"9\"], n = 1000000000",
        "exampleOutputs2": "29523",
        "exampleInputs3": "digits = [\"7\"], n = 8",
        "exampleOutputs3": "1"
    },
    {
        "id": 902,
        "title": "902. Numbers At Most N Given Digit Set",
        "description": "You are given a string s of length n where s[i] is either:",
        "exampleInputs1": "s = \"DID\"",
        "exampleOutputs1": "5",
        "exampleInputs2": "s = \"D\"",
        "exampleOutputs2": "1"
    },
    {
        "id": 903,
        "title": "903. Valid Permutations for DI Sequence",
        "description": "Let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.",
        "exampleInputs1": "left = \"4\", right = \"1000\"",
        "exampleOutputs1": "4",
        "exampleInputs2": "left = \"1\", right = \"2\"",
        "exampleOutputs2": "1"
    },
    {
        "id": 906,
        "title": "906. Super Palindromes",
        "description": "A game on an undirected graph is played by two players, Mouse and Cat, who alternate turns.",
        "exampleInputs1": "graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]",
        "exampleOutputs1": "0",
        "exampleInputs2": "graph = [[1,3],[0],[3],[0,2]]",
        "exampleOutputs2": "1"
    },
    {
        "id": 913,
        "title": "913. Cat and Mouse",
        "description": "Your music player contains n different songs. You want to listen to goal songs (not necessarily different) during your trip. To avoid boredom, you will create a playlist so that:",
        "exampleInputs1": "n = 3, goal = 3, k = 1",
        "exampleOutputs1": "6",
        "exampleInputs2": "n = 2, goal = 3, k = 0",
        "exampleOutputs2": "6",
        "exampleInputs3": "n = 2, goal = 3, k = 1",
        "exampleOutputs3": "2"
    },
    {
        "id": 920,
        "title": "920. Number of Music Playlists",
        "description": "You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.",
        "exampleInputs1": "graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]",
        "exampleOutputs1": "0",
        "exampleInputs2": "graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]",
        "exampleOutputs2": "0",
        "exampleInputs3": "graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]",
        "exampleOutputs3": "1"
    },
    {
        "id": 924,
        "title": "924. Minimize Malware Spread",
        "description": "You are given an array arr which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.",
        "exampleInputs1": "arr = [1,0,1,0,1]",
        "exampleOutputs1": "[0,3]",
        "exampleInputs2": "arr = [1,1,0,1,1]",
        "exampleOutputs2": "[-1,-1]",
        "exampleInputs3": "arr = [1,1,0,0,1]",
        "exampleOutputs3": "[0,2]"
    },
    {
        "id": 927,
        "title": "927. Three Equal Parts",
        "description": "You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.",
        "exampleInputs1": "graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]",
        "exampleOutputs1": "0",
        "exampleInputs2": "graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]",
        "exampleOutputs2": "1",
        "exampleInputs3": "graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]",
        "exampleOutputs3": "1"
    },
    {
        "id": 928,
        "title": "928. Minimize Malware Spread II",
        "description": "You are given two strings stamp and target. Initially, there is a string s of length target.length with all s[i] == '?'.",
        "exampleInputs1": "stamp = \"abc\", target = \"ababc\"",
        "exampleOutputs1": "[0,2]",
        "exampleInputs2": "stamp = \"abca\", target = \"aabcaca\"",
        "exampleOutputs2": "[3,0,1]"
    },
    {
        "id": 936,
        "title": "936. Stamping The Sequence",
        "description": "Given a string s, return the number of distinct non-empty subsequences of s. Since the answer may be very large, return it modulo 109 + 7.",
        "exampleInputs1": "s = \"abc\"",
        "exampleOutputs1": "7",
        "exampleInputs2": "s = \"aba\"",
        "exampleOutputs2": "6",
        "exampleInputs3": "s = \"aaa\"",
        "exampleOutputs3": "3"
    },
    {
        "id": 940,
        "title": "940. Distinct Subsequences II",
        "description": "Given an array of strings words, return the smallest string that contains each string in words as a substring. If there are multiple valid strings of the smallest length, return any of them.",
        "exampleInputs1": "words = [\"alex\",\"loves\",\"leetcode\"]",
        "exampleOutputs1": "\"alexlovesleetcode\"",
        "exampleInputs2": "words = [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]",
        "exampleOutputs2": "\"gctaagttcatgcatc\""
    },
    {
        "id": 943,
        "title": "943. Find the Shortest Superstring",
        "description": "You are given an integer array of unique positive integers nums. Consider the following graph:",
        "exampleInputs1": "nums = [4,6,15,35]",
        "exampleOutputs1": "4",
        "exampleInputs2": "nums = [20,50,9,63]",
        "exampleOutputs2": "2",
        "exampleInputs3": "nums = [2,3,6,7,4,12,21,39]",
        "exampleOutputs3": "8"
    },
    {
        "id": 952,
        "title": "952. Largest Component Size by Common Factor",
        "description": "You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height.",
        "exampleInputs1": "rods = [1,2,3,6]",
        "exampleOutputs1": "6",
        "exampleInputs2": "rods = [1,2,3,4,5,6]",
        "exampleOutputs2": "10",
        "exampleInputs3": "rods = [1,2]",
        "exampleOutputs3": "0"
    },
    {
        "id": 956,
        "title": "956. Tallest Billboard",
        "description": "You are given an array of n strings strs, all of the same length.",
        "exampleInputs1": "strs = [\"babca\",\"bbazb\"]",
        "exampleOutputs1": "3",
        "exampleInputs2": "strs = [\"edcba\"]",
        "exampleOutputs2": "4",
        "exampleInputs3": "strs = [\"ghi\",\"def\",\"abc\"]",
        "exampleOutputs3": "0"
    },
    {
        "id": 960,
        "title": "960. Delete Columns to Make Sorted III",
        "description": "Given a single positive integer x, we will write an expression of the form x (op1) x (op2) x (op3) x ... where each operator op1, op2, etc. is either addition, subtraction, multiplication, or division (+, -, *, or /). For example, with x = 3, we might write 3 * 3 / 3 + 3 - 3 which is a value of 3.",
        "exampleInputs1": "x = 3, target = 19",
        "exampleOutputs1": "5",
        "exampleInputs2": "x = 5, target = 501",
        "exampleOutputs2": "8",
        "exampleInputs3": "x = 100, target = 100000000",
        "exampleOutputs3": "3"
    },
    {
        "id": 964,
        "title": "964. Least Operators to Express Number",
        "description": "You are given the root of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.",
        "exampleInputs1": "root = [0,0,null,0,0]",
        "exampleOutputs1": "1",
        "exampleInputs2": "root = [0,0,null,0,null,0,null,null,0]",
        "exampleOutputs2": "2"
    },
    {
        "id": 968,
        "title": "968. Binary Tree Cameras",
        "description": "Given two strings s and t, each of which represents a non-negative rational number, return true if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number.",
        "exampleInputs1": "s = \"0.(52)\", t = \"0.5(25)\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"0.1666(6)\", t = \"0.166(66)\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "s = \"0.9(9)\", t = \"1.\"",
        "exampleOutputs3": "true"
    },
    {
        "id": 972,
        "title": "972. Equal Rational Numbers",
        "description": "You are given an integer array arr. From some starting index, you can make a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called odd-numbered jumps, and the (2nd, 4th, 6th, ...) jumps in the series are called even-numbered jumps. Note that the jumps are numbered, not the indices.",
        "exampleInputs1": "arr = [10,13,12,14,15]",
        "exampleOutputs1": "2",
        "exampleInputs2": "arr = [2,3,1,1,4]",
        "exampleOutputs2": "3",
        "exampleInputs3": "arr = [5,1,3,4,2]",
        "exampleOutputs3": "3"
    },
    {
        "id": 975,
        "title": "975. Odd Even Jump",
        "description": "You are given an m x n integer array grid where grid[i][j] could be:",
        "exampleInputs1": "grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]",
        "exampleOutputs2": "4",
        "exampleInputs3": "grid = [[0,1],[2,0]]",
        "exampleOutputs3": "0"
    },
    {
        "id": 980,
        "title": "980. Unique Paths III",
        "description": "Given an integer array nums, return the number of AND triples.",
        "exampleInputs1": "nums = [2,1,3]",
        "exampleOutputs1": "12",
        "exampleInputs2": "nums = [0,0,0]",
        "exampleOutputs2": "27"
    },
    {
        "id": 982,
        "title": "982. Triples with Bitwise AND Equal To Zero",
        "description": "Given the root of a binary tree, calculate the vertical order traversal of the binary tree.",
        "exampleInputs1": "root = [3,9,20,null,null,15,7]",
        "exampleOutputs1": "[[9],[3,15],[20],[7]]",
        "exampleInputs2": "root = [1,2,3,4,5,6,7]",
        "exampleOutputs2": "[[4],[2],[1,5,6],[3],[7]]",
        "exampleInputs3": "root = [1,2,3,4,6,5,7]",
        "exampleOutputs3": "[[4],[2],[1,5,6],[3],[7]]"
    },
    {
        "id": 987,
        "title": "987. Vertical Order Traversal of a Binary Tree",
        "description": "Given an integer array nums and an integer k, return the number of good subarrays of nums.",
        "exampleInputs1": "nums = [1,2,1,2,3], k = 2",
        "exampleOutputs1": "7",
        "exampleInputs2": "nums = [1,2,1,3,4], k = 3",
        "exampleOutputs2": "3"
    },
    {
        "id": 992,
        "title": "992. Subarrays with K Different Integers",
        "description": "You are given a binary array nums and an integer k.",
        "exampleInputs1": "nums = [0,1,0], k = 1",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,1,0], k = 2",
        "exampleOutputs2": "-1",
        "exampleInputs3": "nums = [0,0,0,1,0,1,1,0], k = 3",
        "exampleOutputs3": "3"
    },
    {
        "id": 995,
        "title": "995. Minimum Number of K Consecutive Bit Flips",
        "description": "An array is squareful if the sum of every pair of adjacent elements is a perfect square.",
        "exampleInputs1": "nums = [1,17,8]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [2,2,2]",
        "exampleOutputs2": "1"
    },
    {
        "id": 996,
        "title": "996. Number of Squareful Arrays",
        "description": "There are n piles of stones arranged in a row. The ith pile has stones[i] stones.",
        "exampleInputs1": "stones = [3,2,4,1], k = 2",
        "exampleOutputs1": "20",
        "exampleInputs2": "stones = [3,2,4,1], k = 3",
        "exampleOutputs2": "-1",
        "exampleInputs3": "stones = [3,5,1,2,6], k = 3",
        "exampleOutputs3": "25"
    },
    {
        "id": 1000,
        "title": "1000. Minimum Cost to Merge Stones",
        "description": "There is a 2D grid of size n x n where each cell of this grid has a lamp that is initially turned off.",
        "exampleInputs1": "n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]",
        "exampleOutputs1": "[1,0]",
        "exampleInputs2": "n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]",
        "exampleOutputs2": "[1,1]",
        "exampleInputs3": "n = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]",
        "exampleOutputs3": "[1,1,0]"
    },
    {
        "id": 1001,
        "title": "1001. Grid Illumination",
        "description": "Given an integer n, return the number of positive integers in the range [1, n] that have at least one repeated digit.",
        "exampleInputs1": "n = 20",
        "exampleOutputs1": "1",
        "exampleInputs2": "n = 100",
        "exampleOutputs2": "10",
        "exampleInputs3": "n = 1000",
        "exampleOutputs3": "262"
    },
    {
        "id": 1012,
        "title": "1012. Numbers With Repeated Digits",
        "description": "We run a preorder depth-first search (DFS) on the root of a binary tree.",
        "exampleInputs1": "traversal = \"1-2--3--4-5--6--7\"",
        "exampleOutputs1": "[1,2,5,3,4,6,7]",
        "exampleInputs2": "traversal = \"1-2--3---4-5--6---7\"",
        "exampleOutputs2": "[1,2,5,3,null,6,null,4,null,7]",
        "exampleInputs3": "traversal = \"1-401--349---90--88\"",
        "exampleOutputs3": "[1,401,null,349,88,90]"
    },
    {
        "id": 1028,
        "title": "1028. Recover a Tree From Preorder Traversal",
        "description": "Design an algorithm that accepts a stream of characters and checks if a suffix of these characters is a string of a given array of strings words.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"StreamChecker\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\"]"
    },
    {
        "id": 1032,
        "title": "1032. Stream of Characters",
        "description": "There is a 1 million by 1 million grid on an XY-plane, and the coordinates of each grid square are (x, y).",
        "exampleInputs1": "blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]",
        "exampleOutputs1": "false",
        "exampleInputs2": "blocked = [], source = [0,0], target = [999999,999999]",
        "exampleOutputs2": "true"
    },
    {
        "id": 1036,
        "title": "1036. Escape a Large Maze",
        "description": "Given a string s, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times. The occurrences may overlap.",
        "exampleInputs1": "s = \"banana\"",
        "exampleOutputs1": "\"ana\"",
        "exampleInputs2": "s = \"abcd\"",
        "exampleOutputs2": "\"\""
    },
    {
        "id": 1044,
        "title": "1044. Longest Duplicate Substring",
        "description": "Given a matrix and a target, return the number of non-empty submatrices that sum to target.",
        "exampleInputs1": "matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0",
        "exampleOutputs1": "4",
        "exampleInputs2": "matrix = [[1,-1],[-1,1]], target = 0",
        "exampleOutputs2": "5",
        "exampleInputs3": "matrix = [[904]], target = 0",
        "exampleOutputs3": "0"
    },
    {
        "id": 1074,
        "title": "1074. Number of Submatrices That Sum to Target",
        "description": "Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.",
        "exampleInputs1": "str1 = \"abac\", str2 = \"cab\"",
        "exampleOutputs1": "\"cabac\"",
        "exampleInputs2": "str1 = \"aaaaaaaa\", str2 = \"aaaaaaaa\"",
        "exampleOutputs2": "\"aaaaaaaa\""
    },
    {
        "id": 1092,
        "title": "1092. Shortest Common Supersequence",
        "description": "(This problem is an interactive problem.)",
        "exampleInputs1": "array = [1,2,3,4,5,3,1], target = 3",
        "exampleOutputs1": "2",
        "exampleInputs2": "array = [0,1,2,4,2,1], target = 3",
        "exampleOutputs2": "-1"
    },
    {
        "id": 1095,
        "title": "1095. Find in Mountain Array",
        "description": "Under the grammar given below, strings can represent a set of lowercase words. Let's use R(expr) to denote the set of words the expression represents.",
        "exampleInputs1": "expression = \"{a,b}{c,{d,e}}\"",
        "exampleOutputs1": "[\"ac\",\"ad\",\"ae\",\"bc\",\"bd\",\"be\"]",
        "exampleInputs2": "expression = \"{{a,z},a{b,c},{ab,z}}\"",
        "exampleOutputs2": "[\"a\",\"ab\",\"ac\",\"z\"]"
    },
    {
        "id": 1096,
        "title": "1096. Brace Expansion II",
        "description": "Return the result of evaluating a given boolean expression, represented as a string.",
        "exampleInputs1": "expression = \"!(f)\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "expression = \"|(f,t)\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "expression = \"&(t,f)\"",
        "exampleOutputs3": "false",
        "exampleInputs4": "expression = \"|(&(t,f,t),!(t))\"",
        "exampleOutputs4": "false"
    },
    {
        "id": 1106,
        "title": "1106. Parsing A Boolean Expression",
        "description": "In a project, you have a list of required skills req_skills, and a list of people. The ith person people[i] contains a list of skills that the person has.",
        "exampleInputs1": "req_skills = [\"java\",\"nodejs\",\"reactjs\"], people = [[\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"]]",
        "exampleOutputs1": "[0,2]",
        "exampleInputs2": "req_skills = [\"algorithms\",\"math\",\"java\",\"reactjs\",\"csharp\",\"aws\"], people = [[\"algorithms\",\"math\",\"java\"],[\"algorithms\",\"math\",\"reactjs\"],[\"java\",\"csharp\",\"aws\"],[\"reactjs\",\"csharp\"],[\"csharp\",\"math\"],[\"aws\",\"java\"]]",
        "exampleOutputs2": "[1,2]"
    },
    {
        "id": 1125,
        "title": "1125. Smallest Sufficient Team",
        "description": "You are given a string text. You should split it to k substrings (subtext1, subtext2, ..., subtextk) such that:",
        "exampleInputs1": "text = \"ghiabcdefhelloadamhelloabcdefghi\"",
        "exampleOutputs1": "7",
        "exampleInputs2": "text = \"merchant\"",
        "exampleOutputs2": "1",
        "exampleInputs3": "text = \"antaprezatepzapreanta\"",
        "exampleOutputs3": "11",
        "exampleInputs4": "text = \"aaa\"",
        "exampleOutputs4": "3"
    },
    {
        "id": 1147,
        "title": "1147. Longest Chunked Palindrome Decomposition",
        "description": "Design a data structure that efficiently finds the majority element of a given subarray.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"MajorityChecker\", \"query\", \"query\", \"query\"]"
    },
    {
        "id": 1157,
        "title": "1157. Online Majority Element In Subarray",
        "description": "Given a string s, return the last substring of s in lexicographical order.",
        "exampleInputs1": "s = \"abab\"",
        "exampleOutputs1": "\"bab\"",
        "exampleInputs2": "s = \"leetcode\"",
        "exampleOutputs2": "\"tcode\""
    },
    {
        "id": 1163,
        "title": "1163. Last Substring in Lexicographical Order",
        "description": "You have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same maximum capacity.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"DinnerPlates\", \"push\", \"push\", \"push\", \"push\", \"push\", \"popAtStack\", \"push\", \"push\", \"popAtStack\", \"popAtStack\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\"]"
    },
    {
        "id": 1172,
        "title": "1172. Dinner Plate Stacks",
        "description": "",
        "exampleInputs1": "words = [\"aaaa\",\"asas\",\"able\",\"ability\",\"actt\",\"actor\",\"access\"], puzzles = [\"aboveyz\",\"abrodyz\",\"abslute\",\"absoryz\",\"actresz\",\"gaswxyz\"]",
        "exampleOutputs1": "[1,1,3,2,4,0]",
        "exampleInputs2": "words = [\"apple\",\"pleas\",\"please\"], puzzles = [\"aelwxyz\",\"aelpxyz\",\"aelpsxy\",\"saelpxy\",\"xaelpsy\"]",
        "exampleOutputs2": "[0,1,3,2,0]"
    },
    {
        "id": 1178,
        "title": "1178. Number of Valid Words for Each Puzzle",
        "description": "Given two integer arrays arr1 and arr2, return the minimum number of operations (possibly zero) needed to make arr1 strictly increasing.",
        "exampleInputs1": "arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]",
        "exampleOutputs1": "1",
        "exampleInputs2": "arr1 = [1,5,3,6,7], arr2 = [4,3,1]",
        "exampleOutputs2": "2",
        "exampleInputs3": "arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]",
        "exampleOutputs3": "-1"
    },
    {
        "id": 1187,
        "title": "1187. Make Array Strictly Increasing",
        "description": "There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.",
        "exampleInputs1": "n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]",
        "exampleOutputs1": "[[1,3]]",
        "exampleInputs2": "n = 2, connections = [[0,1]]",
        "exampleOutputs2": "[[0,1]]"
    },
    {
        "id": 1192,
        "title": "1192. Critical Connections in a Network",
        "description": "There are n items each belonging to zero or one of m groups where group[i] is the group that the i-th item belongs to and it's equal to -1 if the i-th item belongs to no group. The items and the groups are zero indexed. A group can have no item belonging to it.",
        "exampleInputs1": "n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]",
        "exampleOutputs1": "[6,3,4,1,5,2,0,7]",
        "exampleInputs2": "n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]",
        "exampleOutputs2": "[]"
    },
    {
        "id": 1203,
        "title": "1203. Sort Items by Groups Respecting Dependencies",
        "description": "Design a Skiplist without using any built-in libraries.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"Skiplist\", \"add\", \"add\", \"add\", \"search\", \"add\", \"search\", \"erase\", \"erase\", \"search\"]"
    },
    {
        "id": 1206,
        "title": "1206. Design Skiplist",
        "description": "In an n*n grid, there is a snake that spans 2 cells and starts moving from the top left corner at (0, 0) and (0, 1). The grid has empty cells represented by zeros and blocked cells represented by ones. The snake wants to reach the lower right corner at (n-1, n-2) and (n-1, n-1).",
        "exampleInputs1": "grid = [[0,0,0,0,0,1],",
        "exampleOutputs1": "[1,1,0,0,1,0],",
        "exampleInputs2": "grid = [[0,0,1,1,1,1],",
        "exampleOutputs2": "[0,0,0,0,1,1],"
    },
    {
        "id": 1210,
        "title": "1210. Minimum Moves to Reach Target with Rotations",
        "description": "Given an integer n, your task is to count how many strings of length n can be formed under the following rules:",
        "exampleInputs1": "n = 1",
        "exampleOutputs1": "5",
        "exampleInputs2": "n = 2",
        "exampleOutputs2": "10",
        "exampleInputs3": "n = 5",
        "exampleOutputs3": "68"
    },
    {
        "id": 1220,
        "title": "1220. Count Vowels Permutation",
        "description": "A die simulator generates a random number from 1 to 6 for each roll. You introduced a constraint to the generator such that it cannot roll the number i more than rollMax[i] (1-indexed) consecutive times.",
        "exampleInputs1": "n = 2, rollMax = [1,1,2,2,2,3]",
        "exampleOutputs1": "34",
        "exampleInputs2": "n = 2, rollMax = [1,1,1,1,1,1]",
        "exampleOutputs2": "30",
        "exampleInputs3": "n = 3, rollMax = [1,1,1,2,2,3]",
        "exampleOutputs3": "181"
    },
    {
        "id": 1223,
        "title": "1223. Dice Roll Simulation",
        "description": "Given an array nums of positive integers, return the longest possible length of an array prefix of nums, such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences.",
        "exampleInputs1": "nums = [2,2,1,1,5,3,3,5]",
        "exampleOutputs1": "7",
        "exampleInputs2": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]",
        "exampleOutputs2": "13",
        "exampleInputs3": "nums = [1,1,1,2,2,2]",
        "exampleOutputs3": "5",
        "exampleInputs4": "nums = [10,2,8,9,3,8,1,5,2,3,7,6]",
        "exampleOutputs4": "8"
    },
    {
        "id": 1224,
        "title": "1224. Maximum Equal Frequency",
        "description": "We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].",
        "exampleInputs1": "startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]",
        "exampleOutputs1": "120",
        "exampleInputs2": "startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]",
        "exampleOutputs2": "150",
        "exampleInputs3": "startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]",
        "exampleOutputs3": "6"
    },
    {
        "id": 1235,
        "title": "1235. Maximum Profit in Job Scheduling",
        "description": "Given a rectangle of size n x m, return the minimum number of integer-sided squares that tile the rectangle.",
        "exampleInputs1": "n = 2, m = 3",
        "exampleOutputs1": "3",
        "exampleInputs2": "n = 5, m = 8",
        "exampleOutputs2": "5",
        "exampleInputs3": "n = 11, m = 13",
        "exampleOutputs3": "6"
    },
    {
        "id": 1240,
        "title": "1240. Tiling a Rectangle with the Fewest Squares",
        "description": "Given an array nums of positive integers. Your task is to select some subset of nums, multiply each element by an integer and add all these numbers. The array is said to be good if you can obtain a sum of 1 from the array by any possible subset and multiplicand.",
        "exampleInputs1": "nums = [12,5,7,23]",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [29,6,10]",
        "exampleOutputs2": "true",
        "exampleInputs3": "nums = [3,6]",
        "exampleOutputs3": "false"
    },
    {
        "id": 1250,
        "title": "1250. Check If It Is a Good Array",
        "description": "Given a list of words, list of  single letters (might be repeating) and score of every character.",
        "exampleInputs1": "words = [\"dog\",\"cat\",\"dad\",\"good\"], letters = [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]",
        "exampleOutputs1": "23",
        "exampleInputs2": "words = [\"xxxz\",\"ax\",\"bx\",\"cx\"], letters = [\"z\",\"a\",\"b\",\"c\",\"x\",\"x\",\"x\"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]",
        "exampleOutputs2": "27",
        "exampleInputs3": "words = [\"leetcode\"], letters = [\"l\",\"e\",\"t\",\"c\",\"o\",\"d\"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]",
        "exampleOutputs3": "0"
    },
    {
        "id": 1255,
        "title": "1255. Maximum Score Words Formed by Letters",
        "description": "A storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations.",
        "exampleInputs1": "grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],",
        "exampleOutputs1": "[\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],",
        "exampleInputs2": "grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],",
        "exampleOutputs2": "[\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],",
        "exampleInputs3": "grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],",
        "exampleOutputs3": "[\"#\",\"T\",\".\",\".\",\"#\",\"#\"],",
        "exampleInputs4": "grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],",
        "exampleOutputs4": "[\"#\",\"S\",\"#\",\".\",\"B\",\"T\",\"#\"],"
    },
    {
        "id": 1263,
        "title": "1263. Minimum Moves to Move a Box to Their Target Location",
        "description": "You have a pointer at index 0 in an array of size arrLen. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time).",
        "exampleInputs1": "steps = 3, arrLen = 2",
        "exampleOutputs1": "4",
        "exampleInputs2": "steps = 2, arrLen = 4",
        "exampleOutputs2": "2",
        "exampleInputs3": "steps = 4, arrLen = 2",
        "exampleOutputs3": "8"
    },
    {
        "id": 1269,
        "title": "1269. Number of Ways to Stay in the Same Place After Some Steps",
        "description": "You are given a string s containing lowercase letters and an integer k. You need to :",
        "exampleInputs1": "s = \"abc\", k = 2",
        "exampleOutputs1": "1",
        "exampleInputs2": "s = \"aabbc\", k = 3",
        "exampleOutputs2": "0",
        "exampleInputs3": "s = \"leetcode\", k = 8",
        "exampleOutputs3": "0"
    },
    {
        "id": 1278,
        "title": "1278. Palindrome Partitioning III",
        "description": "Given a m x n binary matrix mat. In one step, you can choose one cell and flip it and all the four neighbors of it if they exist (Flip is changing 1 to 0 and 0 to 1). A pair of cells are called neighbors if they share one edge.",
        "exampleInputs1": "mat = [[0,0],[0,1]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "mat = [[0]]",
        "exampleOutputs2": "0",
        "exampleInputs3": "mat = [[1,1,1],[1,0,1],[0,0,0]]",
        "exampleOutputs3": "6",
        "exampleInputs4": "mat = [[1,0,0],[1,0,0]]",
        "exampleOutputs4": "-1"
    },
    {
        "id": 1284,
        "title": "1284. Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
        "description": "Given an n x n integer matrix grid, return the minimum sum of a falling path with non-zero shifts.",
        "exampleInputs1": "arr = [[1,2,3],[4,5,6],[7,8,9]]",
        "exampleOutputs1": "13",
        "exampleInputs2": "grid = [[7]]",
        "exampleOutputs2": "7"
    },
    {
        "id": 1289,
        "title": "1289. Minimum Falling Path Sum II",
        "description": "You are given an m x n integer matrix grid where each cell is either 0 (empty) or 1 (obstacle). You can move up, down, left, or right from and to an empty cell in one step.",
        "exampleInputs1": "",
        "exampleOutputs1": "grid =",
        "exampleInputs2": "",
        "exampleOutputs2": "grid ="
    },
    {
        "id": 1293,
        "title": "1293. Shortest Path in a Grid with Obstacles Elimination",
        "description": "Given n boxes, each box is given in the format [status, candies, keys, containedBoxes] where:",
        "exampleInputs1": "status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]",
        "exampleOutputs1": "16",
        "exampleInputs2": "status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]",
        "exampleOutputs2": "6",
        "exampleInputs3": "status = [1,1,1], candies = [100,1,100], keys = [[],[0,2],[]], containedBoxes = [[],[],[]], initialBoxes = [1]",
        "exampleOutputs3": "1",
        "exampleInputs4": "status = [1], candies = [100], keys = [[]], containedBoxes = [[]], initialBoxes = []",
        "exampleOutputs4": "0",
        "exampleInputs5": "status = [1,1,1], candies = [2,3,2], keys = [[],[],[]], containedBoxes = [[],[],[]], initialBoxes = [2,1,0]",
        "exampleOutputs5": "7"
    },
    {
        "id": 1298,
        "title": "1298. Maximum Candies You Can Get from Boxes",
        "description": "You are given a square board of characters. You can move on the board starting at the bottom right square marked with the character 'S'.",
        "exampleInputs1": "board = [\"E23\",\"2X2\",\"12S\"]",
        "exampleOutputs1": "[7,1]",
        "exampleInputs2": "board = [\"E12\",\"1X1\",\"21S\"]",
        "exampleOutputs2": "[4,2]",
        "exampleInputs3": "board = [\"E11\",\"XXX\",\"11S\"]",
        "exampleOutputs3": "[0,0]"
    },
    {
        "id": 1301,
        "title": "1301. Number of Paths with Max Score",
        "description": "Given an equation, represented by words on left side and the result on right side.",
        "exampleInputs1": "words = [\"SEND\",\"MORE\"], result = \"MONEY\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "words = [\"SIX\",\"SEVEN\",\"SEVEN\"], result = \"TWENTY\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "words = [\"THIS\",\"IS\",\"TOO\"], result = \"FUNNY\"",
        "exampleOutputs3": "true",
        "exampleInputs4": "words = [\"LEET\",\"CODE\"], result = \"POINT\"",
        "exampleOutputs4": "false"
    },
    {
        "id": 1307,
        "title": "1307. Verbal Arithmetic Puzzle",
        "description": "Given a string s. In one step you can insert any character at any index of the string.",
        "exampleInputs1": "s = \"zzazz\"",
        "exampleOutputs1": "0",
        "exampleInputs2": "s = \"mbadm\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "s = \"leetcode\"",
        "exampleOutputs3": "5",
        "exampleInputs4": "s = \"g\"",
        "exampleOutputs4": "0",
        "exampleInputs5": "s = \"no\"",
        "exampleOutputs5": "1"
    },
    {
        "id": 1312,
        "title": "1312. Minimum Insertion Steps to Make a String Palindrome",
        "description": "Return the number of distinct non-empty substrings of text that can be written as the concatenation of some string with itself (i.e. it can be written as a + a where a is some string).",
        "exampleInputs1": "text = \"abcabcabc\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "text = \"leetcodeleetcode\"",
        "exampleOutputs2": "2"
    },
    {
        "id": 1316,
        "title": "1316. Distinct Echo Substrings",
        "description": "You have a keyboard layout as shown above in the X-Y plane, where each English uppercase letter is located at some coordinate.",
        "exampleInputs1": "word = \"CAKE\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "word = \"HAPPY\"",
        "exampleOutputs2": "6",
        "exampleInputs3": "word = \"NEW\"",
        "exampleOutputs3": "3",
        "exampleInputs4": "word = \"YEAR\"",
        "exampleOutputs4": "7"
    },
    {
        "id": 1320,
        "title": "1320. Minimum Distance to Type a Word Using Two Fingers",
        "description": "There is a one-dimensional garden on the x-axis. The garden starts at the point 0 and ends at the point n. (i.e The length of the garden is n).",
        "exampleInputs1": "n = 5, ranges = [3,4,1,1,0,0]",
        "exampleOutputs1": "1",
        "exampleInputs2": "n = 3, ranges = [0,0,0,0]",
        "exampleOutputs2": "-1",
        "exampleInputs3": "n = 7, ranges = [1,2,1,0,2,1,0,1]",
        "exampleOutputs3": "3",
        "exampleInputs4": "n = 8, ranges = [4,0,0,0,0,0,0,0,4]",
        "exampleOutputs4": "2",
        "exampleInputs5": "n = 8, ranges = [4,0,0,0,4,0,0,0,4]",
        "exampleOutputs5": "1"
    },
    {
        "id": 1326,
        "title": "1326. Minimum Number of Taps to Open to Water a Garden",
        "description": "You are given an integer array nums. The value of this array is defined as the sum of |nums[i]-nums[i+1]| for all 0 <= i < nums.length-1.",
        "exampleInputs1": "nums = [2,3,1,5,4]",
        "exampleOutputs1": "10",
        "exampleInputs2": "nums = [2,4,9,24,2,1,10]",
        "exampleOutputs2": "68"
    },
    {
        "id": 1330,
        "title": "1330. Reverse Subarray To Maximize Array Value",
        "description": "You want to schedule a list of jobs in d days. Jobs are dependent (i.e To work on the i-th job, you have to finish all the jobs j where 0 <= j < i).",
        "exampleInputs1": "jobDifficulty = [6,5,4,3,2,1], d = 2",
        "exampleOutputs1": "7",
        "exampleInputs2": "jobDifficulty = [9,9,9], d = 4",
        "exampleOutputs2": "-1",
        "exampleInputs3": "jobDifficulty = [1,1,1], d = 3",
        "exampleOutputs3": "3",
        "exampleInputs4": "jobDifficulty = [7,1,7,1,7,1], d = 3",
        "exampleOutputs4": "15",
        "exampleInputs5": "jobDifficulty = [11,111,22,222,33,333,44,444], d = 6",
        "exampleOutputs5": "843"
    },
    {
        "id": 1335,
        "title": "1335. Minimum Difficulty of a Job Schedule",
        "description": "Given an array of integers arr and an integer d. In one step you can jump from index i to index:",
        "exampleInputs1": "arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2",
        "exampleOutputs1": "4",
        "exampleInputs2": "arr = [3,3,3,3,3], d = 3",
        "exampleOutputs2": "1",
        "exampleInputs3": "arr = [7,6,5,4,3,2,1], d = 1",
        "exampleOutputs3": "7",
        "exampleInputs4": "arr = [7,1,7,1,7,1], d = 2",
        "exampleOutputs4": "2",
        "exampleInputs5": "arr = [66], d = 1",
        "exampleOutputs5": "1"
    },
    {
        "id": 1340,
        "title": "1340. Jump Game V",
        "description": "Given an array of integers arr, you are initially positioned at the first index of the array.",
        "exampleInputs1": "arr = [100,-23,-23,404,100,23,23,23,3,404]",
        "exampleOutputs1": "3",
        "exampleInputs2": "arr = [7]",
        "exampleOutputs2": "0",
        "exampleInputs3": "arr = [7,6,9,6,9,6,9,7]",
        "exampleOutputs3": "1",
        "exampleInputs4": "arr = [6,1,9]",
        "exampleOutputs4": "2",
        "exampleInputs5": "arr = [11,22,7,7,7,7,7,7,7,22,13]",
        "exampleOutputs5": "3"
    },
    {
        "id": 1345,
        "title": "1345. Jump Game IV",
        "description": "Given a m * n matrix seats  that represent seats distributions in a classroom. If a seat is broken, it is denoted by '#' character otherwise it is denoted by a '.' character.",
        "exampleInputs1": "seats = [[\"#\",\".\",\"#\",\"#\",\".\",\"#\"],",
        "exampleOutputs1": "[\".\",\"#\",\"#\",\"#\",\"#\",\".\"],",
        "exampleInputs2": "seats = [[\".\",\"#\"],",
        "exampleOutputs2": "[\"#\",\"#\"],",
        "exampleInputs3": "seats = [[\"#\",\".\",\".\",\".\",\"#\"],",
        "exampleOutputs3": "[\".\",\"#\",\".\",\"#\",\".\"],"
    },
    {
        "id": 1349,
        "title": "1349. Maximum Students Taking Exam",
        "description": "You are given an array target of n integers. From a starting array arr consisting of n 1's, you may perform the following procedure :",
        "exampleInputs1": "target = [9,3,5]",
        "exampleOutputs1": "true",
        "exampleInputs2": "target = [1,1,1,2]",
        "exampleOutputs2": "false",
        "exampleInputs3": "target = [8,5]",
        "exampleOutputs3": "true"
    },
    {
        "id": 1354,
        "title": "1354. Construct Target Array With Multiple Sums",
        "description": "Given n orders, each order consist in pickup and delivery services.",
        "exampleInputs1": "n = 1",
        "exampleOutputs1": "1",
        "exampleInputs2": "n = 2",
        "exampleOutputs2": "6",
        "exampleInputs3": "n = 3",
        "exampleOutputs3": "90"
    },
    {
        "id": 1359,
        "title": "1359. Count All Valid Pickup and Delivery Options",
        "description": "Given an integer array of digits, return the largest multiple of three that can be formed by concatenating some of the given digits in any order.",
        "exampleInputs1": "digits = [8,1,9]",
        "exampleOutputs1": "\"981\"",
        "exampleInputs2": "digits = [8,6,7,1,0]",
        "exampleOutputs2": "\"8760\"",
        "exampleInputs3": "digits = [1]",
        "exampleOutputs3": "\"\"",
        "exampleInputs4": "digits = [0,0,0,0,0,0]",
        "exampleOutputs4": "\"0\""
    },
    {
        "id": 1363,
        "title": "1363. Largest Multiple of Three",
        "description": "Notice that there could be some invalid signs on the cells of the grid which points outside the grid.",
        "exampleInputs1": "grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "grid = [[1,1,3],[3,2,2],[1,1,4]]",
        "exampleOutputs2": "0",
        "exampleInputs3": "grid = [[1,2],[4,3]]",
        "exampleOutputs3": "1",
        "exampleInputs4": "grid = [[2,2,2],[2,2,2]]",
        "exampleOutputs4": "3",
        "exampleInputs5": "grid = [[4]]",
        "exampleOutputs5": "0"
    },
    {
        "id": 1368,
        "title": "1368. Minimum Cost to Make at Least One Valid Path in a Grid",
        "description": "Given a binary tree root, return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).",
        "exampleInputs1": "root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]",
        "exampleOutputs1": "20",
        "exampleInputs2": "root = [4,3,null,1,2]",
        "exampleOutputs2": "2",
        "exampleInputs3": "root = [-4,-2,-5]",
        "exampleOutputs3": "0",
        "exampleInputs4": "root = [2,1,3]",
        "exampleOutputs4": "6",
        "exampleInputs5": "root = [5,4,8,3,null,6,3]",
        "exampleOutputs5": "7"
    },
    {
        "id": 1373,
        "title": "1373. Maximum Sum BST in Binary Tree",
        "description": "Given an undirected tree consisting of n vertices numbered from 1 to n. A frog starts jumping from vertex 1. In one second, the frog jumps from its current vertex to another unvisited vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.",
        "exampleInputs1": "n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4",
        "exampleOutputs1": "0.16666666666666666",
        "exampleInputs2": "n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7",
        "exampleOutputs2": "0.3333333333333333",
        "exampleInputs3": "n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 20, target = 6",
        "exampleOutputs3": "0.16666666666666666"
    },
    {
        "id": 1377,
        "title": "1377. Frog Position After T Seconds",
        "description": "You are given two integers n and k and two integer arrays speed and efficiency both of length n. There are n engineers numbered from 1 to n. speed[i] and efficiency[i] represent the speed and efficiency of the ith engineer respectively.",
        "exampleInputs1": "n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2",
        "exampleOutputs1": "60",
        "exampleInputs2": "n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3",
        "exampleOutputs2": "68",
        "exampleInputs3": "n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4",
        "exampleOutputs3": "72"
    },
    {
        "id": 1383,
        "title": "1383. Maximum Performance of a Team",
        "description": "There is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows:",
        "exampleInputs1": "slices = [1,2,3,4,5,6]",
        "exampleOutputs1": "10",
        "exampleInputs2": "slices = [8,9,8,6,1,1]",
        "exampleOutputs2": "16",
        "exampleInputs3": "slices = [4,1,2,5,8,3,1,9,7]",
        "exampleOutputs3": "21",
        "exampleInputs4": "slices = [3,1,2]",
        "exampleOutputs4": "3"
    },
    {
        "id": 1388,
        "title": "1388. Pizza With 3n Slices",
        "description": "A string is called a happy prefix if is a non-empty prefix which is also a suffix (excluding itself).",
        "exampleInputs1": "s = \"level\"",
        "exampleOutputs1": "\"l\"",
        "exampleInputs2": "s = \"ababab\"",
        "exampleOutputs2": "\"abab\"",
        "exampleInputs3": "s = \"leetcodeleet\"",
        "exampleOutputs3": "\"leet\"",
        "exampleInputs4": "s = \"a\"",
        "exampleOutputs4": "\"\""
    },
    {
        "id": 1392,
        "title": "1392. Longest Happy Prefix",
        "description": "Given the strings s1 and s2 of size n and the string evil, return the number of good strings.",
        "exampleInputs1": "n = 2, s1 = \"aa\", s2 = \"da\", evil = \"b\"",
        "exampleOutputs1": "51",
        "exampleInputs2": "n = 8, s1 = \"leetcode\", s2 = \"leetgoes\", evil = \"leet\"",
        "exampleOutputs2": "0",
        "exampleInputs3": "n = 2, s1 = \"gx\", s2 = \"gz\", evil = \"x\"",
        "exampleOutputs3": "2"
    },
    {
        "id": 1397,
        "title": "1397. Find All Good Strings",
        "description": "A chef has collected data on the satisfaction level of his n dishes. Chef can cook any dish in 1 unit of time.",
        "exampleInputs1": "satisfaction = [-1,-8,0,5,-9]",
        "exampleOutputs1": "14",
        "exampleInputs2": "satisfaction = [4,3,2]",
        "exampleOutputs2": "20",
        "exampleInputs3": "satisfaction = [-1,-4,-5]",
        "exampleOutputs3": "0",
        "exampleInputs4": "satisfaction = [-2,5,-1,0,3,-3]",
        "exampleOutputs4": "35"
    },
    {
        "id": 1402,
        "title": "1402. Reducing Dishes",
        "description": "Alice and Bob continue their games with piles of stones. There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.",
        "exampleInputs1": "values = [1,2,3,7]",
        "exampleOutputs1": "\"Bob\"",
        "exampleInputs2": "values = [1,2,3,-9]",
        "exampleOutputs2": "\"Alice\"",
        "exampleInputs3": "values = [1,2,3,6]",
        "exampleOutputs3": "\"Tie\"",
        "exampleInputs4": "values = [1,2,3,-1,-2,-3,7]",
        "exampleOutputs4": "\"Alice\"",
        "exampleInputs5": "values = [-1,-2,-3]",
        "exampleOutputs5": "\"Tie\""
    },
    {
        "id": 1406,
        "title": "1406. Stone Game III",
        "description": "You have a grid of size n x 3 and you want to paint each cell of the grid with exactly one of the three colors: Red, Yellow, or Green while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).",
        "exampleInputs1": "n = 1",
        "exampleOutputs1": "12",
        "exampleInputs2": "n = 2",
        "exampleOutputs2": "54",
        "exampleInputs3": "n = 3",
        "exampleOutputs3": "246",
        "exampleInputs4": "n = 7",
        "exampleOutputs4": "106494",
        "exampleInputs5": "n = 5000",
        "exampleOutputs5": "30228214"
    },
    {
        "id": 1411,
        "title": "1411. Number of Ways to Paint N × 3 Grid",
        "description": "A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits s and all we know is that all integers in the array were in the range [1, k] and there are no leading zeros in the array.",
        "exampleInputs1": "s = \"1000\", k = 10000",
        "exampleOutputs1": "1",
        "exampleInputs2": "s = \"1000\", k = 10",
        "exampleOutputs2": "0",
        "exampleInputs3": "s = \"1317\", k = 2000",
        "exampleOutputs3": "8",
        "exampleInputs4": "s = \"2020\", k = 30",
        "exampleOutputs4": "1",
        "exampleInputs5": "s = \"1234567890\", k = 90",
        "exampleOutputs5": "34"
    },
    {
        "id": 1416,
        "title": "1416. Restore The Array",
        "description": "Given three integers n, m and k. Consider the following algorithm to find the maximum element of an array of positive integers:",
        "exampleInputs1": "n = 2, m = 3, k = 1",
        "exampleOutputs1": "6",
        "exampleInputs2": "n = 5, m = 2, k = 3",
        "exampleOutputs2": "0",
        "exampleInputs3": "n = 9, m = 1, k = 1",
        "exampleOutputs3": "1",
        "exampleInputs4": "n = 50, m = 100, k = 25",
        "exampleOutputs4": "34549172",
        "exampleInputs5": "n = 37, m = 17, k = 7",
        "exampleOutputs5": "418930126"
    },
    {
        "id": 1420,
        "title": "1420. Build Array Where You Can Find The Maximum Exactly K Comparisons",
        "description": "Given an integer array nums and an integer k, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, nums[i] and nums[j], where i < j, the condition j - i <= k is satisfied.",
        "exampleInputs1": "nums = [10,2,-10,5,20], k = 2",
        "exampleOutputs1": "37",
        "exampleInputs2": "nums = [-1,-2,-3], k = 1",
        "exampleOutputs2": "-1",
        "exampleInputs3": "nums = [10,-2,-10,-5,20], k = 2",
        "exampleOutputs3": "23"
    },
    {
        "id": 1425,
        "title": "1425. Constrained Subsequence Sum",
        "description": "There are n people and 40 types of hats labeled from 1 to 40.",
        "exampleInputs1": "hats = [[3,4],[4,5],[5]]",
        "exampleOutputs1": "1",
        "exampleInputs2": "hats = [[3,5,1],[3,5]]",
        "exampleOutputs2": "4",
        "exampleInputs3": "hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]",
        "exampleOutputs3": "24",
        "exampleInputs4": "hats = [[1,2,3],[2,3,5,6],[1,3,7,9],[1,8,9],[2,5,7]]",
        "exampleOutputs4": "111"
    },
    {
        "id": 1434,
        "title": "1434. Number of Ways to Wear Different Hats to Each Other",
        "description": "You are given an m * n matrix, mat, and an integer k, which has its rows sorted in non-decreasing order.",
        "exampleInputs1": "mat = [[1,3,11],[2,4,6]], k = 5",
        "exampleOutputs1": "7",
        "exampleInputs2": "mat = [[1,3,11],[2,4,6]], k = 9",
        "exampleOutputs2": "17",
        "exampleInputs3": "mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7",
        "exampleOutputs3": "9",
        "exampleInputs4": "mat = [[1,1,10],[2,2,9]], k = 7",
        "exampleOutputs4": "12"
    },
    {
        "id": 1439,
        "title": "1439. Find the Kth Smallest Sum of a Matrix With Sorted Rows",
        "description": "Given a rectangular pizza represented as a rows x cols matrix containing the following characters: 'A' (an apple) and '.' (empty cell) and given the integer k. You have to cut the pizza into k pieces using k-1 cuts.",
        "exampleInputs1": "pizza = [\"A..\",\"AAA\",\"...\"], k = 3",
        "exampleOutputs1": "3",
        "exampleInputs2": "pizza = [\"A..\",\"AA.\",\"...\"], k = 3",
        "exampleOutputs2": "1",
        "exampleInputs3": "pizza = [\"A..\",\"A..\",\"...\"], k = 1",
        "exampleOutputs3": "1"
    },
    {
        "id": 1444,
        "title": "1444. Number of Ways of Cutting a Pizza",
        "description": "Given an array of integers cost and an integer target. Return the maximum integer you can paint under the following rules:",
        "exampleInputs1": "cost = [4,3,2,5,6,7,2,5,5], target = 9",
        "exampleOutputs1": "\"7772\"",
        "exampleInputs2": "cost = [7,6,5,5,5,6,8,7,8], target = 12",
        "exampleOutputs2": "\"85\"",
        "exampleInputs3": "cost = [2,4,6,2,4,6,4,4,4], target = 5",
        "exampleOutputs3": "\"0\"",
        "exampleInputs4": "cost = [6,10,15,40,40,40,40,40,40], target = 47",
        "exampleOutputs4": "\"32211\""
    },
    {
        "id": 1449,
        "title": "1449. Form Largest Integer With Digits That Add up to Target",
        "description": "You have a very large square wall and a circular dartboard placed on the wall. You have been challenged to throw darts into the board blindfolded. Darts thrown at the wall are represented as an array of points on a 2D plane.",
        "exampleInputs1": "points = [[-2,0],[2,0],[0,2],[0,-2]], r = 2",
        "exampleOutputs1": "4",
        "exampleInputs2": "points = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5",
        "exampleOutputs2": "5",
        "exampleInputs3": "points = [[-2,0],[2,0],[0,2],[0,-2]], r = 1",
        "exampleOutputs3": "1",
        "exampleInputs4": "points = [[1,2],[3,5],[1,-1],[2,3],[4,1],[1,3]], r = 2",
        "exampleOutputs4": "4"
    },
    {
        "id": 1453,
        "title": "1453. Maximum Number of Darts Inside of a Circular Dartboard",
        "description": "Given two arrays nums1 and nums2.",
        "exampleInputs1": "nums1 = [2,1,-2,5], nums2 = [3,0,-6]",
        "exampleOutputs1": "18",
        "exampleInputs2": "nums1 = [3,-2], nums2 = [2,-6,7]",
        "exampleOutputs2": "21",
        "exampleInputs3": "nums1 = [-1,-1], nums2 = [1,1]",
        "exampleOutputs3": "-1"
    },
    {
        "id": 1458,
        "title": "1458. Max Dot Product of Two Subsequences",
        "description": "Given a rows x cols matrix grid representing a field of cherries. Each cell in grid represents the number of cherries that you can collect.",
        "exampleInputs1": "grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]",
        "exampleOutputs1": "24",
        "exampleInputs2": "grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]",
        "exampleOutputs2": "28",
        "exampleInputs3": "grid = [[1,0,0,3],[0,0,0,3],[0,0,3,3],[9,0,3,3]]",
        "exampleOutputs3": "22",
        "exampleInputs4": "grid = [[1,1],[1,1]]",
        "exampleOutputs4": "4"
    },
    {
        "id": 1463,
        "title": "1463. Cherry Pickup II",
        "description": "Given 2n balls of k distinct colors. You will be given an integer array balls of size k where balls[i] is the number of balls of color i.",
        "exampleInputs1": "balls = [1,1]",
        "exampleOutputs1": "1.00000",
        "exampleInputs2": "balls = [2,1,1]",
        "exampleOutputs2": "0.66667",
        "exampleInputs3": "balls = [1,2,1,2]",
        "exampleOutputs3": "0.60000",
        "exampleInputs4": "balls = [3,2,1]",
        "exampleOutputs4": "0.30000",
        "exampleInputs5": "balls = [6,6,6,6,6,6]",
        "exampleOutputs5": "0.90327"
    },
    {
        "id": 1467,
        "title": "1467. Probability of a Two Boxes Having The Same Number of Distinct Balls",
        "description": "There is a row of m houses in a small city, each house must be painted with one of the n colors (labeled from 1 to n), some houses that have been painted last summer should not be painted again.",
        "exampleInputs1": "houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3",
        "exampleOutputs1": "9",
        "exampleInputs2": "houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3",
        "exampleOutputs2": "11",
        "exampleInputs3": "houses = [0,0,0,0,0], cost = [[1,10],[10,1],[1,10],[10,1],[1,10]], m = 5, n = 2, target = 5",
        "exampleOutputs3": "5",
        "exampleInputs4": "houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3",
        "exampleOutputs4": "-1"
    },
    {
        "id": 1473,
        "title": "1473. Paint House III",
        "description": "Given the array houses and an integer k. where houses[i] is the location of the ith house along a street, your task is to allocate k mailboxes in the street.",
        "exampleInputs1": "houses = [1,4,8,10,20], k = 3",
        "exampleOutputs1": "5",
        "exampleInputs2": "houses = [2,3,5,12,18], k = 2",
        "exampleOutputs2": "9",
        "exampleInputs3": "houses = [7,4,6,1], k = 1",
        "exampleOutputs3": "8",
        "exampleInputs4": "houses = [3,6,14,10], k = 4",
        "exampleOutputs4": "0"
    },
    {
        "id": 1478,
        "title": "1478. Allocate Mailboxes",
        "description": "You are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array parent where parent[i] is the parent of ith node. The root of the tree is node 0. Find the kth ancestor of a given node.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"TreeAncestor\", \"getKthAncestor\", \"getKthAncestor\", \"getKthAncestor\"]"
    },
    {
        "id": 1483,
        "title": "1483. Kth Ancestor of a Tree Node",
        "description": "Given a weighted undirected connected graph with n vertices numbered from 0 to n - 1, and an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional and weighted edge between nodes ai and bi. A minimum spanning tree (MST) is a subset of the graph's edges that connects all vertices without cycles and with the minimum possible total edge weight.",
        "exampleInputs1": "n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]",
        "exampleOutputs1": "[[0,1],[2,3,4,5]]",
        "exampleInputs2": "n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]",
        "exampleOutputs2": "[[],[0,1,2,3]]"
    },
    {
        "id": 1489,
        "title": "1489. Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
        "description": "You are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given an array relations where relations[i] = [prevCoursei, nextCoursei], representing a prerequisite relationship between course prevCoursei and course nextCoursei: course prevCoursei has to be taken before course nextCoursei. Also, you are given the integer k.",
        "exampleInputs1": "n = 4, dependencies = [[2,1],[3,1],[1,4]], k = 2",
        "exampleOutputs1": "3",
        "exampleInputs2": "n = 5, dependencies = [[2,1],[3,1],[4,1],[1,5]], k = 2",
        "exampleOutputs2": "4",
        "exampleInputs3": "n = 11, dependencies = [], k = 2",
        "exampleOutputs3": "6"
    },
    {
        "id": 1494,
        "title": "1494. Parallel Courses II",
        "description": "You are given an array points containing the coordinates of points on a 2D plane, sorted by the x-values, where points[i] = [xi, yi] such that xi < xj for all 1 <= i < j <= points.length. You are also given an integer k.",
        "exampleInputs1": "points = [[1,3],[2,0],[5,10],[6,-10]], k = 1",
        "exampleOutputs1": "4",
        "exampleInputs2": "points = [[0,0],[3,0],[9,2]], k = 3",
        "exampleOutputs2": "3"
    },
    {
        "id": 1499,
        "title": "1499. Max Value of Equation",
        "description": "Given a string num representing the digits of a very large integer and an integer k.",
        "exampleInputs1": "num = \"4321\", k = 4",
        "exampleOutputs1": "\"1342\"",
        "exampleInputs2": "num = \"100\", k = 1",
        "exampleOutputs2": "\"010\"",
        "exampleInputs3": "num = \"36789\", k = 1000",
        "exampleOutputs3": "\"36789\"",
        "exampleInputs4": "num = \"22\", k = 22",
        "exampleOutputs4": "\"22\"",
        "exampleInputs5": "num = \"9438957234785635408\", k = 23",
        "exampleOutputs5": "\"0345989723478563548\""
    },
    {
        "id": 1505,
        "title": "1505. Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
        "description": "Alice and Bob take turns playing a game, with Alice starting first.",
        "exampleInputs1": "n = 1",
        "exampleOutputs1": "true",
        "exampleInputs2": "n = 2",
        "exampleOutputs2": "false",
        "exampleInputs3": "n = 4",
        "exampleOutputs3": "true",
        "exampleInputs4": "n = 7",
        "exampleOutputs4": "false",
        "exampleInputs5": "n = 17",
        "exampleOutputs5": "false"
    },
    {
        "id": 1510,
        "title": "1510. Stone Game IV",
        "description": "A delivery company wants to build a new service centre in a new city. The company knows the positions of all the customers in this city on a 2D-Map and wants to build the new centre in a position such that the sum of the euclidean distances to all customers is minimum.",
        "exampleInputs1": "positions = [[0,1],[1,0],[1,2],[2,1]]",
        "exampleOutputs1": "4.00000",
        "exampleInputs2": "positions = [[1,1],[3,3]]",
        "exampleOutputs2": "2.82843",
        "exampleInputs3": "positions = [[1,1]]",
        "exampleOutputs3": "0.00000",
        "exampleInputs4": "positions = [[1,1],[0,0],[2,0]]",
        "exampleOutputs4": "2.73205",
        "exampleInputs5": "positions = [[0,1],[3,2],[4,5],[7,6],[8,9],[11,1],[2,12]]",
        "exampleOutputs5": "32.94036"
    },
    {
        "id": 1515,
        "title": "1515. Best Position for a Service Centre",
        "description": "Given a string s of lowercase letters, you need to find the maximum number of non-empty substrings of s that meet the following conditions:",
        "exampleInputs1": "s = \"adefaddaccc\"",
        "exampleOutputs1": "[\"e\",\"f\",\"ccc\"]",
        "exampleInputs2": "s = \"abbaccd\"",
        "exampleOutputs2": "[\"d\",\"bb\",\"cc\"]"
    },
    {
        "id": 1520,
        "title": "1520. Maximum Number of Non-Overlapping Substrings",
        "description": "",
        "exampleInputs1": "arr = [9,12,3,7,15], target = 5",
        "exampleOutputs1": "2",
        "exampleInputs2": "arr = [1000000,1000000,1000000], target = 1",
        "exampleOutputs2": "999999",
        "exampleInputs3": "arr = [1,2,4,8,16], target = 0",
        "exampleOutputs3": "0"
    },
    {
        "id": 1521,
        "title": "1521. Find a Value of a Mysterious Function Closest to Target",
        "description": "Given an array of positive integers target and an array initial of same size with all zeros.",
        "exampleInputs1": "target = [1,2,3,2,1]",
        "exampleOutputs1": "3",
        "exampleInputs2": "target = [3,1,1,2]",
        "exampleOutputs2": "4",
        "exampleInputs3": "target = [3,1,5,4,2]",
        "exampleOutputs3": "7",
        "exampleInputs4": "target = [1,1,1,1]",
        "exampleOutputs4": "1"
    },
    {
        "id": 1526,
        "title": "1526. Minimum Number of Increments on Subarrays to Form a Target Array",
        "description": "Run-length encoding is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string \"aabccc\" we replace \"aa\" by \"a2\" and replace \"ccc\" by \"c3\". Thus the compressed string becomes \"a2bc3\".",
        "exampleInputs1": "s = \"aaabcccd\", k = 2",
        "exampleOutputs1": "4",
        "exampleInputs2": "s = \"aabbaa\", k = 2",
        "exampleOutputs2": "2",
        "exampleInputs3": "s = \"aaaaaaaaaaa\", k = 0",
        "exampleOutputs3": "3"
    },
    {
        "id": 1531,
        "title": "1531. String Compression II",
        "description": "You are given two sorted arrays of distinct integers nums1 and nums2.",
        "exampleInputs1": "nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]",
        "exampleOutputs1": "30",
        "exampleInputs2": "nums1 = [1,3,5,7,9], nums2 = [3,5,100]",
        "exampleOutputs2": "109",
        "exampleInputs3": "nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]",
        "exampleOutputs3": "40",
        "exampleInputs4": "nums1 = [1,4,5,8,9,11,19], nums2 = [2,3,4,11,12]",
        "exampleOutputs4": "61"
    },
    {
        "id": 1537,
        "title": "1537. Get the Maximum Score",
        "description": "Given a string s. An awesome substring is a non-empty substring of s such that we can make any number of swaps in order to make it palindrome.",
        "exampleInputs1": "s = \"3242415\"",
        "exampleOutputs1": "5",
        "exampleInputs2": "s = \"12345678\"",
        "exampleOutputs2": "1",
        "exampleInputs3": "s = \"213123\"",
        "exampleOutputs3": "6",
        "exampleInputs4": "s = \"00\"",
        "exampleOutputs4": "2"
    },
    {
        "id": 1542,
        "title": "1542. Find Longest Awesome Substring",
        "description": "Given a wooden stick of length n units. The stick is labelled from 0 to n. For example, a stick of length 6 is labelled as follows:",
        "exampleInputs1": "n = 7, cuts = [1,3,4,5]",
        "exampleOutputs1": "16",
        "exampleInputs2": "n = 9, cuts = [5,6,1,4,2]",
        "exampleOutputs2": "22"
    },
    {
        "id": 1547,
        "title": "1547. Minimum Cost to Cut a Stick",
        "description": "There are n oranges in the kitchen and you decided to eat some of these oranges every day as follows:",
        "exampleInputs1": "n = 10",
        "exampleOutputs1": "4",
        "exampleInputs2": "n = 6",
        "exampleOutputs2": "3",
        "exampleInputs3": "n = 1",
        "exampleOutputs3": "1",
        "exampleInputs4": "n = 56",
        "exampleOutputs4": "6"
    },
    {
        "id": 1553,
        "title": "1553. Minimum Number of Days to Eat N Oranges",
        "description": "Given a 2D array of characters grid of size m x n, you need to find if there exists any cycle consisting of the same value in grid.",
        "exampleInputs1": "grid = [[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]]",
        "exampleOutputs1": "true",
        "exampleInputs2": "grid = [[\"c\",\"c\",\"c\",\"a\"],[\"c\",\"d\",\"c\",\"c\"],[\"c\",\"c\",\"e\",\"c\"],[\"f\",\"c\",\"c\",\"c\"]]",
        "exampleOutputs2": "true",
        "exampleInputs3": "grid = [[\"a\",\"b\",\"b\"],[\"b\",\"z\",\"b\"],[\"b\",\"b\",\"a\"]]",
        "exampleOutputs3": "false"
    },
    {
        "id": 1559,
        "title": "1559. Detect Cycles in 2D Grid",
        "description": "There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.",
        "exampleInputs1": "stoneValue = [6,2,3,4,5,5]",
        "exampleOutputs1": "18",
        "exampleInputs2": "stoneValue = [7,7,7,7,7,7,7]",
        "exampleOutputs2": "28",
        "exampleInputs3": "stoneValue = [4]",
        "exampleOutputs3": "0"
    },
    {
        "id": 1563,
        "title": "1563. Stone Game V",
        "description": "Given a 2D grid consisting of 1s (land) and 0s (water).  An island is a maximal 4-directionally (horizontal or vertical) connected group of 1s.",
        "exampleInputs1": "grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "grid = [[1,1]]",
        "exampleOutputs2": "2",
        "exampleInputs3": "grid = [[1,0,1,0]]",
        "exampleOutputs3": "0",
        "exampleInputs4": "grid = [[1,1,0,1,1],",
        "exampleOutputs4": "[1,1,1,1,1],",
        "exampleInputs5": "grid = [[1,1,0,1,1],",
        "exampleOutputs5": "[1,1,1,1,1],"
    },
    {
        "id": 1568,
        "title": "1568. Minimum Number of Days to Disconnect Island",
        "description": "Given an array nums that represents a permutation of integers from 1 to n. We are going to construct a binary search tree (BST) by inserting the elements of nums in order into an initially empty BST. Find the number of different ways to reorder nums so that the constructed BST is identical to that formed from the original array nums.",
        "exampleInputs1": "nums = [2,1,3]",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [3,4,5,1,2]",
        "exampleOutputs2": "5",
        "exampleInputs3": "nums = [1,2,3]",
        "exampleOutputs3": "0",
        "exampleInputs4": "nums = [3,1,2,5,4,6]",
        "exampleOutputs4": "19",
        "exampleInputs5": "nums = [9,4,2,1,3,6,5,7,8,14,11,10,12,13,16,15,17,18]",
        "exampleOutputs5": "216212978"
    },
    {
        "id": 1569,
        "title": "1569. Number of Ways to Reorder Array to Get Same BST",
        "description": "You are given an array of distinct positive integers locations where locations[i] represents the position of city i. You are also given integers start, finish and fuel representing the starting city, ending city, and the initial amount of fuel you have, respectively.",
        "exampleInputs1": "locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5",
        "exampleOutputs1": "4",
        "exampleInputs2": "locations = [4,3,1], start = 1, finish = 0, fuel = 6",
        "exampleOutputs2": "5",
        "exampleInputs3": "locations = [5,2,1], start = 0, finish = 2, fuel = 3",
        "exampleOutputs3": "0",
        "exampleInputs4": "locations = [2,1,5], start = 0, finish = 0, fuel = 3",
        "exampleOutputs4": "2",
        "exampleInputs5": "locations = [1,2,3], start = 0, finish = 2, fuel = 40",
        "exampleOutputs5": "615088286"
    },
    {
        "id": 1575,
        "title": "1575. Count All Possible Routes",
        "description": "Alice and Bob have an undirected graph of n nodes and 3 types of edges:",
        "exampleInputs1": "n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]",
        "exampleOutputs2": "0",
        "exampleInputs3": "n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]",
        "exampleOutputs3": "-1"
    },
    {
        "id": 1579,
        "title": "1579. Remove Max Number of Edges to Keep Graph Fully Traversable",
        "description": "Given two strings s and t, you want to transform string s into string t using the following operation any number of times:",
        "exampleInputs1": "s = \"84532\", t = \"34852\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"34521\", t = \"23415\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "s = \"12345\", t = \"12435\"",
        "exampleOutputs3": "false",
        "exampleInputs4": "s = \"1\", t = \"2\"",
        "exampleOutputs4": "false"
    },
    {
        "id": 1585,
        "title": "1585. Check If String Is Transformable With Substring Sort Operations",
        "description": "There is a strange printer with the following two special requirements:",
        "exampleInputs1": "targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]",
        "exampleOutputs1": "true",
        "exampleInputs2": "targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]",
        "exampleOutputs2": "true",
        "exampleInputs3": "targetGrid = [[1,2,1],[2,1,2],[1,2,1]]",
        "exampleOutputs3": "false",
        "exampleInputs4": "targetGrid = [[1,1,1],[3,1,3]]",
        "exampleOutputs4": "false"
    },
    {
        "id": 1591,
        "title": "1591. Strange Printer II",
        "description": "You are given two groups of points where the first group has size1 points, the second group has size2 points, and size1 >= size2.",
        "exampleInputs1": "cost = [[15, 96], [36, 2]]",
        "exampleOutputs1": "17",
        "exampleInputs2": "cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]",
        "exampleOutputs2": "4",
        "exampleInputs3": "cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]]",
        "exampleOutputs3": "10"
    },
    {
        "id": 1595,
        "title": "1595. Minimum Cost to Connect Two Groups of Points",
        "description": "We have n buildings numbered from 0 to n - 1. Each building has a number of employees. It's transfer season, and some employees want to change the building they reside in.",
        "exampleInputs1": "n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]",
        "exampleOutputs1": "5",
        "exampleInputs2": "n = 3, requests = [[0,0],[1,2],[2,1]]",
        "exampleOutputs2": "3",
        "exampleInputs3": "n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]",
        "exampleOutputs3": "4"
    },
    {
        "id": 1601,
        "title": "1601. Maximum Number of Achievable Transfer Requests",
        "description": "You have k servers numbered from 0 to k-1 that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but cannot handle more than one request at a time. The requests are assigned to servers according to a specific algorithm:",
        "exampleInputs1": "k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3]",
        "exampleOutputs1": "[1]",
        "exampleInputs2": "k = 3, arrival = [1,2,3,4], load = [1,2,1,2]",
        "exampleOutputs2": "[0]",
        "exampleInputs3": "k = 3, arrival = [1,2,3], load = [10,12,11]",
        "exampleOutputs3": "[0,1,2]",
        "exampleInputs4": "k = 3, arrival = [1,2,3,4,8,9,10], load = [5,2,10,3,1,2,2]",
        "exampleOutputs4": "[1]",
        "exampleInputs5": "k = 1, arrival = [1], load = [1]",
        "exampleOutputs5": "[0]"
    },
    {
        "id": 1606,
        "title": "1606. Find Servers That Handled Most Number of Requests",
        "description": "You are given an array points, an integer angle, and your location, where location = [posx, posy] and points[i] = [xi, yi] both denote integral coordinates on the X-Y plane.",
        "exampleInputs1": "points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]",
        "exampleOutputs1": "3",
        "exampleInputs2": "points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1]",
        "exampleOutputs2": "4",
        "exampleInputs3": "points = [[1,0],[2,1]], angle = 13, location = [1,1]",
        "exampleOutputs3": "1"
    },
    {
        "id": 1610,
        "title": "1610. Maximum Number of Visible Points",
        "description": "Given an integer n, you must transform it into 0 using the following operations any number of times:",
        "exampleInputs1": "n = 0",
        "exampleOutputs1": "0",
        "exampleInputs2": "n = 3",
        "exampleOutputs2": "2",
        "exampleInputs3": "n = 6",
        "exampleOutputs3": "4",
        "exampleInputs4": "n = 9",
        "exampleOutputs4": "14",
        "exampleInputs5": "n = 333",
        "exampleOutputs5": "393"
    },
    {
        "id": 1611,
        "title": "1611. Minimum One Bit Operations to Make Integers Zero",
        "description": "There are n cities numbered from 1 to n. You are given an array edges of size n-1, where edges[i] = [ui, vi] represents a bidirectional edge between cities ui and vi. There exists a unique path between each pair of cities. In other words, the cities form a tree.",
        "exampleInputs1": "n = 4, edges = [[1,2],[2,3],[2,4]]",
        "exampleOutputs1": "[3,4,0]",
        "exampleInputs2": "n = 2, edges = [[1,2]]",
        "exampleOutputs2": "[1]",
        "exampleInputs3": "n = 3, edges = [[1,2],[2,3]]",
        "exampleOutputs3": "[2,1]"
    },
    {
        "id": 1617,
        "title": "1617. Count Subtrees With Max Distance Between Cities",
        "description": "Write an API that generates fancy sequences using the append, addAll, and multAll operations.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"Fancy\", \"append\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"getIndex\", \"getIndex\"]"
    },
    {
        "id": 1622,
        "title": "1622. Fancy Sequence",
        "description": "We have n cities labeled from 1 to n. Two different cities with labels x and y are directly connected by a bidirectional road if and only if x and y share a common divisor strictly greater than some threshold. More formally, cities with labels x and y have a road between them if there exists an integer z such that all of the following are true:",
        "exampleInputs1": "n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]",
        "exampleOutputs1": "[false,false,true]",
        "exampleInputs2": "n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]",
        "exampleOutputs2": "[true,true,true,true,true]",
        "exampleInputs3": "n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]",
        "exampleOutputs3": "[false,false,false,false,false]"
    },
    {
        "id": 1627,
        "title": "1627. Graph Connectivity With Threshold",
        "description": "Given an m x n matrix, return a new matrix answer where answer[row][col] is the rank of matrix[row][col].",
        "exampleInputs1": "matrix = [[1,2],[3,4]]",
        "exampleOutputs1": "[[1,2],[2,3]]",
        "exampleInputs2": "matrix = [[7,7],[7,7]]",
        "exampleOutputs2": "[[1,1],[1,1]]",
        "exampleInputs3": "matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]",
        "exampleOutputs3": "[[4,2,3],[1,3,4],[5,1,6],[1,3,4]]",
        "exampleInputs4": "matrix = [[7,3,6],[1,4,5],[9,8,2]]",
        "exampleOutputs4": "[[5,1,4],[1,2,3],[6,3,1]]"
    },
    {
        "id": 1632,
        "title": "1632. Rank Transform of a Matrix",
        "description": "You are given a list of strings of the same length words and a string target.",
        "exampleInputs1": "words = [\"acca\",\"bbbb\",\"caca\"], target = \"aba\"",
        "exampleOutputs1": "6",
        "exampleInputs2": "words = [\"abba\",\"baab\"], target = \"bab\"",
        "exampleOutputs2": "4",
        "exampleInputs3": "words = [\"abcd\"], target = \"abcd\"",
        "exampleOutputs3": "1",
        "exampleInputs4": "words = [\"abab\",\"baba\",\"abba\",\"baab\"], target = \"abba\"",
        "exampleOutputs4": "16"
    },
    {
        "id": 1639,
        "title": "1639. Number of Ways to Form a Target String Given a Dictionary",
        "description": "Bob is standing at cell (0, 0), and he wants to reach destination: (row, column). He can only travel right and down. You are going to help Bob by providing instructions for him to reach destination.",
        "exampleInputs1": "destination = [2,3], k = 1",
        "exampleOutputs1": "\"HHHVV\"",
        "exampleInputs2": "destination = [2,3], k = 2",
        "exampleOutputs2": "\"HHVHV\"",
        "exampleInputs3": "destination = [2,3], k = 3",
        "exampleOutputs3": "\"HHVVH\""
    },
    {
        "id": 1643,
        "title": "1643. Kth Smallest Instructions",
        "description": "Given an integer array instructions, you are asked to create a sorted array from the elements in instructions. You start with an empty container nums. For each element from left to right in instructions, insert it into nums. The cost of each insertion is the minimum of the following:",
        "exampleInputs1": "instructions = [1,5,6,2]",
        "exampleOutputs1": "1",
        "exampleInputs2": "instructions = [1,2,3,6,5,4]",
        "exampleOutputs2": "3",
        "exampleInputs3": "instructions = [1,3,3,3,2,4,2,1,2]",
        "exampleOutputs3": "4"
    },
    {
        "id": 1649,
        "title": "1649. Create Sorted Array through Instructions",
        "description": "You are given an array of n integers, nums, where there are at most 50 unique values in the array. You are also given an array of m customer order quantities, quantity, where quantity[i] is the amount of integers the ith customer ordered. Determine if it is possible to distribute nums such that:",
        "exampleInputs1": "nums = [1,2,3,4], quantity = [2]",
        "exampleOutputs1": "false",
        "exampleInputs2": "nums = [1,2,3,3], quantity = [2]",
        "exampleOutputs2": "true",
        "exampleInputs3": "nums = [1,1,2,2], quantity = [2,2]",
        "exampleOutputs3": "true",
        "exampleInputs4": "nums = [1,1,2,3], quantity = [2,2]",
        "exampleOutputs4": "false",
        "exampleInputs5": "nums = [1,1,1,1,1], quantity = [2,3]",
        "exampleOutputs5": "true"
    },
    {
        "id": 1655,
        "title": "1655. Distribute Repeating Integers",
        "description": "You are given four integers, m, n, introvertsCount, and extrovertsCount. You have an m x n grid, and there are two types of people: introverts and extroverts. There are introvertsCount introverts and extrovertsCount extroverts.",
        "exampleInputs1": "m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2",
        "exampleOutputs1": "240",
        "exampleInputs2": "m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1",
        "exampleOutputs2": "260",
        "exampleInputs3": "m = 2, n = 2, introvertsCount = 4, extrovertsCount = 0",
        "exampleOutputs3": "240"
    },
    {
        "id": 1659,
        "title": "1659. Maximize Grid Happiness",
        "description": "You are given an array tasks where tasks[i] = [actuali, minimumi]:",
        "exampleInputs1": "tasks = [[1,2],[2,4],[4,8]]",
        "exampleOutputs1": "8",
        "exampleInputs2": "tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]",
        "exampleOutputs2": "32",
        "exampleInputs3": "tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]",
        "exampleOutputs3": "27"
    },
    {
        "id": 1665,
        "title": "1665. Minimum Initial Energy to Finish Tasks",
        "description": "You may recall that an array arr is a mountain array if and only if:",
        "exampleInputs1": "nums = [1,3,1]",
        "exampleOutputs1": "0",
        "exampleInputs2": "nums = [2,1,1,5,6,2,3,1]",
        "exampleOutputs2": "3",
        "exampleInputs3": "nums = [4,3,2,1,1,2,3,1]",
        "exampleOutputs3": "4",
        "exampleInputs4": "nums = [1,2,3,4,4,3,2,1]",
        "exampleOutputs4": "1"
    },
    {
        "id": 1671,
        "title": "1671. Minimum Number of Removals to Make Mountain Array",
        "description": "You are given an array nums of n positive integers.",
        "exampleInputs1": "nums = [1,2,3,4]",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [4,1,5,20,3]",
        "exampleOutputs2": "3",
        "exampleInputs3": "nums = [2,10,8]",
        "exampleOutputs3": "3"
    },
    {
        "id": 1675,
        "title": "1675. Minimize Deviation in Array",
        "description": "You are given an integer array nums​​​ and an integer k. You are asked to distribute this array into k subsets of equal size such that there are no two equal elements in the same subset.",
        "exampleInputs1": "nums = [1,2,1,4], k = 2",
        "exampleOutputs1": "4",
        "exampleInputs2": "nums = [6,3,8,1,3,1,2,2], k = 4",
        "exampleOutputs2": "6",
        "exampleInputs3": "nums = [5,3,3,6,3,3], k = 3",
        "exampleOutputs3": "-1"
    },
    {
        "id": 1681,
        "title": "1681. Minimum Incompatibility",
        "description": "You have the task of delivering some boxes from storage to their ports using only one ship. However, this ship has a limit on the number of boxes and the total weight that it can carry.",
        "exampleInputs1": "boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3",
        "exampleOutputs1": "4",
        "exampleInputs2": "boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6",
        "exampleOutputs2": "6",
        "exampleInputs3": "boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7",
        "exampleOutputs3": "6",
        "exampleInputs4": "boxes = [[2,4],[2,5],[3,1],[3,2],[3,7],[3,1],[4,4],[1,3],[5,2]], portsCount = 5, maxBoxes = 5, maxWeight = 7",
        "exampleOutputs4": "14"
    },
    {
        "id": 1687,
        "title": "1687. Delivering Boxes from Storage to Ports",
        "description": "Given n cuboids where the dimensions of the ith cuboid is cuboids[i] = [widthi, lengthi, heighti] (0-indexed). Choose a subset of cuboids and place them on each other.",
        "exampleInputs1": "cuboids = [[50,45,20],[95,37,53],[45,23,12]]",
        "exampleOutputs1": "190",
        "exampleInputs2": "cuboids = [[38,25,45],[76,35,3]]",
        "exampleOutputs2": "76",
        "exampleInputs3": "cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]",
        "exampleOutputs3": "102"
    },
    {
        "id": 1691,
        "title": "1691. Maximum Height by Stacking Cuboids",
        "description": "An undirected graph of n nodes is defined by edgeList, where edgeList[i] = [ui, vi, disi] denotes an edge between nodes ui and vi with distance disi. Note that there may be multiple edges between two nodes.",
        "exampleInputs1": "n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]",
        "exampleOutputs1": "[false,true]",
        "exampleInputs2": "n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]",
        "exampleOutputs2": "[true,false]"
    },
    {
        "id": 1697,
        "title": "1697. Checking Existence of Edge Length Limited Paths",
        "description": "You are given an integer array, nums, and an integer k. nums comprises of only 0's and 1's. In one move, you can choose two adjacent indices and swap their values.",
        "exampleInputs1": "nums = [1,0,0,1,0,1], k = 2",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [1,0,0,0,0,0,1,1], k = 3",
        "exampleOutputs2": "5",
        "exampleInputs3": "nums = [1,1,0,1], k = 2",
        "exampleOutputs3": "0"
    },
    {
        "id": 1703,
        "title": "1703. Minimum Adjacent Swaps for K Consecutive Ones",
        "description": "You are given an array nums consisting of non-negative integers. You are also given a queries array, where queries[i] = [xi, mi].",
        "exampleInputs1": "nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]",
        "exampleOutputs1": "[3,3,7]",
        "exampleInputs2": "nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]",
        "exampleOutputs2": "[15,-1,5]"
    },
    {
        "id": 1707,
        "title": "1707. Maximum XOR With an Element From Array",
        "description": "You are given an array target that consists of distinct integers and another integer array arr that can have duplicates.",
        "exampleInputs1": "target = [5,1,3], arr = [9,4,2,3,4]",
        "exampleOutputs1": "2",
        "exampleInputs2": "target = [6,4,8,1,3,2], arr = [4,7,6,2,3,8,6,1]",
        "exampleOutputs2": "3"
    },
    {
        "id": 1713,
        "title": "1713. Minimum Operations to Make a Subsequence",
        "description": "You are given an array pairs, where pairs[i] = [xi, yi], and:",
        "exampleInputs1": "pairs = [[1,2],[2,3]]",
        "exampleOutputs1": "1",
        "exampleInputs2": "pairs = [[1,2],[2,3],[1,3]]",
        "exampleOutputs2": "2",
        "exampleInputs3": "pairs = [[1,2],[2,3],[2,4],[1,5]]",
        "exampleOutputs3": "0"
    },
    {
        "id": 1719,
        "title": "1719. Number Of Ways To Reconstruct A Tree",
        "description": "You are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job.",
        "exampleInputs1": "jobs = [3,2,3], k = 3",
        "exampleOutputs1": "3",
        "exampleInputs2": "jobs = [1,2,4,7,8], k = 2",
        "exampleOutputs2": "11"
    },
    {
        "id": 1723,
        "title": "1723. Find Minimum Time to Finish All Jobs",
        "description": "A game is played by a cat and a mouse named Cat and Mouse.",
        "exampleInputs1": "grid = [\"####F\",\"#C...\",\"M....\"], catJump = 1, mouseJump = 2",
        "exampleOutputs1": "true",
        "exampleInputs2": "grid = [\"M.C...F\"], catJump = 1, mouseJump = 4",
        "exampleOutputs2": "true",
        "exampleInputs3": "grid = [\"M.C...F\"], catJump = 1, mouseJump = 3",
        "exampleOutputs3": "false",
        "exampleInputs4": "grid = [\"C...#\",\"...#F\",\"....#\",\"M....\"], catJump = 2, mouseJump = 5",
        "exampleOutputs4": "false",
        "exampleInputs5": "grid = [\".M...\",\"..#..\",\"#..#.\",\"C#.#.\",\"...#F\"], catJump = 3, mouseJump = 1",
        "exampleOutputs5": "true"
    },
    {
        "id": 1728,
        "title": "1728. Cat and Mouse II",
        "description": "You are given a 2D integer array, queries. For each queries[i], where queries[i] = [ni, ki], find the number of different ways you can place positive integers into an array of size ni such that the product of the integers is ki. As the number of ways may be too large, the answer to the ith query is the number of ways modulo 109 + 7.",
        "exampleInputs1": "queries = [[2,6],[5,1],[73,660]]",
        "exampleOutputs1": "[4,1,50734910]",
        "exampleInputs2": "queries = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "exampleOutputs2": "[1,2,3,10,5]"
    },
    {
        "id": 1735,
        "title": "1735. Count Ways to Make Array With Product",
        "description": "You have a cubic storeroom where the width, length, and height of the room are all equal to n units. You are asked to place n boxes in this room where each box is a cube of unit side length. There are however some rules to placing the boxes:",
        "exampleInputs1": "n = 3",
        "exampleOutputs1": "3",
        "exampleInputs2": "n = 4",
        "exampleOutputs2": "3",
        "exampleInputs3": "n = 10",
        "exampleOutputs3": "6"
    },
    {
        "id": 1739,
        "title": "1739. Building Boxes",
        "description": "Given a string s, return true if it is possible to split the string s into three non-empty palindromic substrings. Otherwise, return false.​​​​​",
        "exampleInputs1": "s = \"abcbdd\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"bcbddxy\"",
        "exampleOutputs2": "false"
    },
    {
        "id": 1745,
        "title": "1745. Palindrome Partitioning IV",
        "description": "You are given an array of events where events[i] = [startDayi, endDayi, valuei]. The ith event starts at startDayi and ends at endDayi, and if you attend this event, you will receive a value of valuei. You are also given an integer k which represents the maximum number of events you can attend.",
        "exampleInputs1": "events = [[1,2,4],[3,4,3],[2,3,1]], k = 2",
        "exampleOutputs1": "7",
        "exampleInputs2": "events = [[1,2,4],[3,4,3],[2,3,10]], k = 2",
        "exampleOutputs2": "10",
        "exampleInputs3": "events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3",
        "exampleOutputs3": "9"
    },
    {
        "id": 1751,
        "title": "1751. Maximum Number of Events That Can Be Attended II",
        "description": "You are given an integer array nums and an integer goal.",
        "exampleInputs1": "nums = [5,-7,3,5], goal = 6",
        "exampleOutputs1": "0",
        "exampleInputs2": "nums = [7,-9,15,-2], goal = -5",
        "exampleOutputs2": "1",
        "exampleInputs3": "nums = [1,2,3], goal = -7",
        "exampleOutputs3": "7"
    },
    {
        "id": 1755,
        "title": "1755. Closest Subsequence Sum",
        "description": "You are given an undirected graph. You are given an integer n which is the number of nodes in the graph and an array edges, where each edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi.",
        "exampleInputs1": "n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]",
        "exampleOutputs2": "0"
    },
    {
        "id": 1761,
        "title": "1761. Minimum Degree of a Connected Trio in a Graph",
        "description": "There is a tree (i.e., a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. Each node has a value associated with it, and the root of the tree is node 0.",
        "exampleInputs1": "nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]",
        "exampleOutputs1": "[-1,0,0,1]",
        "exampleInputs2": "nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]",
        "exampleOutputs2": "[-1,0,-1,0,0,0,-1]"
    },
    {
        "id": 1766,
        "title": "1766. Tree of Coprimes",
        "description": "You are given two strings, word1 and word2. You want to construct a string in the following manner:",
        "exampleInputs1": "word1 = \"cacb\", word2 = \"cbba\"",
        "exampleOutputs1": "5",
        "exampleInputs2": "word1 = \"ab\", word2 = \"ab\"",
        "exampleOutputs2": "3",
        "exampleInputs3": "word1 = \"aa\", word2 = \"bb\"",
        "exampleOutputs3": "0"
    },
    {
        "id": 1771,
        "title": "1771. Maximize Palindrome Length From Subsequences",
        "description": "There are n cars traveling at different speeds in the same direction along a one-lane road. You are given an array cars of length n, where cars[i] = [positioni, speedi] represents:",
        "exampleInputs1": "cars = [[1,2],[2,1],[4,3],[7,2]]",
        "exampleOutputs1": "[1.00000,-1.00000,3.00000,-1.00000]",
        "exampleInputs2": "cars = [[3,4],[5,4],[6,3],[9,1]]",
        "exampleOutputs2": "[2.00000,1.00000,1.50000,-1.00000]"
    },
    {
        "id": 1776,
        "title": "1776. Car Fleet II",
        "description": "You are given an undirected graph defined by an integer n, the number of nodes, and a 2D integer array edges, the edges in the graph, where edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi. You are also given an integer array queries.",
        "exampleInputs1": "n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]",
        "exampleOutputs1": "[6,5]",
        "exampleInputs2": "n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]",
        "exampleOutputs2": "[10,10,9,8,6]"
    },
    {
        "id": 1782,
        "title": "1782. Count Pairs Of Nodes",
        "description": "You are given an array nums​​​ and an integer k​​​​​. The XOR of a segment [left, right] where left <= right is the XOR of all the elements with indices between left and right, inclusive: nums[left] XOR nums[left+1] XOR ... XOR nums[right].",
        "exampleInputs1": "nums = [1,2,0,3,0], k = 1",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [3,4,5,2,1,7,3,4,7], k = 3",
        "exampleOutputs2": "3",
        "exampleInputs3": "nums = [1,2,4,1,2,5,1,2,6], k = 3",
        "exampleOutputs3": "3"
    },
    {
        "id": 1787,
        "title": "1787. Make the XOR of All Segments Equal to Zero",
        "description": "You are given an array of integers nums (0-indexed) and an integer k.",
        "exampleInputs1": "nums = [1,4,3,7,4,5], k = 3",
        "exampleOutputs1": "15",
        "exampleInputs2": "nums = [5,5,4,5,4,1,1,1], k = 0",
        "exampleOutputs2": "20"
    },
    {
        "id": 1793,
        "title": "1793. Maximum Score of a Good Subarray",
        "description": "You are given nums, an array of positive integers of size 2 * n. You must perform n operations on this array.",
        "exampleInputs1": "nums = [1,2]",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [3,4,6,8]",
        "exampleOutputs2": "11",
        "exampleInputs3": "nums = [1,2,3,4,5,6]",
        "exampleOutputs3": "14"
    },
    {
        "id": 1799,
        "title": "1799. Maximize Score After N Operations",
        "description": "Given a (0-indexed) integer array nums and two integers low and high, return the number of nice pairs.",
        "exampleInputs1": "nums = [1,4,2,7], low = 2, high = 6",
        "exampleOutputs1": "6",
        "exampleInputs2": "nums = [9,8,4,2,1], low = 5, high = 14",
        "exampleOutputs2": "8"
    },
    {
        "id": 1803,
        "title": "1803. Count Pairs With XOR in a Range",
        "description": "You are given a positive integer primeFactors. You are asked to construct a positive integer n that satisfies the following conditions:",
        "exampleInputs1": "primeFactors = 5",
        "exampleOutputs1": "6",
        "exampleInputs2": "primeFactors = 8",
        "exampleOutputs2": "18"
    },
    {
        "id": 1808,
        "title": "1808. Maximize Number of Nice Divisors",
        "description": "There is a donuts shop that bakes donuts in batches of batchSize. They have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch. You are given an integer batchSize and an integer array groups, where groups[i] denotes that there is a group of groups[i] customers that will visit the shop. Each customer will get exactly one donut.",
        "exampleInputs1": "batchSize = 3, groups = [1,2,3,4,5,6]",
        "exampleOutputs1": "4",
        "exampleInputs2": "batchSize = 4, groups = [1,3,2,5,2,2,1,6]",
        "exampleOutputs2": "4"
    },
    {
        "id": 1815,
        "title": "1815. Maximum Number of Groups Getting Fresh Donuts",
        "description": "You are given an array nums that consists of positive integers.",
        "exampleInputs1": "nums = [6,10,3]",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [5,15,40,5,6]",
        "exampleOutputs2": "7"
    },
    {
        "id": 1819,
        "title": "1819. Number of Different Subsequences GCDs",
        "description": "You are given two integers, m and k, and a stream of integers. You are tasked to implement a data structure that calculates the MKAverage for the stream.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"MKAverage\", \"addElement\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"addElement\", \"addElement\", \"calculateMKAverage\"]"
    },
    {
        "id": 1825,
        "title": "1825. Finding MK Average",
        "description": "You are given a string s (0-indexed)​​​​​​. You are asked to perform the following operation on s​​​​​​ until you get a sorted string:",
        "exampleInputs1": "s = \"cba\"",
        "exampleOutputs1": "5",
        "exampleInputs2": "s = \"aabaa\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "s = \"cdbea\"",
        "exampleOutputs3": "63",
        "exampleInputs4": "s = \"leetcodeleetcodeleetcode\"",
        "exampleOutputs4": "982157772"
    },
    {
        "id": 1830,
        "title": "1830. Minimum Number of Operations to Make String Sorted",
        "description": "The XOR sum of a list is the bitwise XOR of all its elements. If the list only contains one element, then its XOR sum will be equal to this element.",
        "exampleInputs1": "arr1 = [1,2,3], arr2 = [6,5]",
        "exampleOutputs1": "0",
        "exampleInputs2": "arr1 = [12], arr2 = [4]",
        "exampleOutputs2": "4"
    },
    {
        "id": 1835,
        "title": "1835. Find XOR Sum of All Pairs Bitwise AND",
        "description": "You want to build n new buildings in a city. The new buildings will be built in a line and are labeled from 1 to n.",
        "exampleInputs1": "n = 5, restrictions = [[2,1],[4,1]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "n = 6, restrictions = []",
        "exampleOutputs2": "5",
        "exampleInputs3": "n = 10, restrictions = [[5,3],[2,5],[7,4],[10,3]]",
        "exampleOutputs3": "5"
    },
    {
        "id": 1840,
        "title": "1840. Maximum Building Height",
        "description": "There is a hotel with n rooms. The rooms are represented by a 2D integer array rooms where rooms[i] = [roomIdi, sizei] denotes that there is a room with room number roomIdi and size equal to sizei. Each roomIdi is guaranteed to be unique.",
        "exampleInputs1": "rooms = [[2,2],[1,2],[3,2]], queries = [[3,1],[3,3],[5,2]]",
        "exampleOutputs1": "[3,-1,3]",
        "exampleInputs2": "rooms = [[1,4],[2,3],[3,5],[4,1],[5,2]], queries = [[2,3],[2,4],[2,5]]",
        "exampleOutputs2": "[2,1,3]"
    },
    {
        "id": 1847,
        "title": "1847. Closest Room",
        "description": "You are given a 2D integer array intervals, where intervals[i] = [lefti, righti] describes the ith interval starting at lefti and ending at righti (inclusive). The size of an interval is defined as the number of integers it contains, or more formally righti - lefti + 1.",
        "exampleInputs1": "intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5]",
        "exampleOutputs1": "[3,3,1,4]",
        "exampleInputs2": "intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22]",
        "exampleOutputs2": "[2,-1,4,6]"
    },
    {
        "id": 1851,
        "title": "1851. Minimum Interval to Include Each Query",
        "description": "There is a directed graph of n colored nodes and m edges. The nodes are numbered from 0 to n - 1.",
        "exampleInputs1": "colors = \"abaca\", edges = [[0,1],[0,2],[2,3],[3,4]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "colors = \"a\", edges = [[0,0]]",
        "exampleOutputs2": "-1"
    },
    {
        "id": 1857,
        "title": "1857. Largest Color Value in a Directed Graph",
        "description": "Given an integer array nums, return the sum of floor(nums[i] / nums[j]) for all pairs of indices 0 <= i, j < nums.length in the array. Since the answer may be too large, return it modulo 109 + 7.",
        "exampleInputs1": "nums = [2,5,9]",
        "exampleOutputs1": "10",
        "exampleInputs2": "nums = [7,7,7,7,7,7,7]",
        "exampleOutputs2": "49"
    },
    {
        "id": 1862,
        "title": "1862. Sum of Floored Pairs",
        "description": "There are n uniquely-sized sticks whose lengths are integers from 1 to n. You want to arrange the sticks such that exactly k sticks are visible from the left. A stick is visible from the left if there are no longer sticks to the left of it.",
        "exampleInputs1": "n = 3, k = 2",
        "exampleOutputs1": "3",
        "exampleInputs2": "n = 5, k = 5",
        "exampleOutputs2": "1",
        "exampleInputs3": "n = 20, k = 11",
        "exampleOutputs3": "647427950"
    },
    {
        "id": 1866,
        "title": "1866. Number of Ways to Rearrange Sticks With K Sticks Visible",
        "description": "Alice and Bob take turns playing a game, with Alice starting first.",
        "exampleInputs1": "stones = [-1,2,-3,4,-5]",
        "exampleOutputs1": "5",
        "exampleInputs2": "stones = [7,-6,5,10,5,-2,-6]",
        "exampleOutputs2": "13",
        "exampleInputs3": "stones = [-10,-12]",
        "exampleOutputs3": "-22"
    },
    {
        "id": 1872,
        "title": "1872. Stone Game VIII",
        "description": "You are given two integer arrays nums1 and nums2 of length n.",
        "exampleInputs1": "nums1 = [1,2], nums2 = [2,3]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums1 = [1,0,3], nums2 = [5,3,4]",
        "exampleOutputs2": "8"
    },
    {
        "id": 1879,
        "title": "1879. Minimum XOR Sum of Two Arrays",
        "description": "You are given an integer hoursBefore, the number of hours you have to travel to your meeting. To arrive at your meeting, you have to travel through n roads. The road lengths are given as an integer array dist of length n, where dist[i] describes the length of the ith road in kilometers. In addition, you are given an integer speed, which is the speed (in km/h) you will travel at.",
        "exampleInputs1": "dist = [1,3,2], speed = 4, hoursBefore = 2",
        "exampleOutputs1": "1",
        "exampleInputs2": "dist = [7,3,5,5], speed = 2, hoursBefore = 10",
        "exampleOutputs2": "2",
        "exampleInputs3": "dist = [7,3,5,5], speed = 1, hoursBefore = 10",
        "exampleOutputs3": "-1"
    },
    {
        "id": 1883,
        "title": "1883. Minimum Skips to Arrive at Meeting On Time",
        "description": "You have n packages that you are trying to place in boxes, one package in each box. There are m suppliers that each produce boxes of different sizes (with infinite supply). A package can be placed in a box if the size of the package is less than or equal to the size of the box.",
        "exampleInputs1": "packages = [2,3,5], boxes = [[4,8],[2,8]]",
        "exampleOutputs1": "6",
        "exampleInputs2": "packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]]",
        "exampleOutputs2": "-1",
        "exampleInputs3": "packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]]",
        "exampleOutputs3": "9"
    },
    {
        "id": 1889,
        "title": "1889. Minimum Space Wasted From Packaging",
        "description": "You are given a valid boolean expression as a string expression consisting of the characters '1','0','&' (bitwise AND operator),'|' (bitwise OR operator),'(', and ')'.",
        "exampleInputs1": "expression = \"1&(0|1)\"",
        "exampleOutputs1": "1",
        "exampleInputs2": "expression = \"(0&0)&(0&0&0)\"",
        "exampleOutputs2": "3",
        "exampleInputs3": "expression = \"(0|(1|0&1))\"",
        "exampleOutputs3": "1"
    },
    {
        "id": 1896,
        "title": "1896. Minimum Cost to Change the Final Value of Expression",
        "description": "There is a tournament where n players are participating. The players are standing in a single row and are numbered from 1 to n based on their initial standing position (player 1 is the first player in the row, player 2 is the second player in the row, etc.).",
        "exampleInputs1": "n = 11, firstPlayer = 2, secondPlayer = 4",
        "exampleOutputs1": "[3,4]",
        "exampleInputs2": "n = 5, firstPlayer = 1, secondPlayer = 5",
        "exampleOutputs2": "[1,1]"
    },
    {
        "id": 1900,
        "title": "1900. The Earliest and Latest Rounds Where Players Compete",
        "description": "You have a movie renting company consisting of n shops. You want to implement a renting system that supports searching for, booking, and returning movies. The system should also support generating a report of the currently rented movies.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"MovieRentingSystem\", \"search\", \"rent\", \"rent\", \"report\", \"drop\", \"search\"]"
    },
    {
        "id": 1912,
        "title": "1912. Design Movie Rental System",
        "description": "You are an ant tasked with adding n new rooms numbered 0 to n-1 to your colony. You are given the expansion plan as a 0-indexed integer array of length n, prevRoom, where prevRoom[i] indicates that you must build room prevRoom[i] before building room i, and these two rooms must be connected directly. Room 0 is already built, so prevRoom[0] = -1. The expansion plan is given such that once all the rooms are built, every room will be reachable from room 0.",
        "exampleInputs1": "prevRoom = [-1,0,1]",
        "exampleOutputs1": "1",
        "exampleInputs2": "prevRoom = [-1,0,0,1,2]",
        "exampleOutputs2": "6"
    },
    {
        "id": 1916,
        "title": "1916. Count Ways to Build Rooms in an Ant Colony",
        "description": "There is a country of n cities numbered from 0 to n - 1. In this country, there is a road connecting every pair of cities.",
        "exampleInputs1": "n = 5, paths = [[0,1,2,3,4],",
        "exampleOutputs1": "[2,3,4],",
        "exampleInputs2": "n = 3, paths = [[0],[1],[2]]",
        "exampleOutputs2": "0",
        "exampleInputs3": "n = 5, paths = [[0,1,2,3,4],",
        "exampleOutputs3": "[4,3,2,1,0]]"
    },
    {
        "id": 1923,
        "title": "1923. Longest Common Subpath",
        "description": "There is a country of n cities numbered from 0 to n - 1 where all the cities are connected by bi-directional roads. The roads are represented as a 2D integer array edges where edges[i] = [xi, yi, timei] denotes a road between cities xi and yi that takes timei minutes to travel. There may be multiple roads of differing travel times connecting the same two cities, but no road connects a city to itself.",
        "exampleInputs1": "maxTime = 30, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]",
        "exampleOutputs1": "11",
        "exampleInputs2": "maxTime = 29, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]",
        "exampleOutputs2": "48",
        "exampleInputs3": "maxTime = 25, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]",
        "exampleOutputs3": "-1"
    },
    {
        "id": 1928,
        "title": "1928. Minimum Cost to Reach Destination in Time",
        "description": "You are given two integers m and n. Consider an m x n grid where each cell is initially white. You can paint each cell red, green, or blue. All cells must be painted.",
        "exampleInputs1": "m = 1, n = 1",
        "exampleOutputs1": "3",
        "exampleInputs2": "m = 1, n = 2",
        "exampleOutputs2": "6",
        "exampleInputs3": "m = 5, n = 5",
        "exampleOutputs3": "580986"
    },
    {
        "id": 1931,
        "title": "1931. Painting a Grid With Three Different Colors",
        "description": "You are given n BST (binary search tree) root nodes for n separate BSTs stored in an array trees (0-indexed). Each BST in trees has at most 3 nodes, and no two roots have the same value. In one operation, you can:",
        "exampleInputs1": "trees = [[2,1],[3,2,5],[5,4]]",
        "exampleOutputs1": "[3,2,5,1,null,4]",
        "exampleInputs2": "trees = [[5,3,8],[3,2,6]]",
        "exampleOutputs2": "[]",
        "exampleInputs3": "trees = [[5,4],[3]]",
        "exampleOutputs3": "[]",
        "exampleInputs4": "trees = [[2,1,3]]",
        "exampleOutputs4": "[2,1,3]"
    },
    {
        "id": 1932,
        "title": "1932. Merge BSTs to Create Single BST",
        "description": "There is a rooted tree consisting of n nodes numbered 0 to n - 1. Each node's number denotes its unique genetic value (i.e. the genetic value of node x is x). The genetic difference between two genetic values is defined as the bitwise-XOR of their values. You are given the integer array parents, where parents[i] is the parent for node i. If node x is the root of the tree, then parents[x] == -1.",
        "exampleInputs1": "parents = [-1,0,1,1], queries = [[0,2],[3,2],[2,5]]",
        "exampleOutputs1": "[2,3,7]",
        "exampleInputs2": "parents = [3,7,-1,2,0,7,0,2], queries = [[4,6],[1,15],[0,5]]",
        "exampleOutputs2": "[6,14,7]"
    },
    {
        "id": 1938,
        "title": "1938. Maximum Genetic Difference Query",
        "description": "There are n people standing in a queue, and they numbered from 0 to n - 1 in left to right order. You are given an array heights of distinct integers where heights[i] represents the height of the ith person.",
        "exampleInputs1": "heights = [10,6,8,5,11,9]",
        "exampleOutputs1": "[3,1,2,1,1,0]",
        "exampleInputs2": "heights = [5,1,2,3,10]",
        "exampleOutputs2": "[4,1,1,1,0]"
    },
    {
        "id": 1944,
        "title": "1944. Number of Visible People in a Queue",
        "description": "Due to a bug, there are many duplicate folders in a file system. You are given a 2D array paths, where paths[i] is an array representing an absolute path to the ith folder in the file system.",
        "exampleInputs1": "paths = [[\"a\"],[\"c\"],[\"d\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"d\",\"a\"]]",
        "exampleOutputs1": "[[\"d\"],[\"d\",\"a\"]]",
        "exampleInputs2": "paths = [[\"a\"],[\"c\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"a\",\"b\",\"x\"],[\"a\",\"b\",\"x\",\"y\"],[\"w\"],[\"w\",\"y\"]]",
        "exampleOutputs2": "[[\"c\"],[\"c\",\"b\"],[\"a\"],[\"a\",\"b\"]]",
        "exampleInputs3": "paths = [[\"a\",\"b\"],[\"c\",\"d\"],[\"c\"],[\"a\"]]",
        "exampleOutputs3": "[[\"c\"],[\"c\",\"d\"],[\"a\"],[\"a\",\"b\"]]",
        "exampleInputs4": "paths = [[\"a\"],[\"a\",\"x\"],[\"a\",\"x\",\"y\"],[\"a\",\"z\"],[\"b\"],[\"b\",\"x\"],[\"b\",\"x\",\"y\"],[\"b\",\"z\"]]",
        "exampleOutputs4": "[]",
        "exampleInputs5": "paths = [[\"a\"],[\"a\",\"x\"],[\"a\",\"x\",\"y\"],[\"a\",\"z\"],[\"b\"],[\"b\",\"x\"],[\"b\",\"x\",\"y\"],[\"b\",\"z\"],[\"b\",\"w\"]]",
        "exampleOutputs5": "[[\"b\"],[\"b\",\"w\"],[\"b\",\"z\"],[\"a\"],[\"a\",\"z\"]]"
    },
    {
        "id": 1948,
        "title": "1948. Delete Duplicate Folders in System",
        "description": "A sequence is special if it consists of a positive number of 0s, followed by a positive number of 1s, then a positive number of 2s.",
        "exampleInputs1": "nums = [0,1,2,2]",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [2,2,0,0]",
        "exampleOutputs2": "0",
        "exampleInputs3": "nums = [0,1,2,0,1,2]",
        "exampleOutputs3": "7"
    },
    {
        "id": 1955,
        "title": "1955. Count Number of Special Subsequences",
        "description": "You are given a 0-indexed string s and are tasked with finding two non-intersecting palindromic substrings of odd length such that the product of their lengths is maximized.",
        "exampleInputs1": "s = \"ababbb\"",
        "exampleOutputs1": "9",
        "exampleInputs2": "s = \"zaaaxbbby\"",
        "exampleOutputs2": "9"
    },
    {
        "id": 1960,
        "title": "1960. Maximum Product of the Length of Two Palindromic Substrings",
        "description": "You want to build some obstacle courses. You are given a 0-indexed integer array obstacles of length n, where obstacles[i] describes the height of the ith obstacle.",
        "exampleInputs1": "obstacles = [1,2,3,2]",
        "exampleOutputs1": "[1,2,3,3]",
        "exampleInputs2": "obstacles = [2,2,1]",
        "exampleOutputs2": "[1,2,1]",
        "exampleInputs3": "obstacles = [3,1,5,6,4,2]",
        "exampleOutputs3": "[1,1,2,3,2,2]"
    },
    {
        "id": 1964,
        "title": "1964. Find the Longest Valid Obstacle Course at Each Position",
        "description": "There is a 1-based binary matrix where 0 represents land and 1 represents water. You are given integers row and col representing the number of rows and columns in the matrix, respectively.",
        "exampleInputs1": "row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]",
        "exampleOutputs2": "1",
        "exampleInputs3": "row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]",
        "exampleOutputs3": "3"
    },
    {
        "id": 1970,
        "title": "1970. Last Day Where You Can Still Cross",
        "description": "You wrote down many positive integers in a string called num. However, you realized that you forgot to add commas to seperate the different numbers. You remember that the list of integers was non-decreasing and that no integer had leading zeros.",
        "exampleInputs1": "num = \"327\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "num = \"094\"",
        "exampleOutputs2": "0",
        "exampleInputs3": "num = \"0\"",
        "exampleOutputs3": "0",
        "exampleInputs4": "num = \"9999999999999\"",
        "exampleOutputs4": "101"
    },
    {
        "id": 1977,
        "title": "1977. Number of Ways to Separate Numbers",
        "description": "You are given an integer n representing the length of an unknown array that you are trying to recover. You are also given an array sums containing the values of all 2n subset sums of the unknown array (in no particular order).",
        "exampleInputs1": "n = 3, sums = [-3,-2,-1,0,0,1,2,3]",
        "exampleOutputs1": "[1,2,-3]",
        "exampleInputs2": "n = 2, sums = [0,0,0,0]",
        "exampleOutputs2": "[0,0]",
        "exampleInputs3": "n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]",
        "exampleOutputs3": "[0,-1,4,5]"
    },
    {
        "id": 1982,
        "title": "1982. Find Array Given Subset Sums",
        "description": "You are given a binary string binary. A subsequence of binary is considered good if it is not empty and has no leading zeros (with the exception of \"0\").",
        "exampleInputs1": "binary = \"001\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "binary = \"11\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "binary = \"101\"",
        "exampleOutputs3": "5"
    },
    {
        "id": 1987,
        "title": "1987. Number of Unique Good Subsequences",
        "description": "You are given a 0-indexed string s and are tasked with finding two non-intersecting palindromic substrings of odd length such that the product of their lengths is maximized.",
        "exampleInputs1": "s = \"ababbb\"",
        "exampleOutputs1": "9",
        "exampleInputs2": "s = \"zaaaxbbby\"",
        "exampleOutputs2": "9"
    },
    {
        "id": 1960,
        "title": "1960. Maximum Product of the Length of Two Palindromic Substrings",
        "description": "You want to build some obstacle courses. You are given a 0-indexed integer array obstacles of length n, where obstacles[i] describes the height of the ith obstacle.",
        "exampleInputs1": "obstacles = [1,2,3,2]",
        "exampleOutputs1": "[1,2,3,3]",
        "exampleInputs2": "obstacles = [2,2,1]",
        "exampleOutputs2": "[1,2,1]",
        "exampleInputs3": "obstacles = [3,1,5,6,4,2]",
        "exampleOutputs3": "[1,1,2,3,2,2]"
    },
    {
        "id": 1964,
        "title": "1964. Find the Longest Valid Obstacle Course at Each Position",
        "description": "There is a 1-based binary matrix where 0 represents land and 1 represents water. You are given integers row and col representing the number of rows and columns in the matrix, respectively.",
        "exampleInputs1": "row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]",
        "exampleOutputs2": "1",
        "exampleInputs3": "row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]",
        "exampleOutputs3": "3"
    },
    {
        "id": 1970,
        "title": "1970. Last Day Where You Can Still Cross",
        "description": "You wrote down many positive integers in a string called num. However, you realized that you forgot to add commas to seperate the different numbers. You remember that the list of integers was non-decreasing and that no integer had leading zeros.",
        "exampleInputs1": "num = \"327\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "num = \"094\"",
        "exampleOutputs2": "0",
        "exampleInputs3": "num = \"0\"",
        "exampleOutputs3": "0",
        "exampleInputs4": "num = \"9999999999999\"",
        "exampleOutputs4": "101"
    },
    {
        "id": 1977,
        "title": "1977. Number of Ways to Separate Numbers",
        "description": "You are given an integer n representing the length of an unknown array that you are trying to recover. You are also given an array sums containing the values of all 2n subset sums of the unknown array (in no particular order).",
        "exampleInputs1": "n = 3, sums = [-3,-2,-1,0,0,1,2,3]",
        "exampleOutputs1": "[1,2,-3]",
        "exampleInputs2": "n = 2, sums = [0,0,0,0]",
        "exampleOutputs2": "[0,0]",
        "exampleInputs3": "n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]",
        "exampleOutputs3": "[0,-1,4,5]"
    },
    {
        "id": 1982,
        "title": "1982. Find Array Given Subset Sums",
        "description": "You are given a binary string binary. A subsequence of binary is considered good if it is not empty and has no leading zeros (with the exception of \"0\").",
        "exampleInputs1": "binary = \"001\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "binary = \"11\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "binary = \"101\"",
        "exampleOutputs3": "5"
    },
    {
        "id": 1987,
        "title": "1987. Number of Unique Good Subsequences",
        "description": "You are given an integer array nums. We call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers.",
        "exampleInputs1": "nums = [1,2,3,4]",
        "exampleOutputs1": "6",
        "exampleInputs2": "nums = [4,2,3,15]",
        "exampleOutputs2": "5"
    },
    {
        "id": 1994,
        "title": "1994. The Number of Good Subsets",
        "description": "You are given an integer array nums, and you can perform the following operation any number of times on nums:",
        "exampleInputs1": "nums = [7,21,3]",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [5,2,6,2]",
        "exampleOutputs2": "false",
        "exampleInputs3": "nums = [10,5,9,3,15]",
        "exampleOutputs3": "true"
    },
    {
        "id": 1998,
        "title": "1998. GCD Sort of an Array",
        "description": "You are given a binary string binary. A subsequence of binary is considered good if it is not empty and has no leading zeros (with the exception of \"0\").",
        "exampleInputs1": "binary = \"001\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "binary = \"11\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "binary = \"101\"",
        "exampleOutputs3": "5"
    },
    {
        "id": 1987,
        "title": "1987. Number of Unique Good Subsequences",
        "description": "You are given an integer array nums. We call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers.",
        "exampleInputs1": "nums = [1,2,3,4]",
        "exampleOutputs1": "6",
        "exampleInputs2": "nums = [4,2,3,15]",
        "exampleOutputs2": "5"
    },
    {
        "id": 1994,
        "title": "1994. The Number of Good Subsets",
        "description": "You are given an integer array nums, and you can perform the following operation any number of times on nums:",
        "exampleInputs1": "nums = [7,21,3]",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [5,2,6,2]",
        "exampleOutputs2": "false",
        "exampleInputs3": "nums = [10,5,9,3,15]",
        "exampleOutputs3": "true"
    },
    {
        "id": 1998,
        "title": "1998. GCD Sort of an Array",
        "description": "There is a family tree rooted at 0 consisting of n nodes numbered 0 to n - 1. You are given a 0-indexed integer array parents, where parents[i] is the parent for node i. Since node 0 is the root, parents[0] == -1.",
        "exampleInputs1": "parents = [-1,0,0,2], nums = [1,2,3,4]",
        "exampleOutputs1": "[5,1,1,1]",
        "exampleInputs2": "parents = [-1,0,1,0,3,3], nums = [5,4,6,2,1,3]",
        "exampleOutputs2": "[7,1,1,4,2,1]",
        "exampleInputs3": "parents = [-1,2,3,0,2,4,1], nums = [2,3,4,5,6,7,8]",
        "exampleOutputs3": "[1,1,1,1,1,1,1]"
    },
    {
        "id": 2003,
        "title": "2003. Smallest Missing Genetic Value in Each Subtree",
        "description": "You wrote down many positive integers in a string called num. However, you realized that you forgot to add commas to seperate the different numbers. You remember that the list of integers was non-decreasing and that no integer had leading zeros.",
        "exampleInputs1": "num = \"327\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "num = \"094\"",
        "exampleOutputs2": "0",
        "exampleInputs3": "num = \"0\"",
        "exampleOutputs3": "0",
        "exampleInputs4": "num = \"9999999999999\"",
        "exampleOutputs4": "101"
    },
    {
        "id": 1977,
        "title": "1977. Number of Ways to Separate Numbers",
        "description": "You are given an integer n representing the length of an unknown array that you are trying to recover. You are also given an array sums containing the values of all 2n subset sums of the unknown array (in no particular order).",
        "exampleInputs1": "n = 3, sums = [-3,-2,-1,0,0,1,2,3]",
        "exampleOutputs1": "[1,2,-3]",
        "exampleInputs2": "n = 2, sums = [0,0,0,0]",
        "exampleOutputs2": "[0,0]",
        "exampleInputs3": "n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]",
        "exampleOutputs3": "[0,-1,4,5]"
    },
    {
        "id": 1982,
        "title": "1982. Find Array Given Subset Sums",
        "description": "You are given a binary string binary. A subsequence of binary is considered good if it is not empty and has no leading zeros (with the exception of \"0\").",
        "exampleInputs1": "binary = \"001\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "binary = \"11\"",
        "exampleOutputs2": "2",
        "exampleInputs3": "binary = \"101\"",
        "exampleOutputs3": "5"
    },
    {
        "id": 1987,
        "title": "1987. Number of Unique Good Subsequences",
        "description": "You are given an integer array nums. We call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers.",
        "exampleInputs1": "nums = [1,2,3,4]",
        "exampleOutputs1": "6",
        "exampleInputs2": "nums = [4,2,3,15]",
        "exampleOutputs2": "5"
    },
    {
        "id": 1994,
        "title": "1994. The Number of Good Subsets",
        "description": "You are given an integer array nums, and you can perform the following operation any number of times on nums:",
        "exampleInputs1": "nums = [7,21,3]",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [5,2,6,2]",
        "exampleOutputs2": "false",
        "exampleInputs3": "nums = [10,5,9,3,15]",
        "exampleOutputs3": "true"
    },
    {
        "id": 1998,
        "title": "1998. GCD Sort of an Array",
        "description": "There is a family tree rooted at 0 consisting of n nodes numbered 0 to n - 1. You are given a 0-indexed integer array parents, where parents[i] is the parent for node i. Since node 0 is the root, parents[0] == -1.",
        "exampleInputs1": "parents = [-1,0,0,2], nums = [1,2,3,4]",
        "exampleOutputs1": "[5,1,1,1]",
        "exampleInputs2": "parents = [-1,0,1,0,3,3], nums = [5,4,6,2,1,3]",
        "exampleOutputs2": "[7,1,1,4,2,1]",
        "exampleInputs3": "parents = [-1,2,3,0,2,4,1], nums = [2,3,4,5,6,7,8]",
        "exampleOutputs3": "[1,1,1,1,1,1,1]"
    },
    {
        "id": 2003,
        "title": "2003. Smallest Missing Genetic Value in Each Subtree",
        "description": "You are given an integer array nums. In one operation, you can replace any element in nums with any integer.",
        "exampleInputs1": "nums = [4,2,5,3]",
        "exampleOutputs1": "0",
        "exampleInputs2": "nums = [1,2,3,5,6]",
        "exampleOutputs2": "1",
        "exampleInputs3": "nums = [1,10,100,1000]",
        "exampleOutputs3": "3"
    },
    {
        "id": 2009,
        "title": "2009. Minimum Number of Operations to Make Array Continuous",
        "description": "You are given a string s of length n, and an integer k. You are tasked to find the longest subsequence repeated k times in string s.",
        "exampleInputs1": "s = \"letsleetcode\", k = 2",
        "exampleOutputs1": "\"let\"",
        "exampleInputs2": "s = \"bb\", k = 2",
        "exampleOutputs2": "\"b\"",
        "exampleInputs3": "s = \"ab\", k = 2",
        "exampleOutputs3": "\"\"",
        "exampleInputs4": "s = \"bbabbabbbbabaababab\", k = 3",
        "exampleOutputs4": "\"bbbb\""
    },
    {
        "id": 2014,
        "title": "2014. Longest Subsequence Repeated k Times",
        "description": "There is a family tree rooted at 0 consisting of n nodes numbered 0 to n - 1. You are given a 0-indexed integer array parents, where parents[i] is the parent for node i. Since node 0 is the root, parents[0] == -1.",
        "exampleInputs1": "parents = [-1,0,0,2], nums = [1,2,3,4]",
        "exampleOutputs1": "[5,1,1,1]",
        "exampleInputs2": "parents = [-1,0,1,0,3,3], nums = [5,4,6,2,1,3]",
        "exampleOutputs2": "[7,1,1,4,2,1]",
        "exampleInputs3": "parents = [-1,2,3,0,2,4,1], nums = [2,3,4,5,6,7,8]",
        "exampleOutputs3": "[1,1,1,1,1,1,1]"
    },
    {
        "id": 2003,
        "title": "2003. Smallest Missing Genetic Value in Each Subtree",
        "description": "You are given an integer array nums. In one operation, you can replace any element in nums with any integer.",
        "exampleInputs1": "nums = [4,2,5,3]",
        "exampleOutputs1": "0",
        "exampleInputs2": "nums = [1,2,3,5,6]",
        "exampleOutputs2": "1",
        "exampleInputs3": "nums = [1,10,100,1000]",
        "exampleOutputs3": "3"
    },
    {
        "id": 2009,
        "title": "2009. Minimum Number of Operations to Make Array Continuous",
        "description": "You are given a string s of length n, and an integer k. You are tasked to find the longest subsequence repeated k times in string s.",
        "exampleInputs1": "s = \"letsleetcode\", k = 2",
        "exampleOutputs1": "\"let\"",
        "exampleInputs2": "s = \"bb\", k = 2",
        "exampleOutputs2": "\"b\"",
        "exampleInputs3": "s = \"ab\", k = 2",
        "exampleOutputs3": "\"\"",
        "exampleInputs4": "s = \"bbabbabbbbabaababab\", k = 3",
        "exampleOutputs4": "\"bbbb\""
    },
    {
        "id": 2014,
        "title": "2014. Longest Subsequence Repeated k Times",
        "description": "You are given a string s that contains digits 0-9, addition symbols '+', and multiplication symbols '*' only, representing a valid math expression of single digit numbers (e.g., 3+5*2). This expression was given to n elementary school students. The students were instructed to get the answer of the expression by following this order of operations:",
        "exampleInputs1": "s = \"7+3*1*2\", answers = [20,13,42]",
        "exampleOutputs1": "7",
        "exampleInputs2": "s = \"3+5*2\", answers = [13,0,10,13,13,16,16]",
        "exampleOutputs2": "19",
        "exampleInputs3": "s = \"6+0*1\", answers = [12,9,6,4,8,6]",
        "exampleOutputs3": "10",
        "exampleInputs4": "s = \"1+2*3+4\", answers = [13,21,11,15]",
        "exampleOutputs4": "11"
    },
    {
        "id": 2019,
        "title": "2019. The Score of Students Solving Math Expression",
        "description": "You are given an integer array nums. We call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers.",
        "exampleInputs1": "nums = [1,2,3,4]",
        "exampleOutputs1": "6",
        "exampleInputs2": "nums = [4,2,3,15]",
        "exampleOutputs2": "5"
    },
    {
        "id": 1994,
        "title": "1994. The Number of Good Subsets",
        "description": "You are given an integer array nums, and you can perform the following operation any number of times on nums:",
        "exampleInputs1": "nums = [7,21,3]",
        "exampleOutputs1": "true",
        "exampleInputs2": "nums = [5,2,6,2]",
        "exampleOutputs2": "false",
        "exampleInputs3": "nums = [10,5,9,3,15]",
        "exampleOutputs3": "true"
    },
    {
        "id": 1998,
        "title": "1998. GCD Sort of an Array",
        "description": "There is a family tree rooted at 0 consisting of n nodes numbered 0 to n - 1. You are given a 0-indexed integer array parents, where parents[i] is the parent for node i. Since node 0 is the root, parents[0] == -1.",
        "exampleInputs1": "parents = [-1,0,0,2], nums = [1,2,3,4]",
        "exampleOutputs1": "[5,1,1,1]",
        "exampleInputs2": "parents = [-1,0,1,0,3,3], nums = [5,4,6,2,1,3]",
        "exampleOutputs2": "[7,1,1,4,2,1]",
        "exampleInputs3": "parents = [-1,2,3,0,2,4,1], nums = [2,3,4,5,6,7,8]",
        "exampleOutputs3": "[1,1,1,1,1,1,1]"
    },
    {
        "id": 2003,
        "title": "2003. Smallest Missing Genetic Value in Each Subtree",
        "description": "You are given an integer array nums. In one operation, you can replace any element in nums with any integer.",
        "exampleInputs1": "nums = [4,2,5,3]",
        "exampleOutputs1": "0",
        "exampleInputs2": "nums = [1,2,3,5,6]",
        "exampleOutputs2": "1",
        "exampleInputs3": "nums = [1,10,100,1000]",
        "exampleOutputs3": "3"
    },
    {
        "id": 2009,
        "title": "2009. Minimum Number of Operations to Make Array Continuous",
        "description": "You are given a string s of length n, and an integer k. You are tasked to find the longest subsequence repeated k times in string s.",
        "exampleInputs1": "s = \"letsleetcode\", k = 2",
        "exampleOutputs1": "\"let\"",
        "exampleInputs2": "s = \"bb\", k = 2",
        "exampleOutputs2": "\"b\"",
        "exampleInputs3": "s = \"ab\", k = 2",
        "exampleOutputs3": "\"\"",
        "exampleInputs4": "s = \"bbabbabbbbabaababab\", k = 3",
        "exampleOutputs4": "\"bbbb\""
    },
    {
        "id": 2014,
        "title": "2014. Longest Subsequence Repeated k Times",
        "description": "You are given a string s that contains digits 0-9, addition symbols '+', and multiplication symbols '*' only, representing a valid math expression of single digit numbers (e.g., 3+5*2). This expression was given to n elementary school students. The students were instructed to get the answer of the expression by following this order of operations:",
        "exampleInputs1": "s = \"7+3*1*2\", answers = [20,13,42]",
        "exampleOutputs1": "7",
        "exampleInputs2": "s = \"3+5*2\", answers = [13,0,10,13,13,16,16]",
        "exampleOutputs2": "19",
        "exampleInputs3": "s = \"6+0*1\", answers = [12,9,6,4,8,6]",
        "exampleOutputs3": "10",
        "exampleInputs4": "s = \"1+2*3+4\", answers = [13,21,11,15]",
        "exampleOutputs4": "11"
    },
    {
        "id": 2019,
        "title": "2019. The Score of Students Solving Math Expression",
        "description": "You are given a 0-indexed integer array nums of length n. The number of ways to partition nums is the number of pivot indices that satisfy both conditions:",
        "exampleInputs1": "nums = [2,-1,2], k = 3",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [0,0,0], k = 1",
        "exampleOutputs2": "2",
        "exampleInputs3": "nums = [22,4,-25,-20,-15,15,-16,7,19,-10,0,-13,-14], k = -33",
        "exampleOutputs3": "4"
    },
    {
        "id": 2025,
        "title": "2025. Maximum Number of Ways to Partition an Array",
        "description": "You are given a string s, an integer k, a letter letter, and an integer repetition.",
        "exampleInputs1": "s = \"leet\", k = 3, letter = \"e\", repetition = 1",
        "exampleOutputs1": "\"eet\"",
        "exampleInputs2": "s = \"leetcode\", k = 4, letter = \"e\", repetition = 2",
        "exampleOutputs2": "\"ecde\"",
        "exampleInputs3": "s = \"bb\", k = 2, letter = \"b\", repetition = 2",
        "exampleOutputs3": "\"bb\""
    },
    {
        "id": 2030,
        "title": "2030. Smallest K-Length Subsequence With Occurrences of a Letter",
        "description": "You are given a string s that contains digits 0-9, addition symbols '+', and multiplication symbols '*' only, representing a valid math expression of single digit numbers (e.g., 3+5*2). This expression was given to n elementary school students. The students were instructed to get the answer of the expression by following this order of operations:",
        "exampleInputs1": "s = \"7+3*1*2\", answers = [20,13,42]",
        "exampleOutputs1": "7",
        "exampleInputs2": "s = \"3+5*2\", answers = [13,0,10,13,13,16,16]",
        "exampleOutputs2": "19",
        "exampleInputs3": "s = \"6+0*1\", answers = [12,9,6,4,8,6]",
        "exampleOutputs3": "10",
        "exampleInputs4": "s = \"1+2*3+4\", answers = [13,21,11,15]",
        "exampleOutputs4": "11"
    },
    {
        "id": 2019,
        "title": "2019. The Score of Students Solving Math Expression",
        "description": "You are given a 0-indexed integer array nums of length n. The number of ways to partition nums is the number of pivot indices that satisfy both conditions:",
        "exampleInputs1": "nums = [2,-1,2], k = 3",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [0,0,0], k = 1",
        "exampleOutputs2": "2",
        "exampleInputs3": "nums = [22,4,-25,-20,-15,15,-16,7,19,-10,0,-13,-14], k = -33",
        "exampleOutputs3": "4"
    },
    {
        "id": 2025,
        "title": "2025. Maximum Number of Ways to Partition an Array",
        "description": "You are given a string s, an integer k, a letter letter, and an integer repetition.",
        "exampleInputs1": "s = \"leet\", k = 3, letter = \"e\", repetition = 1",
        "exampleOutputs1": "\"eet\"",
        "exampleInputs2": "s = \"leetcode\", k = 4, letter = \"e\", repetition = 2",
        "exampleOutputs2": "\"ecde\"",
        "exampleInputs3": "s = \"bb\", k = 2, letter = \"b\", repetition = 2",
        "exampleOutputs3": "\"bb\""
    },
    {
        "id": 2030,
        "title": "2030. Smallest K-Length Subsequence With Occurrences of a Letter",
        "description": "You are given an integer array nums of 2 * n integers. You need to partition nums into two arrays of length n to minimize the absolute difference of the sums of the arrays. To partition nums, put each element of nums into one of the two arrays.",
        "exampleInputs1": "nums = [3,9,7,3]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [-36,36]",
        "exampleOutputs2": "72",
        "exampleInputs3": "nums = [2,-1,0,4,-2,-9]",
        "exampleOutputs3": "0"
    },
    {
        "id": 2035,
        "title": "2035. Partition Array Into Two Arrays to Minimize Sum Difference",
        "description": "You are given an integer array nums. In one operation, you can replace any element in nums with any integer.",
        "exampleInputs1": "nums = [4,2,5,3]",
        "exampleOutputs1": "0",
        "exampleInputs2": "nums = [1,2,3,5,6]",
        "exampleOutputs2": "1",
        "exampleInputs3": "nums = [1,10,100,1000]",
        "exampleOutputs3": "3"
    },
    {
        "id": 2009,
        "title": "2009. Minimum Number of Operations to Make Array Continuous",
        "description": "You are given a string s of length n, and an integer k. You are tasked to find the longest subsequence repeated k times in string s.",
        "exampleInputs1": "s = \"letsleetcode\", k = 2",
        "exampleOutputs1": "\"let\"",
        "exampleInputs2": "s = \"bb\", k = 2",
        "exampleOutputs2": "\"b\"",
        "exampleInputs3": "s = \"ab\", k = 2",
        "exampleOutputs3": "\"\"",
        "exampleInputs4": "s = \"bbabbabbbbabaababab\", k = 3",
        "exampleOutputs4": "\"bbbb\""
    },
    {
        "id": 2014,
        "title": "2014. Longest Subsequence Repeated k Times",
        "description": "You are given a string s that contains digits 0-9, addition symbols '+', and multiplication symbols '*' only, representing a valid math expression of single digit numbers (e.g., 3+5*2). This expression was given to n elementary school students. The students were instructed to get the answer of the expression by following this order of operations:",
        "exampleInputs1": "s = \"7+3*1*2\", answers = [20,13,42]",
        "exampleOutputs1": "7",
        "exampleInputs2": "s = \"3+5*2\", answers = [13,0,10,13,13,16,16]",
        "exampleOutputs2": "19",
        "exampleInputs3": "s = \"6+0*1\", answers = [12,9,6,4,8,6]",
        "exampleOutputs3": "10",
        "exampleInputs4": "s = \"1+2*3+4\", answers = [13,21,11,15]",
        "exampleOutputs4": "11"
    },
    {
        "id": 2019,
        "title": "2019. The Score of Students Solving Math Expression",
        "description": "You are given a 0-indexed integer array nums of length n. The number of ways to partition nums is the number of pivot indices that satisfy both conditions:",
        "exampleInputs1": "nums = [2,-1,2], k = 3",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [0,0,0], k = 1",
        "exampleOutputs2": "2",
        "exampleInputs3": "nums = [22,4,-25,-20,-15,15,-16,7,19,-10,0,-13,-14], k = -33",
        "exampleOutputs3": "4"
    },
    {
        "id": 2025,
        "title": "2025. Maximum Number of Ways to Partition an Array",
        "description": "You are given a string s, an integer k, a letter letter, and an integer repetition.",
        "exampleInputs1": "s = \"leet\", k = 3, letter = \"e\", repetition = 1",
        "exampleOutputs1": "\"eet\"",
        "exampleInputs2": "s = \"leetcode\", k = 4, letter = \"e\", repetition = 2",
        "exampleOutputs2": "\"ecde\"",
        "exampleInputs3": "s = \"bb\", k = 2, letter = \"b\", repetition = 2",
        "exampleOutputs3": "\"bb\""
    },
    {
        "id": 2030,
        "title": "2030. Smallest K-Length Subsequence With Occurrences of a Letter",
        "description": "You are given an integer array nums of 2 * n integers. You need to partition nums into two arrays of length n to minimize the absolute difference of the sums of the arrays. To partition nums, put each element of nums into one of the two arrays.",
        "exampleInputs1": "nums = [3,9,7,3]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [-36,36]",
        "exampleOutputs2": "72",
        "exampleInputs3": "nums = [2,-1,0,4,-2,-9]",
        "exampleOutputs3": "0"
    },
    {
        "id": 2035,
        "title": "2035. Partition Array Into Two Arrays to Minimize Sum Difference",
        "description": "",
        "exampleInputs1": "nums1 = [2,5], nums2 = [3,4], k = 2",
        "exampleOutputs1": "8",
        "exampleInputs2": "nums1 = [-4,-2,0,3], nums2 = [2,4], k = 6",
        "exampleOutputs2": "0",
        "exampleInputs3": "nums1 = [-2,-1,0,1,2], nums2 = [-3,-1,2,4,5], k = 3",
        "exampleOutputs3": "-6"
    },
    {
        "id": 2040,
        "title": "2040. Kth Smallest Product of Two Sorted Arrays",
        "description": "A city is represented as a bi-directional connected graph with n vertices where each vertex is labeled from 1 to n (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself. The time taken to traverse any edge is time minutes.",
        "exampleInputs1": "n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]], time = 3, change = 5",
        "exampleOutputs1": "13",
        "exampleInputs2": "n = 2, edges = [[1,2]], time = 3, change = 2",
        "exampleOutputs2": "11"
    },
    {
        "id": 2045,
        "title": "2045. Second Minimum Time to Reach Destination",
        "description": "You are given an integer array nums of 2 * n integers. You need to partition nums into two arrays of length n to minimize the absolute difference of the sums of the arrays. To partition nums, put each element of nums into one of the two arrays.",
        "exampleInputs1": "nums = [3,9,7,3]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [-36,36]",
        "exampleOutputs2": "72",
        "exampleInputs3": "nums = [2,-1,0,4,-2,-9]",
        "exampleOutputs3": "0"
    },
    {
        "id": 2035,
        "title": "2035. Partition Array Into Two Arrays to Minimize Sum Difference",
        "description": "",
        "exampleInputs1": "nums1 = [2,5], nums2 = [3,4], k = 2",
        "exampleOutputs1": "8",
        "exampleInputs2": "nums1 = [-4,-2,0,3], nums2 = [2,4], k = 6",
        "exampleOutputs2": "0",
        "exampleInputs3": "nums1 = [-2,-1,0,1,2], nums2 = [-3,-1,2,4,5], k = 3",
        "exampleOutputs3": "-6"
    },
    {
        "id": 2040,
        "title": "2040. Kth Smallest Product of Two Sorted Arrays",
        "description": "A city is represented as a bi-directional connected graph with n vertices where each vertex is labeled from 1 to n (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself. The time taken to traverse any edge is time minutes.",
        "exampleInputs1": "n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]], time = 3, change = 5",
        "exampleOutputs1": "13",
        "exampleInputs2": "n = 2, edges = [[1,2]], time = 3, change = 2",
        "exampleOutputs2": "11"
    },
    {
        "id": 2045,
        "title": "2045. Second Minimum Time to Reach Destination",
        "description": "You are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given a 2D integer array relations where relations[j] = [prevCoursej, nextCoursej] denotes that course prevCoursej has to be completed before course nextCoursej (prerequisite relationship). Furthermore, you are given a 0-indexed integer array time where time[i] denotes how many months it takes to complete the (i+1)th course.",
        "exampleInputs1": "n = 3, relations = [[1,3],[2,3]], time = [3,2,5]",
        "exampleOutputs1": "8",
        "exampleInputs2": "n = 5, relations = [[1,5],[2,5],[3,5],[3,4],[4,5]], time = [1,2,3,4,5]",
        "exampleOutputs2": "12"
    },
    {
        "id": 2050,
        "title": "2050. Parallel Courses III",
        "description": "You are given a 0-indexed integer array nums of length n. The number of ways to partition nums is the number of pivot indices that satisfy both conditions:",
        "exampleInputs1": "nums = [2,-1,2], k = 3",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums = [0,0,0], k = 1",
        "exampleOutputs2": "2",
        "exampleInputs3": "nums = [22,4,-25,-20,-15,15,-16,7,19,-10,0,-13,-14], k = -33",
        "exampleOutputs3": "4"
    },
    {
        "id": 2025,
        "title": "2025. Maximum Number of Ways to Partition an Array",
        "description": "You are given a string s, an integer k, a letter letter, and an integer repetition.",
        "exampleInputs1": "s = \"leet\", k = 3, letter = \"e\", repetition = 1",
        "exampleOutputs1": "\"eet\"",
        "exampleInputs2": "s = \"leetcode\", k = 4, letter = \"e\", repetition = 2",
        "exampleOutputs2": "\"ecde\"",
        "exampleInputs3": "s = \"bb\", k = 2, letter = \"b\", repetition = 2",
        "exampleOutputs3": "\"bb\""
    },
    {
        "id": 2030,
        "title": "2030. Smallest K-Length Subsequence With Occurrences of a Letter",
        "description": "You are given an integer array nums of 2 * n integers. You need to partition nums into two arrays of length n to minimize the absolute difference of the sums of the arrays. To partition nums, put each element of nums into one of the two arrays.",
        "exampleInputs1": "nums = [3,9,7,3]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [-36,36]",
        "exampleOutputs2": "72",
        "exampleInputs3": "nums = [2,-1,0,4,-2,-9]",
        "exampleOutputs3": "0"
    },
    {
        "id": 2035,
        "title": "2035. Partition Array Into Two Arrays to Minimize Sum Difference",
        "description": "",
        "exampleInputs1": "nums1 = [2,5], nums2 = [3,4], k = 2",
        "exampleOutputs1": "8",
        "exampleInputs2": "nums1 = [-4,-2,0,3], nums2 = [2,4], k = 6",
        "exampleOutputs2": "0",
        "exampleInputs3": "nums1 = [-2,-1,0,1,2], nums2 = [-3,-1,2,4,5], k = 3",
        "exampleOutputs3": "-6"
    },
    {
        "id": 2040,
        "title": "2040. Kth Smallest Product of Two Sorted Arrays",
        "description": "A city is represented as a bi-directional connected graph with n vertices where each vertex is labeled from 1 to n (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself. The time taken to traverse any edge is time minutes.",
        "exampleInputs1": "n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]], time = 3, change = 5",
        "exampleOutputs1": "13",
        "exampleInputs2": "n = 2, edges = [[1,2]], time = 3, change = 2",
        "exampleOutputs2": "11"
    },
    {
        "id": 2045,
        "title": "2045. Second Minimum Time to Reach Destination",
        "description": "You are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given a 2D integer array relations where relations[j] = [prevCoursej, nextCoursej] denotes that course prevCoursej has to be completed before course nextCoursej (prerequisite relationship). Furthermore, you are given a 0-indexed integer array time where time[i] denotes how many months it takes to complete the (i+1)th course.",
        "exampleInputs1": "n = 3, relations = [[1,3],[2,3]], time = [3,2,5]",
        "exampleOutputs1": "8",
        "exampleInputs2": "n = 5, relations = [[1,5],[2,5],[3,5],[3,4],[4,5]], time = [1,2,3,4,5]",
        "exampleOutputs2": "12"
    },
    {
        "id": 2050,
        "title": "2050. Parallel Courses III",
        "description": "There is an 8 x 8 chessboard containing n pieces (rooks, queens, or bishops). You are given a string array pieces of length n, where pieces[i] describes the type (rook, queen, or bishop) of the ith piece. In addition, you are given a 2D integer array positions also of length n, where positions[i] = [ri, ci] indicates that the ith piece is currently at the 1-based coordinate (ri, ci) on the chessboard.",
        "exampleInputs1": "pieces = [\"rook\"], positions = [[1,1]]",
        "exampleOutputs1": "15",
        "exampleInputs2": "pieces = [\"queen\"], positions = [[1,1]]",
        "exampleOutputs2": "22",
        "exampleInputs3": "pieces = [\"bishop\"], positions = [[4,3]]",
        "exampleOutputs3": "12",
        "exampleInputs4": "pieces = [\"rook\",\"rook\"], positions = [[1,1],[8,8]]",
        "exampleOutputs4": "223",
        "exampleInputs5": "pieces = [\"queen\",\"bishop\"], positions = [[5,7],[3,4]]",
        "exampleOutputs5": "281"
    },
    {
        "id": 2056,
        "title": "2056. Number of Valid Move Combinations On Chessboard",
        "description": "An original string, consisting of lowercase English letters, can be encoded by the following steps:",
        "exampleInputs1": "s1 = \"internationalization\", s2 = \"i18n\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s1 = \"l123e\", s2 = \"44\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "s1 = \"a5b\", s2 = \"c5b\"",
        "exampleOutputs3": "false",
        "exampleInputs4": "s1 = \"112s\", s2 = \"g841\"",
        "exampleOutputs4": "true",
        "exampleInputs5": "s1 = \"ab\", s2 = \"a2\"",
        "exampleOutputs5": "false"
    },
    {
        "id": 2060,
        "title": "2060. Check if an Original String Exists Given Two Encoded Strings",
        "description": "You are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given a 2D integer array relations where relations[j] = [prevCoursej, nextCoursej] denotes that course prevCoursej has to be completed before course nextCoursej (prerequisite relationship). Furthermore, you are given a 0-indexed integer array time where time[i] denotes how many months it takes to complete the (i+1)th course.",
        "exampleInputs1": "n = 3, relations = [[1,3],[2,3]], time = [3,2,5]",
        "exampleOutputs1": "8",
        "exampleInputs2": "n = 5, relations = [[1,5],[2,5],[3,5],[3,4],[4,5]], time = [1,2,3,4,5]",
        "exampleOutputs2": "12"
    },
    {
        "id": 2050,
        "title": "2050. Parallel Courses III",
        "description": "There is an 8 x 8 chessboard containing n pieces (rooks, queens, or bishops). You are given a string array pieces of length n, where pieces[i] describes the type (rook, queen, or bishop) of the ith piece. In addition, you are given a 2D integer array positions also of length n, where positions[i] = [ri, ci] indicates that the ith piece is currently at the 1-based coordinate (ri, ci) on the chessboard.",
        "exampleInputs1": "pieces = [\"rook\"], positions = [[1,1]]",
        "exampleOutputs1": "15",
        "exampleInputs2": "pieces = [\"queen\"], positions = [[1,1]]",
        "exampleOutputs2": "22",
        "exampleInputs3": "pieces = [\"bishop\"], positions = [[4,3]]",
        "exampleOutputs3": "12",
        "exampleInputs4": "pieces = [\"rook\",\"rook\"], positions = [[1,1],[8,8]]",
        "exampleOutputs4": "223",
        "exampleInputs5": "pieces = [\"queen\",\"bishop\"], positions = [[5,7],[3,4]]",
        "exampleOutputs5": "281"
    },
    {
        "id": 2056,
        "title": "2056. Number of Valid Move Combinations On Chessboard",
        "description": "An original string, consisting of lowercase English letters, can be encoded by the following steps:",
        "exampleInputs1": "s1 = \"internationalization\", s2 = \"i18n\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s1 = \"l123e\", s2 = \"44\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "s1 = \"a5b\", s2 = \"c5b\"",
        "exampleOutputs3": "false",
        "exampleInputs4": "s1 = \"112s\", s2 = \"g841\"",
        "exampleOutputs4": "true",
        "exampleInputs5": "s1 = \"ab\", s2 = \"a2\"",
        "exampleOutputs5": "false"
    },
    {
        "id": 2060,
        "title": "2060. Check if an Original String Exists Given Two Encoded Strings",
        "description": "There is an undirected graph with n nodes numbered from 0 to n - 1 (inclusive). You are given a 0-indexed integer array values where values[i] is the value of the ith node. You are also given a 0-indexed 2D integer array edges, where each edges[j] = [uj, vj, timej] indicates that there is an undirected edge between the nodes uj and vj, and it takes timej seconds to travel between the two nodes. Finally, you are given an integer maxTime.",
        "exampleInputs1": "values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49",
        "exampleOutputs1": "75",
        "exampleInputs2": "values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30",
        "exampleOutputs2": "25",
        "exampleInputs3": "values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50",
        "exampleOutputs3": "7",
        "exampleInputs4": "values = [0,1,2], edges = [[1,2,10]], maxTime = 10",
        "exampleOutputs4": "0"
    },
    {
        "id": 2065,
        "title": "2065. Maximum Path Quality of a Graph",
        "description": "",
        "exampleInputs1": "nums1 = [2,5], nums2 = [3,4], k = 2",
        "exampleOutputs1": "8",
        "exampleInputs2": "nums1 = [-4,-2,0,3], nums2 = [2,4], k = 6",
        "exampleOutputs2": "0",
        "exampleInputs3": "nums1 = [-2,-1,0,1,2], nums2 = [-3,-1,2,4,5], k = 3",
        "exampleOutputs3": "-6"
    },
    {
        "id": 2040,
        "title": "2040. Kth Smallest Product of Two Sorted Arrays",
        "description": "A city is represented as a bi-directional connected graph with n vertices where each vertex is labeled from 1 to n (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself. The time taken to traverse any edge is time minutes.",
        "exampleInputs1": "n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]], time = 3, change = 5",
        "exampleOutputs1": "13",
        "exampleInputs2": "n = 2, edges = [[1,2]], time = 3, change = 2",
        "exampleOutputs2": "11"
    },
    {
        "id": 2045,
        "title": "2045. Second Minimum Time to Reach Destination",
        "description": "You are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given a 2D integer array relations where relations[j] = [prevCoursej, nextCoursej] denotes that course prevCoursej has to be completed before course nextCoursej (prerequisite relationship). Furthermore, you are given a 0-indexed integer array time where time[i] denotes how many months it takes to complete the (i+1)th course.",
        "exampleInputs1": "n = 3, relations = [[1,3],[2,3]], time = [3,2,5]",
        "exampleOutputs1": "8",
        "exampleInputs2": "n = 5, relations = [[1,5],[2,5],[3,5],[3,4],[4,5]], time = [1,2,3,4,5]",
        "exampleOutputs2": "12"
    },
    {
        "id": 2050,
        "title": "2050. Parallel Courses III",
        "description": "There is an 8 x 8 chessboard containing n pieces (rooks, queens, or bishops). You are given a string array pieces of length n, where pieces[i] describes the type (rook, queen, or bishop) of the ith piece. In addition, you are given a 2D integer array positions also of length n, where positions[i] = [ri, ci] indicates that the ith piece is currently at the 1-based coordinate (ri, ci) on the chessboard.",
        "exampleInputs1": "pieces = [\"rook\"], positions = [[1,1]]",
        "exampleOutputs1": "15",
        "exampleInputs2": "pieces = [\"queen\"], positions = [[1,1]]",
        "exampleOutputs2": "22",
        "exampleInputs3": "pieces = [\"bishop\"], positions = [[4,3]]",
        "exampleOutputs3": "12",
        "exampleInputs4": "pieces = [\"rook\",\"rook\"], positions = [[1,1],[8,8]]",
        "exampleOutputs4": "223",
        "exampleInputs5": "pieces = [\"queen\",\"bishop\"], positions = [[5,7],[3,4]]",
        "exampleOutputs5": "281"
    },
    {
        "id": 2056,
        "title": "2056. Number of Valid Move Combinations On Chessboard",
        "description": "An original string, consisting of lowercase English letters, can be encoded by the following steps:",
        "exampleInputs1": "s1 = \"internationalization\", s2 = \"i18n\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s1 = \"l123e\", s2 = \"44\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "s1 = \"a5b\", s2 = \"c5b\"",
        "exampleOutputs3": "false",
        "exampleInputs4": "s1 = \"112s\", s2 = \"g841\"",
        "exampleOutputs4": "true",
        "exampleInputs5": "s1 = \"ab\", s2 = \"a2\"",
        "exampleOutputs5": "false"
    },
    {
        "id": 2060,
        "title": "2060. Check if an Original String Exists Given Two Encoded Strings",
        "description": "There is an undirected graph with n nodes numbered from 0 to n - 1 (inclusive). You are given a 0-indexed integer array values where values[i] is the value of the ith node. You are also given a 0-indexed 2D integer array edges, where each edges[j] = [uj, vj, timej] indicates that there is an undirected edge between the nodes uj and vj, and it takes timej seconds to travel between the two nodes. Finally, you are given an integer maxTime.",
        "exampleInputs1": "values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49",
        "exampleOutputs1": "75",
        "exampleInputs2": "values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30",
        "exampleOutputs2": "25",
        "exampleInputs3": "values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50",
        "exampleOutputs3": "7",
        "exampleInputs4": "values = [0,1,2], edges = [[1,2,10]], maxTime = 10",
        "exampleOutputs4": "0"
    },
    {
        "id": 2065,
        "title": "2065. Maximum Path Quality of a Graph",
        "description": "You have n tasks and m workers. Each task has a strength requirement stored in a 0-indexed integer array tasks, with the ith task requiring tasks[i] strength to complete. The strength of each worker is stored in a 0-indexed integer array workers, with the jth worker having workers[j] strength. Each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., workers[j] >= tasks[i]).",
        "exampleInputs1": "tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1",
        "exampleOutputs1": "3",
        "exampleInputs2": "tasks = [5,4], workers = [0,0,0], pills = 1, strength = 5",
        "exampleOutputs2": "1",
        "exampleInputs3": "tasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10",
        "exampleOutputs3": "2",
        "exampleInputs4": "tasks = [5,9,8,5,9], workers = [1,6,4,2,6], pills = 1, strength = 5",
        "exampleOutputs4": "3"
    },
    {
        "id": 2071,
        "title": "2071. Maximum Number of Tasks You Can Assign",
        "description": "You are given an integer n indicating the number of people in a network. Each person is labeled from 0 to n - 1.",
        "exampleInputs1": "n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]]",
        "exampleOutputs1": "[true,false]",
        "exampleInputs2": "n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]]",
        "exampleOutputs2": "[true,false]",
        "exampleInputs3": "n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]]",
        "exampleOutputs3": "[true,false,true,false]"
    },
    {
        "id": 2076,
        "title": "2076. Process Restricted Friend Requests",
        "description": "There is an undirected graph with n nodes numbered from 0 to n - 1 (inclusive). You are given a 0-indexed integer array values where values[i] is the value of the ith node. You are also given a 0-indexed 2D integer array edges, where each edges[j] = [uj, vj, timej] indicates that there is an undirected edge between the nodes uj and vj, and it takes timej seconds to travel between the two nodes. Finally, you are given an integer maxTime.",
        "exampleInputs1": "values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49",
        "exampleOutputs1": "75",
        "exampleInputs2": "values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30",
        "exampleOutputs2": "25",
        "exampleInputs3": "values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50",
        "exampleOutputs3": "7",
        "exampleInputs4": "values = [0,1,2], edges = [[1,2,10]], maxTime = 10",
        "exampleOutputs4": "0"
    },
    {
        "id": 2065,
        "title": "2065. Maximum Path Quality of a Graph",
        "description": "You have n tasks and m workers. Each task has a strength requirement stored in a 0-indexed integer array tasks, with the ith task requiring tasks[i] strength to complete. The strength of each worker is stored in a 0-indexed integer array workers, with the jth worker having workers[j] strength. Each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., workers[j] >= tasks[i]).",
        "exampleInputs1": "tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1",
        "exampleOutputs1": "3",
        "exampleInputs2": "tasks = [5,4], workers = [0,0,0], pills = 1, strength = 5",
        "exampleOutputs2": "1",
        "exampleInputs3": "tasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10",
        "exampleOutputs3": "2",
        "exampleInputs4": "tasks = [5,9,8,5,9], workers = [1,6,4,2,6], pills = 1, strength = 5",
        "exampleOutputs4": "3"
    },
    {
        "id": 2071,
        "title": "2071. Maximum Number of Tasks You Can Assign",
        "description": "You are given an integer n indicating the number of people in a network. Each person is labeled from 0 to n - 1.",
        "exampleInputs1": "n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]]",
        "exampleOutputs1": "[true,false]",
        "exampleInputs2": "n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]]",
        "exampleOutputs2": "[true,false]",
        "exampleInputs3": "n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]]",
        "exampleOutputs3": "[true,false,true,false]"
    },
    {
        "id": 2076,
        "title": "2076. Process Restricted Friend Requests",
        "description": "A k-mirror number is a positive integer without leading zeros that reads the same both forward and backward in base-10 as well as in base-k.",
        "exampleInputs1": "k = 2, n = 5",
        "exampleOutputs1": "25",
        "exampleInputs2": "k = 3, n = 7",
        "exampleOutputs2": "499",
        "exampleInputs3": "k = 7, n = 17",
        "exampleOutputs3": "20379000"
    },
    {
        "id": 2081,
        "title": "2081. Sum of k-Mirror Numbers",
        "description": "There is an 8 x 8 chessboard containing n pieces (rooks, queens, or bishops). You are given a string array pieces of length n, where pieces[i] describes the type (rook, queen, or bishop) of the ith piece. In addition, you are given a 2D integer array positions also of length n, where positions[i] = [ri, ci] indicates that the ith piece is currently at the 1-based coordinate (ri, ci) on the chessboard.",
        "exampleInputs1": "pieces = [\"rook\"], positions = [[1,1]]",
        "exampleOutputs1": "15",
        "exampleInputs2": "pieces = [\"queen\"], positions = [[1,1]]",
        "exampleOutputs2": "22",
        "exampleInputs3": "pieces = [\"bishop\"], positions = [[4,3]]",
        "exampleOutputs3": "12",
        "exampleInputs4": "pieces = [\"rook\",\"rook\"], positions = [[1,1],[8,8]]",
        "exampleOutputs4": "223",
        "exampleInputs5": "pieces = [\"queen\",\"bishop\"], positions = [[5,7],[3,4]]",
        "exampleOutputs5": "281"
    },
    {
        "id": 2056,
        "title": "2056. Number of Valid Move Combinations On Chessboard",
        "description": "An original string, consisting of lowercase English letters, can be encoded by the following steps:",
        "exampleInputs1": "s1 = \"internationalization\", s2 = \"i18n\"",
        "exampleOutputs1": "true",
        "exampleInputs2": "s1 = \"l123e\", s2 = \"44\"",
        "exampleOutputs2": "true",
        "exampleInputs3": "s1 = \"a5b\", s2 = \"c5b\"",
        "exampleOutputs3": "false",
        "exampleInputs4": "s1 = \"112s\", s2 = \"g841\"",
        "exampleOutputs4": "true",
        "exampleInputs5": "s1 = \"ab\", s2 = \"a2\"",
        "exampleOutputs5": "false"
    },
    {
        "id": 2060,
        "title": "2060. Check if an Original String Exists Given Two Encoded Strings",
        "description": "There is an undirected graph with n nodes numbered from 0 to n - 1 (inclusive). You are given a 0-indexed integer array values where values[i] is the value of the ith node. You are also given a 0-indexed 2D integer array edges, where each edges[j] = [uj, vj, timej] indicates that there is an undirected edge between the nodes uj and vj, and it takes timej seconds to travel between the two nodes. Finally, you are given an integer maxTime.",
        "exampleInputs1": "values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49",
        "exampleOutputs1": "75",
        "exampleInputs2": "values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30",
        "exampleOutputs2": "25",
        "exampleInputs3": "values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50",
        "exampleOutputs3": "7",
        "exampleInputs4": "values = [0,1,2], edges = [[1,2,10]], maxTime = 10",
        "exampleOutputs4": "0"
    },
    {
        "id": 2065,
        "title": "2065. Maximum Path Quality of a Graph",
        "description": "You have n tasks and m workers. Each task has a strength requirement stored in a 0-indexed integer array tasks, with the ith task requiring tasks[i] strength to complete. The strength of each worker is stored in a 0-indexed integer array workers, with the jth worker having workers[j] strength. Each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., workers[j] >= tasks[i]).",
        "exampleInputs1": "tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1",
        "exampleOutputs1": "3",
        "exampleInputs2": "tasks = [5,4], workers = [0,0,0], pills = 1, strength = 5",
        "exampleOutputs2": "1",
        "exampleInputs3": "tasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10",
        "exampleOutputs3": "2",
        "exampleInputs4": "tasks = [5,9,8,5,9], workers = [1,6,4,2,6], pills = 1, strength = 5",
        "exampleOutputs4": "3"
    },
    {
        "id": 2071,
        "title": "2071. Maximum Number of Tasks You Can Assign",
        "description": "You are given an integer n indicating the number of people in a network. Each person is labeled from 0 to n - 1.",
        "exampleInputs1": "n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]]",
        "exampleOutputs1": "[true,false]",
        "exampleInputs2": "n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]]",
        "exampleOutputs2": "[true,false]",
        "exampleInputs3": "n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]]",
        "exampleOutputs3": "[true,false,true,false]"
    },
    {
        "id": 2076,
        "title": "2076. Process Restricted Friend Requests",
        "description": "A k-mirror number is a positive integer without leading zeros that reads the same both forward and backward in base-10 as well as in base-k.",
        "exampleInputs1": "k = 2, n = 5",
        "exampleOutputs1": "25",
        "exampleInputs2": "k = 3, n = 7",
        "exampleOutputs2": "499",
        "exampleInputs3": "k = 7, n = 17",
        "exampleOutputs3": "20379000"
    },
    {
        "id": 2081,
        "title": "2081. Sum of k-Mirror Numbers",
        "description": "A farmer has a rectangular grid of land with m rows and n columns that can be divided into unit cells. Each cell is either fertile (represented by a 1) or barren (represented by a 0). All cells outside the grid are considered barren.",
        "exampleInputs1": "grid = [[0,1,1,0],[1,1,1,1]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "grid = [[1,1,1],[1,1,1]]",
        "exampleOutputs2": "2",
        "exampleInputs3": "grid = [[1,0,1],[0,0,0],[1,0,1]]",
        "exampleOutputs3": "0",
        "exampleInputs4": "grid = [[1,1,1,1,0],[1,1,1,1,1],[1,1,1,1,1],[0,1,0,0,1]]",
        "exampleOutputs4": "13"
    },
    {
        "id": 2088,
        "title": "2088. Count Fertile Pyramids in a Land",
        "description": "You are given an integer n indicating there are n people numbered from 0 to n - 1. You are also given a 0-indexed 2D integer array meetings where meetings[i] = [xi, yi, timei] indicates that person xi and person yi have a meeting at timei. A person may attend multiple meetings at the same time. Finally, you are given an integer firstPerson.",
        "exampleInputs1": "n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1",
        "exampleOutputs1": "[0,1,2,3,5]",
        "exampleInputs2": "n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3",
        "exampleOutputs2": "[0,1,3]",
        "exampleInputs3": "n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1",
        "exampleOutputs3": "[0,1,2,3,4]",
        "exampleInputs4": "n = 6, meetings = [[0,2,1],[1,3,1],[4,5,1]], firstPerson = 1",
        "exampleOutputs4": "[0,1,2,3]"
    },
    {
        "id": 2092,
        "title": "2092. Find All People With Secret",
        "description": "You have n tasks and m workers. Each task has a strength requirement stored in a 0-indexed integer array tasks, with the ith task requiring tasks[i] strength to complete. The strength of each worker is stored in a 0-indexed integer array workers, with the jth worker having workers[j] strength. Each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., workers[j] >= tasks[i]).",
        "exampleInputs1": "tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1",
        "exampleOutputs1": "3",
        "exampleInputs2": "tasks = [5,4], workers = [0,0,0], pills = 1, strength = 5",
        "exampleOutputs2": "1",
        "exampleInputs3": "tasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10",
        "exampleOutputs3": "2",
        "exampleInputs4": "tasks = [5,9,8,5,9], workers = [1,6,4,2,6], pills = 1, strength = 5",
        "exampleOutputs4": "3"
    },
    {
        "id": 2071,
        "title": "2071. Maximum Number of Tasks You Can Assign",
        "description": "You are given an integer n indicating the number of people in a network. Each person is labeled from 0 to n - 1.",
        "exampleInputs1": "n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]]",
        "exampleOutputs1": "[true,false]",
        "exampleInputs2": "n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]]",
        "exampleOutputs2": "[true,false]",
        "exampleInputs3": "n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]]",
        "exampleOutputs3": "[true,false,true,false]"
    },
    {
        "id": 2076,
        "title": "2076. Process Restricted Friend Requests",
        "description": "A k-mirror number is a positive integer without leading zeros that reads the same both forward and backward in base-10 as well as in base-k.",
        "exampleInputs1": "k = 2, n = 5",
        "exampleOutputs1": "25",
        "exampleInputs2": "k = 3, n = 7",
        "exampleOutputs2": "499",
        "exampleInputs3": "k = 7, n = 17",
        "exampleOutputs3": "20379000"
    },
    {
        "id": 2081,
        "title": "2081. Sum of k-Mirror Numbers",
        "description": "A farmer has a rectangular grid of land with m rows and n columns that can be divided into unit cells. Each cell is either fertile (represented by a 1) or barren (represented by a 0). All cells outside the grid are considered barren.",
        "exampleInputs1": "grid = [[0,1,1,0],[1,1,1,1]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "grid = [[1,1,1],[1,1,1]]",
        "exampleOutputs2": "2",
        "exampleInputs3": "grid = [[1,0,1],[0,0,0],[1,0,1]]",
        "exampleOutputs3": "0",
        "exampleInputs4": "grid = [[1,1,1,1,0],[1,1,1,1,1],[1,1,1,1,1],[0,1,0,0,1]]",
        "exampleOutputs4": "13"
    },
    {
        "id": 2088,
        "title": "2088. Count Fertile Pyramids in a Land",
        "description": "You are given an integer n indicating there are n people numbered from 0 to n - 1. You are also given a 0-indexed 2D integer array meetings where meetings[i] = [xi, yi, timei] indicates that person xi and person yi have a meeting at timei. A person may attend multiple meetings at the same time. Finally, you are given an integer firstPerson.",
        "exampleInputs1": "n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1",
        "exampleOutputs1": "[0,1,2,3,5]",
        "exampleInputs2": "n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3",
        "exampleOutputs2": "[0,1,3]",
        "exampleInputs3": "n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1",
        "exampleOutputs3": "[0,1,2,3,4]",
        "exampleInputs4": "n = 6, meetings = [[0,2,1],[1,3,1],[4,5,1]], firstPerson = 1",
        "exampleOutputs4": "[0,1,2,3]"
    },
    {
        "id": 2092,
        "title": "2092. Find All People With Secret",
        "description": "You are given a 0-indexed 2D integer array pairs where pairs[i] = [starti, endi]. An arrangement of pairs is valid if for every index i where 1 <= i < pairs.length, we have endi-1 == starti.",
        "exampleInputs1": "pairs = [[5,1],[4,5],[11,9],[9,4]]",
        "exampleOutputs1": "[[11,9],[9,4],[4,5],[5,1]]",
        "exampleInputs2": "pairs = [[1,3],[3,2],[2,1]]",
        "exampleOutputs2": "[[1,3],[3,2],[2,1]]",
        "exampleInputs3": "pairs = [[1,2],[1,3],[2,1]]",
        "exampleOutputs3": "[[1,2],[2,1],[1,3]]"
    },
    {
        "id": 2097,
        "title": "2097. Valid Arrangement of Pairs",
        "description": "A scenic location is represented by its name and attractiveness score, where name is a unique string among all locations and score is an integer. Locations can be ranked from the best to the worst. The higher the score, the better the location. If the scores of two locations are equal, then the location with the lexicographically smaller name is better.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"SORTracker\", \"add\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"get\"]"
    },
    {
        "id": 2102,
        "title": "2102. Sequentially Ordinal Rank Tracker",
        "description": "Fruits are available at some positions on an infinite x-axis. You are given a 2D integer array fruits where fruits[i] = [positioni, amounti] depicts amounti fruits at the position positioni. fruits is already sorted by positioni in ascending order, and each positioni is unique.",
        "exampleInputs1": "fruits = [[2,8],[6,3],[8,6]], startPos = 5, k = 4",
        "exampleOutputs1": "9",
        "exampleInputs2": "fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], startPos = 5, k = 4",
        "exampleOutputs2": "14",
        "exampleInputs3": "fruits = [[0,3],[6,4],[8,5]], startPos = 3, k = 2",
        "exampleOutputs3": "0"
    },
    {
        "id": 2106,
        "title": "2106. Maximum Fruits Harvested After at Most K Steps",
        "description": "You are given an integer n indicating the number of people in a network. Each person is labeled from 0 to n - 1.",
        "exampleInputs1": "n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]]",
        "exampleOutputs1": "[true,false]",
        "exampleInputs2": "n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]]",
        "exampleOutputs2": "[true,false]",
        "exampleInputs3": "n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]]",
        "exampleOutputs3": "[true,false,true,false]"
    },
    {
        "id": 2076,
        "title": "2076. Process Restricted Friend Requests",
        "description": "A k-mirror number is a positive integer without leading zeros that reads the same both forward and backward in base-10 as well as in base-k.",
        "exampleInputs1": "k = 2, n = 5",
        "exampleOutputs1": "25",
        "exampleInputs2": "k = 3, n = 7",
        "exampleOutputs2": "499",
        "exampleInputs3": "k = 7, n = 17",
        "exampleOutputs3": "20379000"
    },
    {
        "id": 2081,
        "title": "2081. Sum of k-Mirror Numbers",
        "description": "A farmer has a rectangular grid of land with m rows and n columns that can be divided into unit cells. Each cell is either fertile (represented by a 1) or barren (represented by a 0). All cells outside the grid are considered barren.",
        "exampleInputs1": "grid = [[0,1,1,0],[1,1,1,1]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "grid = [[1,1,1],[1,1,1]]",
        "exampleOutputs2": "2",
        "exampleInputs3": "grid = [[1,0,1],[0,0,0],[1,0,1]]",
        "exampleOutputs3": "0",
        "exampleInputs4": "grid = [[1,1,1,1,0],[1,1,1,1,1],[1,1,1,1,1],[0,1,0,0,1]]",
        "exampleOutputs4": "13"
    },
    {
        "id": 2088,
        "title": "2088. Count Fertile Pyramids in a Land",
        "description": "You are given an integer n indicating there are n people numbered from 0 to n - 1. You are also given a 0-indexed 2D integer array meetings where meetings[i] = [xi, yi, timei] indicates that person xi and person yi have a meeting at timei. A person may attend multiple meetings at the same time. Finally, you are given an integer firstPerson.",
        "exampleInputs1": "n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1",
        "exampleOutputs1": "[0,1,2,3,5]",
        "exampleInputs2": "n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3",
        "exampleOutputs2": "[0,1,3]",
        "exampleInputs3": "n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1",
        "exampleOutputs3": "[0,1,2,3,4]",
        "exampleInputs4": "n = 6, meetings = [[0,2,1],[1,3,1],[4,5,1]], firstPerson = 1",
        "exampleOutputs4": "[0,1,2,3]"
    },
    {
        "id": 2092,
        "title": "2092. Find All People With Secret",
        "description": "You are given a 0-indexed 2D integer array pairs where pairs[i] = [starti, endi]. An arrangement of pairs is valid if for every index i where 1 <= i < pairs.length, we have endi-1 == starti.",
        "exampleInputs1": "pairs = [[5,1],[4,5],[11,9],[9,4]]",
        "exampleOutputs1": "[[11,9],[9,4],[4,5],[5,1]]",
        "exampleInputs2": "pairs = [[1,3],[3,2],[2,1]]",
        "exampleOutputs2": "[[1,3],[3,2],[2,1]]",
        "exampleInputs3": "pairs = [[1,2],[1,3],[2,1]]",
        "exampleOutputs3": "[[1,2],[2,1],[1,3]]"
    },
    {
        "id": 2097,
        "title": "2097. Valid Arrangement of Pairs",
        "description": "A scenic location is represented by its name and attractiveness score, where name is a unique string among all locations and score is an integer. Locations can be ranked from the best to the worst. The higher the score, the better the location. If the scores of two locations are equal, then the location with the lexicographically smaller name is better.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"SORTracker\", \"add\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"get\"]"
    },
    {
        "id": 2102,
        "title": "2102. Sequentially Ordinal Rank Tracker",
        "description": "Fruits are available at some positions on an infinite x-axis. You are given a 2D integer array fruits where fruits[i] = [positioni, amounti] depicts amounti fruits at the position positioni. fruits is already sorted by positioni in ascending order, and each positioni is unique.",
        "exampleInputs1": "fruits = [[2,8],[6,3],[8,6]], startPos = 5, k = 4",
        "exampleOutputs1": "9",
        "exampleInputs2": "fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], startPos = 5, k = 4",
        "exampleOutputs2": "14",
        "exampleInputs3": "fruits = [[0,3],[6,4],[8,5]], startPos = 3, k = 2",
        "exampleOutputs3": "0"
    },
    {
        "id": 2106,
        "title": "2106. Maximum Fruits Harvested After at Most K Steps",
        "description": "You are given a 0-indexed array arr consisting of n positive integers, and a positive integer k.",
        "exampleInputs1": "arr = [5,4,3,2,1], k = 1",
        "exampleOutputs1": "4",
        "exampleInputs2": "arr = [4,1,5,2,6,2], k = 2",
        "exampleOutputs2": "0",
        "exampleInputs3": "arr = [4,1,5,2,6,2], k = 3",
        "exampleOutputs3": "2"
    },
    {
        "id": 2111,
        "title": "2111. Minimum Operations to Make the Array K-Increasing",
        "description": "A farmer has a rectangular grid of land with m rows and n columns that can be divided into unit cells. Each cell is either fertile (represented by a 1) or barren (represented by a 0). All cells outside the grid are considered barren.",
        "exampleInputs1": "grid = [[0,1,1,0],[1,1,1,1]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "grid = [[1,1,1],[1,1,1]]",
        "exampleOutputs2": "2",
        "exampleInputs3": "grid = [[1,1,1,1,0],[1,1,1,1,1],[1,1,1,1,1],[0,1,0,0,1]]",
        "exampleOutputs3": "13"
    },
    {
        "id": 2088,
        "title": "2088. Count Fertile Pyramids in a Land",
        "description": "You are given an integer n indicating there are n people numbered from 0 to n - 1. You are also given a 0-indexed 2D integer array meetings where meetings[i] = [xi, yi, timei] indicates that person xi and person yi have a meeting at timei. A person may attend multiple meetings at the same time. Finally, you are given an integer firstPerson.",
        "exampleInputs1": "n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1",
        "exampleOutputs1": "[0,1,2,3,5]",
        "exampleInputs2": "n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3",
        "exampleOutputs2": "[0,1,3]",
        "exampleInputs3": "n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1",
        "exampleOutputs3": "[0,1,2,3,4]"
    },
    {
        "id": 2092,
        "title": "2092. Find All People With Secret",
        "description": "You are given a 0-indexed 2D integer array pairs where pairs[i] = [starti, endi]. An arrangement of pairs is valid if for every index i where 1 <= i < pairs.length, we have endi-1 == starti.",
        "exampleInputs1": "pairs = [[5,1],[4,5],[11,9],[9,4]]",
        "exampleOutputs1": "[[11,9],[9,4],[4,5],[5,1]]",
        "exampleInputs2": "pairs = [[1,3],[3,2],[2,1]]",
        "exampleOutputs2": "[[1,3],[3,2],[2,1]]",
        "exampleInputs3": "pairs = [[1,2],[1,3],[2,1]]",
        "exampleOutputs3": "[[1,2],[2,1],[1,3]]"
    },
    {
        "id": 2097,
        "title": "2097. Valid Arrangement of Pairs",
        "description": "A scenic location is represented by its name and attractiveness score, where name is a unique string among all locations and score is an integer. Locations can be ranked from the best to the worst. The higher the score, the better the location. If the scores of two locations are equal, then the location with the lexicographically smaller name is better.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"SORTracker\", \"add\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"get\"]"
    },
    {
        "id": 2102,
        "title": "2102. Sequentially Ordinal Rank Tracker",
        "description": "Fruits are available at some positions on an infinite x-axis. You are given a 2D integer array fruits where fruits[i] = [positioni, amounti] depicts amounti fruits at the position positioni. fruits is already sorted by positioni in ascending order, and each positioni is unique.",
        "exampleInputs1": "fruits = [[2,8],[6,3],[8,6]], startPos = 5, k = 4",
        "exampleOutputs1": "9",
        "exampleInputs2": "fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], startPos = 5, k = 4",
        "exampleOutputs2": "14",
        "exampleInputs3": "fruits = [[0,3],[6,4],[8,5]], startPos = 3, k = 2",
        "exampleOutputs3": "0"
    },
    {
        "id": 2106,
        "title": "2106. Maximum Fruits Harvested After at Most K Steps",
        "description": "You are given a 0-indexed array arr consisting of n positive integers, and a positive integer k.",
        "exampleInputs1": "arr = [5,4,3,2,1], k = 1",
        "exampleOutputs1": "4",
        "exampleInputs2": "arr = [4,1,5,2,6,2], k = 2",
        "exampleOutputs2": "0",
        "exampleInputs3": "arr = [4,1,5,2,6,2], k = 3",
        "exampleOutputs3": "2"
    },
    {
        "id": 2111,
        "title": "2111. Minimum Operations to Make the Array K-Increasing",
        "description": "You are given two positive integers left and right with left <= right. Calculate the product of all integers in the inclusive range [left, right].",
        "exampleInputs1": "left = 1, right = 4",
        "exampleOutputs1": "\"24e0\"",
        "exampleInputs2": "left = 2, right = 11",
        "exampleOutputs2": "\"399168e2\"",
        "exampleInputs3": "left = 999998, right = 1000000",
        "exampleOutputs3": "\"99999...00002e6\""
    },
    {
        "id": 2117,
        "title": "2117. Abbreviating the Product of a Range",
        "description": "Alice had a 0-indexed array arr consisting of n positive integers. She chose an arbitrary positive integer k and created two new 0-indexed integer arrays lower and higher in the following manner:",
        "exampleInputs1": "nums = [2,10,6,4,8,12]",
        "exampleOutputs1": "[3,7,11]",
        "exampleInputs2": "nums = [1,1,3,3]",
        "exampleOutputs2": "[2,2]",
        "exampleInputs3": "nums = [5,435]",
        "exampleOutputs3": "[220]"
    },
    {
        "id": 2122,
        "title": "2122. Recover the Original Array",
        "description": "You are given a 0-indexed array arr consisting of n positive integers, and a positive integer k.",
        "exampleInputs1": "arr = [5,4,3,2,1], k = 1",
        "exampleOutputs1": "4",
        "exampleInputs2": "arr = [4,1,5,2,6,2], k = 2",
        "exampleOutputs2": "0",
        "exampleInputs3": "arr = [4,1,5,2,6,2], k = 3",
        "exampleOutputs3": "2"
    },
    {
        "id": 2111,
        "title": "2111. Minimum Operations to Make the Array K-Increasing",
        "description": "You are given two positive integers left and right with left <= right. Calculate the product of all integers in the inclusive range [left, right].",
        "exampleInputs1": "left = 1, right = 4",
        "exampleOutputs1": "\"24e0\"",
        "exampleInputs2": "left = 2, right = 11",
        "exampleOutputs2": "\"399168e2\"",
        "exampleInputs3": "left = 371, right = 375",
        "exampleOutputs3": "\"7219856259e3\""
    },
    {
        "id": 2117,
        "title": "2117. Abbreviating the Product of a Range",
        "description": "Alice had a 0-indexed array arr consisting of n positive integers. She chose an arbitrary positive integer k and created two new 0-indexed integer arrays lower and higher in the following manner:",
        "exampleInputs1": "nums = [2,10,6,4,8,12]",
        "exampleOutputs1": "[3,7,11]",
        "exampleInputs2": "nums = [1,1,3,3]",
        "exampleOutputs2": "[2,2]",
        "exampleInputs3": "nums = [5,435]",
        "exampleOutputs3": "[220]"
    },
    {
        "id": 2122,
        "title": "2122. Recover the Original Array",
        "description": "A company is organizing a meeting and has a list of n employees, waiting to be invited. They have arranged for a large circular table, capable of seating any number of employees.",
        "exampleInputs1": "favorite = [2,2,1,2]",
        "exampleOutputs1": "3",
        "exampleInputs2": "favorite = [1,2,0]",
        "exampleOutputs2": "3",
        "exampleInputs3": "favorite = [3,0,1,4,1]",
        "exampleOutputs3": "4"
    },
    {
        "id": 2127,
        "title": "2127. Maximum Employees to Be Invited to a Meeting",
        "description": "A scenic location is represented by its name and attractiveness score, where name is a unique string among all locations and score is an integer. Locations can be ranked from the best to the worst. The higher the score, the better the location. If the scores of two locations are equal, then the location with the lexicographically smaller name is better.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"SORTracker\", \"add\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"get\"]"
    },
    {
        "id": 2102,
        "title": "2102. Sequentially Ordinal Rank Tracker",
        "description": "Fruits are available at some positions on an infinite x-axis. You are given a 2D integer array fruits where fruits[i] = [positioni, amounti] depicts amounti fruits at the position positioni. fruits is already sorted by positioni in ascending order, and each positioni is unique.",
        "exampleInputs1": "fruits = [[2,8],[6,3],[8,6]], startPos = 5, k = 4",
        "exampleOutputs1": "9",
        "exampleInputs2": "fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], startPos = 5, k = 4",
        "exampleOutputs2": "14",
        "exampleInputs3": "fruits = [[0,3],[6,4],[8,5]], startPos = 3, k = 2",
        "exampleOutputs3": "0"
    },
    {
        "id": 2106,
        "title": "2106. Maximum Fruits Harvested After at Most K Steps",
        "description": "You are given a 0-indexed array arr consisting of n positive integers, and a positive integer k.",
        "exampleInputs1": "arr = [5,4,3,2,1], k = 1",
        "exampleOutputs1": "4",
        "exampleInputs2": "arr = [4,1,5,2,6,2], k = 2",
        "exampleOutputs2": "0",
        "exampleInputs3": "arr = [4,1,5,2,6,2], k = 3",
        "exampleOutputs3": "2"
    },
    {
        "id": 2111,
        "title": "2111. Minimum Operations to Make the Array K-Increasing",
        "description": "You are given two positive integers left and right with left <= right. Calculate the product of all integers in the inclusive range [left, right].",
        "exampleInputs1": "left = 1, right = 4",
        "exampleOutputs1": "\"24e0\"",
        "exampleInputs2": "left = 2, right = 11",
        "exampleOutputs2": "\"399168e2\"",
        "exampleInputs3": "left = 371, right = 375",
        "exampleOutputs3": "\"7219856259e3\""
    },
    {
        "id": 2117,
        "title": "2117. Abbreviating the Product of a Range",
        "description": "Alice had a 0-indexed array arr consisting of n positive integers. She chose an arbitrary positive integer k and created two new 0-indexed integer arrays lower and higher in the following manner:",
        "exampleInputs1": "nums = [2,10,6,4,8,12]",
        "exampleOutputs1": "[3,7,11]",
        "exampleInputs2": "nums = [1,1,3,3]",
        "exampleOutputs2": "[2,2]",
        "exampleInputs3": "nums = [5,435]",
        "exampleOutputs3": "[220]"
    },
    {
        "id": 2122,
        "title": "2122. Recover the Original Array",
        "description": "A company is organizing a meeting and has a list of n employees, waiting to be invited. They have arranged for a large circular table, capable of seating any number of employees.",
        "exampleInputs1": "favorite = [2,2,1,2]",
        "exampleOutputs1": "3",
        "exampleInputs2": "favorite = [1,2,0]",
        "exampleOutputs2": "3",
        "exampleInputs3": "favorite = [3,0,1,4,1]",
        "exampleOutputs3": "4"
    },
    {
        "id": 2127,
        "title": "2127. Maximum Employees to Be Invited to a Meeting",
        "description": "You are given an m x n binary matrix grid where each cell is either 0 (empty) or 1 (occupied).",
        "exampleInputs1": "grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3",
        "exampleOutputs1": "true",
        "exampleInputs2": "grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2",
        "exampleOutputs2": "false"
    },
    {
        "id": 2132,
        "title": "2132. Stamping the Grid",
        "description": "You have n flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed takes time and so does the growth of a seed. You are given two 0-indexed integer arrays plantTime and growTime, of length n each:",
        "exampleInputs1": "plantTime = [1,4,3], growTime = [2,3,1]",
        "exampleOutputs1": "9",
        "exampleInputs2": "plantTime = [1,2,3,2], growTime = [2,1,2,1]",
        "exampleOutputs2": "9",
        "exampleInputs3": "plantTime = [1], growTime = [1]",
        "exampleOutputs3": "2"
    },
    {
        "id": 2136,
        "title": "2136. Earliest Possible Day of Full Bloom",
        "description": "A company is organizing a meeting and has a list of n employees, waiting to be invited. They have arranged for a large circular table, capable of seating any number of employees.",
        "exampleInputs1": "favorite = [2,2,1,2]",
        "exampleOutputs1": "3",
        "exampleInputs2": "favorite = [1,2,0]",
        "exampleOutputs2": "3",
        "exampleInputs3": "favorite = [3,0,1,4,1]",
        "exampleOutputs3": "4"
    },
    {
        "id": 2127,
        "title": "2127. Maximum Employees to Be Invited to a Meeting",
        "description": "You are given an m x n binary matrix grid where each cell is either 0 (empty) or 1 (occupied).",
        "exampleInputs1": "grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3",
        "exampleOutputs1": "true",
        "exampleInputs2": "grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2",
        "exampleOutputs2": "false"
    },
    {
        "id": 2132,
        "title": "2132. Stamping the Grid",
        "description": "You have n flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed takes time and so does the growth of a seed. You are given two 0-indexed integer arrays plantTime and growTime, of length n each:",
        "exampleInputs1": "plantTime = [1,4,3], growTime = [2,3,1]",
        "exampleOutputs1": "9",
        "exampleInputs2": "plantTime = [1,2,3,2], growTime = [2,1,2,1]",
        "exampleOutputs2": "9",
        "exampleInputs3": "plantTime = [1], growTime = [1]",
        "exampleOutputs3": "2"
    },
    {
        "id": 2136,
        "title": "2136. Earliest Possible Day of Full Bloom",
        "description": "You have n computers. You are given the integer n and a 0-indexed integer array batteries where the ith battery can run a computer for batteries[i] minutes. You are interested in running all n computers simultaneously using the given batteries.",
        "exampleInputs1": "n = 2, batteries = [3,3,3]",
        "exampleOutputs1": "4",
        "exampleInputs2": "n = 2, batteries = [1,1,1,1]",
        "exampleOutputs2": "2"
    },
    {
        "id": 2141,
        "title": "2141. Maximum Running Time of N Computers",
        "description": "You are given an m x n binary matrix grid where each cell is either 0 (empty) or 1 (occupied).",
        "exampleInputs1": "grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3",
        "exampleOutputs1": "true",
        "exampleInputs2": "grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2",
        "exampleOutputs2": "false"
    },
    {
        "id": 2132,
        "title": "2132. Stamping the Grid",
        "description": "You have n flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed takes time and so does the growth of a seed. You are given two 0-indexed integer arrays plantTime and growTime, of length n each:",
        "exampleInputs1": "plantTime = [1,4,3], growTime = [2,3,1]",
        "exampleOutputs1": "9",
        "exampleInputs2": "plantTime = [1,2,3,2], growTime = [2,1,2,1]",
        "exampleOutputs2": "9",
        "exampleInputs3": "plantTime = [1], growTime = [1]",
        "exampleOutputs3": "2"
    },
    {
        "id": 2136,
        "title": "2136. Earliest Possible Day of Full Bloom",
        "description": "You have n computers. You are given the integer n and a 0-indexed integer array batteries where the ith battery can run a computer for batteries[i] minutes. You are interested in running all n computers simultaneously using the given batteries.",
        "exampleInputs1": "n = 2, batteries = [3,3,3]",
        "exampleOutputs1": "4",
        "exampleInputs2": "n = 2, batteries = [1,1,1,1]",
        "exampleOutputs2": "2"
    },
    {
        "id": 2141,
        "title": "2141. Maximum Running Time of N Computers",
        "description": "Along a long library corridor, there is a line of seats and decorative plants. You are given a 0-indexed string corridor of length n consisting of letters 'S' and 'P' where each 'S' represents a seat and each 'P' represents a plant.",
        "exampleInputs1": "corridor = \"SSPPSPS\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "corridor = \"PPSPSP\"",
        "exampleOutputs2": "1",
        "exampleInputs3": "corridor = \"S\"",
        "exampleOutputs3": "0"
    },
    {
        "id": 2147,
        "title": "2147. Number of Ways to Divide a Long Corridor",
        "description": "You have n flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed takes time and so does the growth of a seed. You are given two 0-indexed integer arrays plantTime and growTime, of length n each:",
        "exampleInputs1": "plantTime = [1,4,3], growTime = [2,3,1]",
        "exampleOutputs1": "9",
        "exampleInputs2": "plantTime = [1,2,3,2], growTime = [2,1,2,1]",
        "exampleOutputs2": "9",
        "exampleInputs3": "plantTime = [1], growTime = [1]",
        "exampleOutputs3": "2"
    },
    {
        "id": 2136,
        "title": "2136. Earliest Possible Day of Full Bloom",
        "description": "You have n computers. You are given the integer n and a 0-indexed integer array batteries where the ith battery can run a computer for batteries[i] minutes. You are interested in running all n computers simultaneously using the given batteries.",
        "exampleInputs1": "n = 2, batteries = [3,3,3]",
        "exampleOutputs1": "4",
        "exampleInputs2": "n = 2, batteries = [1,1,1,1]",
        "exampleOutputs2": "2"
    },
    {
        "id": 2141,
        "title": "2141. Maximum Running Time of N Computers",
        "description": "Along a long library corridor, there is a line of seats and decorative plants. You are given a 0-indexed string corridor of length n consisting of letters 'S' and 'P' where each 'S' represents a seat and each 'P' represents a plant.",
        "exampleInputs1": "corridor = \"SSPPSPS\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "corridor = \"PPSPSP\"",
        "exampleOutputs2": "1",
        "exampleInputs3": "corridor = \"S\"",
        "exampleOutputs3": "0"
    },
    {
        "id": 2147,
        "title": "2147. Number of Ways to Divide a Long Corridor",
        "description": "There are two types of persons:",
        "exampleInputs1": "statements = [[2,1,2],[1,2,2],[2,0,2]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "statements = [[2,0],[0,2]]",
        "exampleOutputs2": "1"
    },
    {
        "id": 2151,
        "title": "2151. Maximum Good People Based on Statements",
        "description": "You have n computers. You are given the integer n and a 0-indexed integer array batteries where the ith battery can run a computer for batteries[i] minutes. You are interested in running all n computers simultaneously using the given batteries.",
        "exampleInputs1": "n = 2, batteries = [3,3,3]",
        "exampleOutputs1": "4",
        "exampleInputs2": "n = 2, batteries = [1,1,1,1]",
        "exampleOutputs2": "2"
    },
    {
        "id": 2141,
        "title": "2141. Maximum Running Time of N Computers",
        "description": "Along a long library corridor, there is a line of seats and decorative plants. You are given a 0-indexed string corridor of length n consisting of letters 'S' and 'P' where each 'S' represents a seat and each 'P' represents a plant.",
        "exampleInputs1": "corridor = \"SSPPSPS\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "corridor = \"PPSPSP\"",
        "exampleOutputs2": "1",
        "exampleInputs3": "corridor = \"S\"",
        "exampleOutputs3": "0"
    },
    {
        "id": 2147,
        "title": "2147. Number of Ways to Divide a Long Corridor",
        "description": "There are two types of persons:",
        "exampleInputs1": "statements = [[2,1,2],[1,2,2],[2,0,2]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "statements = [[2,0],[0,2]]",
        "exampleOutputs2": "1"
    },
    {
        "id": 2151,
        "title": "2151. Maximum Good People Based on Statements",
        "description": "You are given a 0-indexed array of strings words. Each string consists of lowercase English letters only. No letter occurs more than once in any string of words.",
        "exampleInputs1": "words = [\"a\",\"b\",\"ab\",\"cde\"]",
        "exampleOutputs1": "[2,3]",
        "exampleInputs2": "words = [\"a\",\"ab\",\"abc\"]",
        "exampleOutputs2": "[1,3]"
    },
    {
        "id": 2157,
        "title": "2157. Groups of Strings",
        "description": "Along a long library corridor, there is a line of seats and decorative plants. You are given a 0-indexed string corridor of length n consisting of letters 'S' and 'P' where each 'S' represents a seat and each 'P' represents a plant.",
        "exampleInputs1": "corridor = \"SSPPSPS\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "corridor = \"PPSPSP\"",
        "exampleOutputs2": "1",
        "exampleInputs3": "corridor = \"S\"",
        "exampleOutputs3": "0"
    },
    {
        "id": 2147,
        "title": "2147. Number of Ways to Divide a Long Corridor",
        "description": "There are two types of persons:",
        "exampleInputs1": "statements = [[2,1,2],[1,2,2],[2,0,2]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "statements = [[2,0],[0,2]]",
        "exampleOutputs2": "1"
    },
    {
        "id": 2151,
        "title": "2151. Maximum Good People Based on Statements",
        "description": "You are given a 0-indexed array of strings words. Each string consists of lowercase English letters only. No letter occurs more than once in any string of words.",
        "exampleInputs1": "words = [\"a\",\"b\",\"ab\",\"cde\"]",
        "exampleOutputs1": "[2,3]",
        "exampleInputs2": "words = [\"a\",\"ab\",\"abc\"]",
        "exampleOutputs2": "[1,3]"
    },
    {
        "id": 2157,
        "title": "2157. Groups of Strings",
        "description": "You are given a 0-indexed integer array nums consisting of 3 * n elements.",
        "exampleInputs1": "nums = [3,1,2]",
        "exampleOutputs1": "-1",
        "exampleInputs2": "nums = [7,9,5,8,1,3]",
        "exampleOutputs2": "1"
    },
    {
        "id": 2163,
        "title": "2163. Minimum Difference in Sums After Removal of Elements",
        "description": "The hash of a 0-indexed string s of length k, given integers p and m, is computed using the following function:",
        "exampleInputs1": "s = \"leetcode\", power = 7, modulo = 20, k = 2, hashValue = 0",
        "exampleOutputs1": "\"ee\"",
        "exampleInputs2": "s = \"fbxzaad\", power = 31, modulo = 100, k = 3, hashValue = 32",
        "exampleOutputs2": "\"fbx\""
    },
    {
        "id": 2156,
        "title": "2156. Find Substring With Given Hash Value",
        "description": "You are given a 0-indexed array of strings words. Each string consists of lowercase English letters only. No letter occurs more than once in any string of words.",
        "exampleInputs1": "words = [\"a\",\"b\",\"ab\",\"cde\"]",
        "exampleOutputs1": "[2,3]",
        "exampleInputs2": "words = [\"a\",\"ab\",\"abc\"]",
        "exampleOutputs2": "[1,3]"
    },
    {
        "id": 2157,
        "title": "2157. Groups of Strings",
        "description": "You are given a 0-indexed integer array nums consisting of 3 * n elements.",
        "exampleInputs1": "nums = [3,1,2]",
        "exampleOutputs1": "-1",
        "exampleInputs2": "nums = [7,9,5,8,1,3]",
        "exampleOutputs2": "1"
    },
    {
        "id": 2163,
        "title": "2163. Minimum Difference in Sums After Removal of Elements",
        "description": "You are given a 0-indexed binary string s which represents a sequence of train cars. s[i] = '0' denotes that the ith car does not contain illegal goods and s[i] = '1' denotes that the ith car does contain illegal goods.",
        "exampleInputs1": "s = \"1100101\"",
        "exampleOutputs1": "5",
        "exampleInputs2": "s = \"0010\"",
        "exampleOutputs2": "2"
    },
    {
        "id": 2167,
        "title": "2167. Minimum Time to Remove All Cars Containing Illegal Goods",
        "description": "You are given a 0-indexed array of strings words. Each string consists of lowercase English letters only. No letter occurs more than once in any string of words.",
        "exampleInputs1": "words = [\"a\",\"b\",\"ab\",\"cde\"]",
        "exampleOutputs1": "[2,3]",
        "exampleInputs2": "words = [\"a\",\"ab\",\"abc\"]",
        "exampleOutputs2": "[1,3]"
    },
    {
        "id": 2157,
        "title": "2157. Groups of Strings",
        "description": "You are given a 0-indexed integer array nums consisting of 3 * n elements.",
        "exampleInputs1": "nums = [3,1,2]",
        "exampleOutputs1": "-1",
        "exampleInputs2": "nums = [7,9,5,8,1,3]",
        "exampleOutputs2": "1"
    },
    {
        "id": 2163,
        "title": "2163. Minimum Difference in Sums After Removal of Elements",
        "description": "You are given a 0-indexed binary string s which represents a sequence of train cars. s[i] = '0' denotes that the ith car does not contain illegal goods and s[i] = '1' denotes that the ith car does contain illegal goods.",
        "exampleInputs1": "s = \"1100101\"",
        "exampleOutputs1": "5",
        "exampleInputs2": "s = \"0010\"",
        "exampleOutputs2": "2"
    },
    {
        "id": 2167,
        "title": "2167. Minimum Time to Remove All Cars Containing Illegal Goods",
        "description": "You are given an integer array nums of length n and an integer numSlots such that 2 * numSlots >= n. There are numSlots slots numbered from 1 to numSlots.",
        "exampleInputs1": "nums = [1,2,3,4,5,6], numSlots = 3",
        "exampleOutputs1": "9",
        "exampleInputs2": "nums = [1,3,10,4,7,1], numSlots = 9",
        "exampleOutputs2": "24"
    },
    {
        "id": 2172,
        "title": "2172. Maximum AND Sum of Array",
        "description": "You are given a 0-indexed integer array nums consisting of 3 * n elements.",
        "exampleInputs1": "nums = [3,1,2]",
        "exampleOutputs1": "-1",
        "exampleInputs2": "nums = [7,9,5,8,1,3]",
        "exampleOutputs2": "1"
    },
    {
        "id": 2163,
        "title": "2163. Minimum Difference in Sums After Removal of Elements",
        "description": "You are given a 0-indexed binary string s which represents a sequence of train cars. s[i] = '0' denotes that the ith car does not contain illegal goods and s[i] = '1' denotes that the ith car does contain illegal goods.",
        "exampleInputs1": "s = \"1100101\"",
        "exampleOutputs1": "5",
        "exampleInputs2": "s = \"0010\"",
        "exampleOutputs2": "2"
    },
    {
        "id": 2167,
        "title": "2167. Minimum Time to Remove All Cars Containing Illegal Goods",
        "description": "You are given an integer array nums of length n and an integer numSlots such that 2 * numSlots >= n. There are numSlots slots numbered from 1 to numSlots.",
        "exampleInputs1": "nums = [1,2,3,4,5,6], numSlots = 3",
        "exampleOutputs1": "9",
        "exampleInputs2": "nums = [1,3,10,4,7,1], numSlots = 9",
        "exampleOutputs2": "24"
    },
    {
        "id": 2172,
        "title": "2172. Maximum AND Sum of Array",
        "description": "You are given two 0-indexed arrays nums1 and nums2 of length n, both of which are permutations of [0, 1, ..., n - 1].",
        "exampleInputs1": "nums1 = [2,0,1,3], nums2 = [0,1,2,3]",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3]",
        "exampleOutputs2": "4"
    },
    {
        "id": 2179,
        "title": "2179. Count Good Triplets in an Array",
        "description": "You are given a 0-indexed binary string s which represents a sequence of train cars. s[i] = '0' denotes that the ith car does not contain illegal goods and s[i] = '1' denotes that the ith car does contain illegal goods.",
        "exampleInputs1": "s = \"1100101\"",
        "exampleOutputs1": "5",
        "exampleInputs2": "s = \"0010\"",
        "exampleOutputs2": "2"
    },
    {
        "id": 2167,
        "title": "2167. Minimum Time to Remove All Cars Containing Illegal Goods",
        "description": "You are given an integer array nums of length n and an integer numSlots such that 2 * numSlots >= n. There are numSlots slots numbered from 1 to numSlots.",
        "exampleInputs1": "nums = [1,2,3,4,5,6], numSlots = 3",
        "exampleOutputs1": "9",
        "exampleInputs2": "nums = [1,3,10,4,7,1], numSlots = 9",
        "exampleOutputs2": "24"
    },
    {
        "id": 2172,
        "title": "2172. Maximum AND Sum of Array",
        "description": "You are given two 0-indexed arrays nums1 and nums2 of length n, both of which are permutations of [0, 1, ..., n - 1].",
        "exampleInputs1": "nums1 = [2,0,1,3], nums2 = [0,1,2,3]",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3]",
        "exampleOutputs2": "4"
    },
    {
        "id": 2179,
        "title": "2179. Count Good Triplets in an Array",
        "description": "Given a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) such that:",
        "exampleInputs1": "nums = [1,2,3,4,5], k = 2",
        "exampleOutputs1": "7",
        "exampleInputs2": "nums = [1,2,3,4], k = 5",
        "exampleOutputs2": "0"
    },
    {
        "id": 2183,
        "title": "2183. Count Array Pairs Divisible by K",
        "description": "You are given an integer array nums of length n and an integer numSlots such that 2 * numSlots >= n. There are numSlots slots numbered from 1 to numSlots.",
        "exampleInputs1": "nums = [1,2,3,4,5,6], numSlots = 3",
        "exampleOutputs1": "9",
        "exampleInputs2": "nums = [1,3,10,4,7,1], numSlots = 9",
        "exampleOutputs2": "24"
    },
    {
        "id": 2172,
        "title": "2172. Maximum AND Sum of Array",
        "description": "You are given two 0-indexed arrays nums1 and nums2 of length n, both of which are permutations of [0, 1, ..., n - 1].",
        "exampleInputs1": "nums1 = [2,0,1,3], nums2 = [0,1,2,3]",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3]",
        "exampleOutputs2": "4"
    },
    {
        "id": 2179,
        "title": "2179. Count Good Triplets in an Array",
        "description": "Given a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) such that:",
        "exampleInputs1": "nums = [1,2,3,4,5], k = 2",
        "exampleOutputs1": "7",
        "exampleInputs2": "nums = [1,2,3,4], k = 5",
        "exampleOutputs2": "0"
    },
    {
        "id": 2183,
        "title": "2183. Count Array Pairs Divisible by K",
        "description": "You are given a 0-indexed 2D integer array tires where tires[i] = [fi, ri] indicates that the ith tire can finish its xth successive lap in fi * ri(x-1) seconds.",
        "exampleInputs1": "tires = [[2,3],[3,4]], changeTime = 5, numLaps = 4",
        "exampleOutputs1": "21",
        "exampleInputs2": "tires = [[1,10],[2,2],[3,4]], changeTime = 6, numLaps = 5",
        "exampleOutputs2": "25"
    },
    {
        "id": 2188,
        "title": "2188. Minimum Time to Finish the Race",
        "description": "You are given two 0-indexed arrays nums1 and nums2 of length n, both of which are permutations of [0, 1, ..., n - 1].",
        "exampleInputs1": "nums1 = [2,0,1,3], nums2 = [0,1,2,3]",
        "exampleOutputs1": "1",
        "exampleInputs2": "nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3]",
        "exampleOutputs2": "4"
    },
    {
        "id": 2179,
        "title": "2179. Count Good Triplets in an Array",
        "description": "Given a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) such that:",
        "exampleInputs1": "nums = [1,2,3,4,5], k = 2",
        "exampleOutputs1": "7",
        "exampleInputs2": "nums = [1,2,3,4], k = 5",
        "exampleOutputs2": "0"
    },
    {
        "id": 2183,
        "title": "2183. Count Array Pairs Divisible by K",
        "description": "You are given a 0-indexed 2D integer array tires where tires[i] = [fi, ri] indicates that the ith tire can finish its xth successive lap in fi * ri(x-1) seconds.",
        "exampleInputs1": "tires = [[2,3],[3,4]], changeTime = 5, numLaps = 4",
        "exampleOutputs1": "21",
        "exampleInputs2": "tires = [[1,10],[2,2],[3,4]], changeTime = 6, numLaps = 5",
        "exampleOutputs2": "25"
    },
    {
        "id": 2188,
        "title": "2188. Minimum Time to Finish the Race",
        "description": "You are given a string s consisting only of lowercase English letters.",
        "exampleInputs1": "s = \"aabb\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"letelt\"",
        "exampleOutputs2": "2"
    },
    {
        "id": 2193,
        "title": "2193. Minimum Number of Moves to Make Palindrome",
        "description": "Given a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) such that:",
        "exampleInputs1": "nums = [1,2,3,4,5], k = 2",
        "exampleOutputs1": "7",
        "exampleInputs2": "nums = [1,2,3,4], k = 5",
        "exampleOutputs2": "0"
    },
    {
        "id": 2183,
        "title": "2183. Count Array Pairs Divisible by K",
        "description": "You are given a 0-indexed 2D integer array tires where tires[i] = [fi, ri] indicates that the ith tire can finish its xth successive lap in fi * ri(x-1) seconds.",
        "exampleInputs1": "tires = [[2,3],[3,4]], changeTime = 5, numLaps = 4",
        "exampleOutputs1": "21",
        "exampleInputs2": "tires = [[1,10],[2,2],[3,4]], changeTime = 6, numLaps = 5",
        "exampleOutputs2": "25"
    },
    {
        "id": 2188,
        "title": "2188. Minimum Time to Finish the Race",
        "description": "You are given a string s consisting only of lowercase English letters.",
        "exampleInputs1": "s = \"aabb\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"letelt\"",
        "exampleOutputs2": "2"
    },
    {
        "id": 2193,
        "title": "2193. Minimum Number of Moves to Make Palindrome",
        "description": "You are given an array of integers nums. Perform the following steps:",
        "exampleInputs1": "nums = [6,4,3,2,7,6,2]",
        "exampleOutputs1": "[12,7,6]",
        "exampleInputs2": "nums = [2,2,1,1,3,3,3]",
        "exampleOutputs2": "[2,1,1,3]"
    },
    {
        "id": 2197,
        "title": "2197. Replace Non-Coprime Numbers in Array",
        "description": "You are given a 0-indexed 2D integer array tires where tires[i] = [fi, ri] indicates that the ith tire can finish its xth successive lap in fi * ri(x-1) seconds.",
        "exampleInputs1": "tires = [[2,3],[3,4]], changeTime = 5, numLaps = 4",
        "exampleOutputs1": "21",
        "exampleInputs2": "tires = [[1,10],[2,2],[3,4]], changeTime = 6, numLaps = 5",
        "exampleOutputs2": "25"
    },
    {
        "id": 2188,
        "title": "2188. Minimum Time to Finish the Race",
        "description": "You are given a string s consisting only of lowercase English letters.",
        "exampleInputs1": "s = \"aabb\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"letelt\"",
        "exampleOutputs2": "2"
    },
    {
        "id": 2193,
        "title": "2193. Minimum Number of Moves to Make Palindrome",
        "description": "You are given an array of integers nums. Perform the following steps:",
        "exampleInputs1": "nums = [6,4,3,2,7,6,2]",
        "exampleOutputs1": "[12,7,6]",
        "exampleInputs2": "nums = [2,2,1,1,3,3,3]",
        "exampleOutputs2": "[2,1,1,3]"
    },
    {
        "id": 2197,
        "title": "2197. Replace Non-Coprime Numbers in Array",
        "description": "You are given an integer n denoting the number of nodes of a weighted directed graph. The nodes are numbered from 0 to n - 1.",
        "exampleInputs1": "n = 6, edges = [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]], src1 = 0, src2 = 1, dest = 5",
        "exampleOutputs1": "9",
        "exampleInputs2": "n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2 = 1, dest = 2",
        "exampleOutputs2": "-1"
    },
    {
        "id": 2203,
        "title": "2203. Minimum Weighted Subgraph With the Required Paths",
        "description": "You are given a string s consisting only of lowercase English letters.",
        "exampleInputs1": "s = \"aabb\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"letelt\"",
        "exampleOutputs2": "2"
    },
    {
        "id": 2193,
        "title": "2193. Minimum Number of Moves to Make Palindrome",
        "description": "You are given an array of integers nums. Perform the following steps:",
        "exampleInputs1": "nums = [6,4,3,2,7,6,2]",
        "exampleOutputs1": "[12,7,6]",
        "exampleInputs2": "nums = [2,2,1,1,3,3,3]",
        "exampleOutputs2": "[2,1,1,3]"
    },
    {
        "id": 2197,
        "title": "2197. Replace Non-Coprime Numbers in Array",
        "description": "You are given an integer n denoting the number of nodes of a weighted directed graph. The nodes are numbered from 0 to n - 1.",
        "exampleInputs1": "n = 6, edges = [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]], src1 = 0, src2 = 1, dest = 5",
        "exampleOutputs1": "9",
        "exampleInputs2": "n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2 = 1, dest = 2",
        "exampleOutputs2": "-1"
    },
    {
        "id": 2203,
        "title": "2203. Minimum Weighted Subgraph With the Required Paths",
        "description": "You are given a 0-indexed binary string floor, which represents the colors of tiles on a floor:",
        "exampleInputs1": "floor = \"10110101\", numCarpets = 2, carpetLen = 2",
        "exampleOutputs1": "2",
        "exampleInputs2": "floor = \"11111\", numCarpets = 2, carpetLen = 3",
        "exampleOutputs2": "0"
    },
    {
        "id": 2209,
        "title": "2209. Minimum White Tiles After Covering With Carpets",
        "description": "You are given an array of integers nums. Perform the following steps:",
        "exampleInputs1": "nums = [6,4,3,2,7,6,2]",
        "exampleOutputs1": "[12,7,6]",
        "exampleInputs2": "nums = [2,2,1,1,3,3,3]",
        "exampleOutputs2": "[2,1,1,3]"
    },
    {
        "id": 2197,
        "title": "2197. Replace Non-Coprime Numbers in Array",
        "description": "You are given an integer n denoting the number of nodes of a weighted directed graph. The nodes are numbered from 0 to n - 1.",
        "exampleInputs1": "n = 6, edges = [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]], src1 = 0, src2 = 1, dest = 5",
        "exampleOutputs1": "9",
        "exampleInputs2": "n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2 = 1, dest = 2",
        "exampleOutputs2": "-1"
    },
    {
        "id": 2203,
        "title": "2203. Minimum Weighted Subgraph With the Required Paths",
        "description": "You are given a 0-indexed binary string floor, which represents the colors of tiles on a floor:",
        "exampleInputs1": "floor = \"10110101\", numCarpets = 2, carpetLen = 2",
        "exampleOutputs1": "2",
        "exampleInputs2": "floor = \"11111\", numCarpets = 2, carpetLen = 3",
        "exampleOutputs2": "0"
    },
    {
        "id": 2209,
        "title": "2209. Minimum White Tiles After Covering With Carpets",
        "description": "You are given a 0-indexed string s. You are also given a 0-indexed string queryCharacters of length k and a 0-indexed array of integer indices queryIndices of length k, both of which are used to describe k queries.",
        "exampleInputs1": "s = \"babacc\", queryCharacters = \"bcb\", queryIndices = [1,3,3]",
        "exampleOutputs1": "[3,3,4]",
        "exampleInputs2": "s = \"abyzz\", queryCharacters = \"aa\", queryIndices = [2,1]",
        "exampleOutputs2": "[2,3]"
    },
    {
        "id": 2213,
        "title": "2213. Longest Substring of One Repeating Character",
        "description": "You are given an integer n denoting the number of nodes of a weighted directed graph. The nodes are numbered from 0 to n - 1.",
        "exampleInputs1": "n = 6, edges = [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]], src1 = 0, src2 = 1, dest = 5",
        "exampleOutputs1": "9",
        "exampleInputs2": "n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2 = 1, dest = 2",
        "exampleOutputs2": "-1"
    },
    {
        "id": 2203,
        "title": "2203. Minimum Weighted Subgraph With the Required Paths",
        "description": "You are given a 0-indexed binary string floor, which represents the colors of tiles on a floor:",
        "exampleInputs1": "floor = \"10110101\", numCarpets = 2, carpetLen = 2",
        "exampleOutputs1": "2",
        "exampleInputs2": "floor = \"11111\", numCarpets = 2, carpetLen = 3",
        "exampleOutputs2": "0"
    },
    {
        "id": 2209,
        "title": "2209. Minimum White Tiles After Covering With Carpets",
        "description": "You are given a 0-indexed string s. You are also given a 0-indexed string queryCharacters of length k and a 0-indexed array of integer indices queryIndices of length k, both of which are used to describe k queries.",
        "exampleInputs1": "s = \"babacc\", queryCharacters = \"bcb\", queryIndices = [1,3,3]",
        "exampleOutputs1": "[3,3,4]",
        "exampleInputs2": "s = \"abyzz\", queryCharacters = \"aa\", queryIndices = [2,1]",
        "exampleOutputs2": "[2,3]"
    },
    {
        "id": 2213,
        "title": "2213. Longest Substring of One Repeating Character",
        "description": "There are n piles of coins on a table. Each pile consists of a positive number of coins of assorted denominations.",
        "exampleInputs1": "piles = [[1,100,3],[7,8,9]], k = 2",
        "exampleOutputs1": "101",
        "exampleInputs2": "piles = [[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]], k = 7",
        "exampleOutputs2": "706"
    },
    {
        "id": 2218,
        "title": "2218. Maximum Value of K Coins From Piles",
        "description": "You are given a string s consisting only of lowercase English letters.",
        "exampleInputs1": "s = \"aabb\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"letelt\"",
        "exampleOutputs2": "2"
    },
    {
        "id": 2193,
        "title": "2193. Minimum Number of Moves to Make Palindrome",
        "description": "You are given an array of integers nums. Perform the following steps:",
        "exampleInputs1": "nums = [6,4,3,2,7,6,2]",
        "exampleOutputs1": "[12,7,6]",
        "exampleInputs2": "nums = [2,2,1,1,3,3,3]",
        "exampleOutputs2": "[2,1,1,3]"
    },
    {
        "id": 2197,
        "title": "2197. Replace Non-Coprime Numbers in Array",
        "description": "You are given an integer n denoting the number of nodes of a weighted directed graph. The nodes are numbered from 0 to n - 1.",
        "exampleInputs1": "n = 6, edges = [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]], src1 = 0, src2 = 1, dest = 5",
        "exampleOutputs1": "9",
        "exampleInputs2": "n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2 = 1, dest = 2",
        "exampleOutputs2": "-1"
    },
    {
        "id": 2203,
        "title": "2203. Minimum Weighted Subgraph With the Required Paths",
        "description": "You are given a 0-indexed binary string floor, which represents the colors of tiles on a floor:",
        "exampleInputs1": "floor = \"10110101\", numCarpets = 2, carpetLen = 2",
        "exampleOutputs1": "2",
        "exampleInputs2": "floor = \"11111\", numCarpets = 2, carpetLen = 3",
        "exampleOutputs2": "0"
    },
    {
        "id": 2209,
        "title": "2209. Minimum White Tiles After Covering With Carpets",
        "description": "You are given a 0-indexed string s. You are also given a 0-indexed string queryCharacters of length k and a 0-indexed array of integer indices queryIndices of length k, both of which are used to describe k queries.",
        "exampleInputs1": "s = \"babacc\", queryCharacters = \"bcb\", queryIndices = [1,3,3]",
        "exampleOutputs1": "[3,3,4]",
        "exampleInputs2": "s = \"abyzz\", queryCharacters = \"aa\", queryIndices = [2,1]",
        "exampleOutputs2": "[2,3]"
    },
    {
        "id": 2213,
        "title": "2213. Longest Substring of One Repeating Character",
        "description": "There are n piles of coins on a table. Each pile consists of a positive number of coins of assorted denominations.",
        "exampleInputs1": "piles = [[1,100,3],[7,8,9]], k = 2",
        "exampleOutputs1": "101",
        "exampleInputs2": "piles = [[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]], k = 7",
        "exampleOutputs2": "706"
    },
    {
        "id": 2218,
        "title": "2218. Maximum Value of K Coins From Piles",
        "description": "You are building a string s of length n one character at a time, prepending each new character to the front of the string. The strings are labeled from 1 to n, where the string with length i is labeled si.",
        "exampleInputs1": "s = \"babab\"",
        "exampleOutputs1": "9",
        "exampleInputs2": "s = \"azbazbzaz\"",
        "exampleOutputs2": "14"
    },
    {
        "id": 2223,
        "title": "2223. Sum of Scores of Built Strings",
        "description": "You are given a character array keys containing unique characters and a string array values containing strings of length 2. You are also given another string array dictionary that contains all permitted original strings after decryption. You should implement a data structure that can encrypt or decrypt a 0-indexed string.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"Encrypter\", \"encrypt\", \"decrypt\"]"
    },
    {
        "id": 2227,
        "title": "2227. Encrypt and Decrypt Strings",
        "description": "You are given a 0-indexed binary string floor, which represents the colors of tiles on a floor:",
        "exampleInputs1": "floor = \"10110101\", numCarpets = 2, carpetLen = 2",
        "exampleOutputs1": "2",
        "exampleInputs2": "floor = \"11111\", numCarpets = 2, carpetLen = 3",
        "exampleOutputs2": "0"
    },
    {
        "id": 2209,
        "title": "2209. Minimum White Tiles After Covering With Carpets",
        "description": "You are given a 0-indexed string s. You are also given a 0-indexed string queryCharacters of length k and a 0-indexed array of integer indices queryIndices of length k, both of which are used to describe k queries.",
        "exampleInputs1": "s = \"babacc\", queryCharacters = \"bcb\", queryIndices = [1,3,3]",
        "exampleOutputs1": "[3,3,4]",
        "exampleInputs2": "s = \"abyzz\", queryCharacters = \"aa\", queryIndices = [2,1]",
        "exampleOutputs2": "[2,3]"
    },
    {
        "id": 2213,
        "title": "2213. Longest Substring of One Repeating Character",
        "description": "There are n piles of coins on a table. Each pile consists of a positive number of coins of assorted denominations.",
        "exampleInputs1": "piles = [[1,100,3],[7,8,9]], k = 2",
        "exampleOutputs1": "101",
        "exampleInputs2": "piles = [[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]], k = 7",
        "exampleOutputs2": "706"
    },
    {
        "id": 2218,
        "title": "2218. Maximum Value of K Coins From Piles",
        "description": "You are building a string s of length n one character at a time, prepending each new character to the front of the string. The strings are labeled from 1 to n, where the string with length i is labeled si.",
        "exampleInputs1": "s = \"babab\"",
        "exampleOutputs1": "9",
        "exampleInputs2": "s = \"azbazbzaz\"",
        "exampleOutputs2": "14"
    },
    {
        "id": 2223,
        "title": "2223. Sum of Scores of Built Strings",
        "description": "You are given a character array keys containing unique characters and a string array values containing strings of length 2. You are also given another string array dictionary that contains all permitted original strings after decryption. You should implement a data structure that can encrypt or decrypt a 0-indexed string.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"Encrypter\", \"encrypt\", \"decrypt\"]"
    },
    {
        "id": 2227,
        "title": "2227. Encrypt and Decrypt Strings",
        "description": "Alice is a caretaker of n gardens and she wants to plant flowers to maximize the total beauty of all her gardens.",
        "exampleInputs1": "flowers = [1,3,1,1], newFlowers = 7, target = 6, full = 12, partial = 1",
        "exampleOutputs1": "14",
        "exampleInputs2": "flowers = [2,4,5,3], newFlowers = 10, target = 5, full = 2, partial = 6",
        "exampleOutputs2": "30"
    },
    {
        "id": 2234,
        "title": "2234. Maximum Total Beauty of the Gardens",
        "description": "You are given a 0-indexed binary string floor, which represents the colors of tiles on a floor:",
        "exampleInputs1": "floor = \"10110101\", numCarpets = 2, carpetLen = 2",
        "exampleOutputs1": "2",
        "exampleInputs2": "floor = \"11111\", numCarpets = 2, carpetLen = 3",
        "exampleOutputs2": "0"
    },
    {
        "id": 2209,
        "title": "2209. Minimum White Tiles After Covering With Carpets",
        "description": "You are given a 0-indexed string s. You are also given a 0-indexed string queryCharacters of length k and a 0-indexed array of integer indices queryIndices of length k, both of which are used to describe k queries.",
        "exampleInputs1": "s = \"babacc\", queryCharacters = \"bcb\", queryIndices = [1,3,3]",
        "exampleOutputs1": "[3,3,4]",
        "exampleInputs2": "s = \"abyzz\", queryCharacters = \"aa\", queryIndices = [2,1]",
        "exampleOutputs2": "[2,3]"
    },
    {
        "id": 2213,
        "title": "2213. Longest Substring of One Repeating Character",
        "description": "There are n piles of coins on a table. Each pile consists of a positive number of coins of assorted denominations.",
        "exampleInputs1": "piles = [[1,100,3],[7,8,9]], k = 2",
        "exampleOutputs1": "101",
        "exampleInputs2": "piles = [[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]], k = 7",
        "exampleOutputs2": "706"
    },
    {
        "id": 2218,
        "title": "2218. Maximum Value of K Coins From Piles",
        "description": "You are building a string s of length n one character at a time, prepending each new character to the front of the string. The strings are labeled from 1 to n, where the string with length i is labeled si.",
        "exampleInputs1": "s = \"babab\"",
        "exampleOutputs1": "9",
        "exampleInputs2": "s = \"azbazbzaz\"",
        "exampleOutputs2": "14"
    },
    {
        "id": 2223,
        "title": "2223. Sum of Scores of Built Strings",
        "description": "You are given a character array keys containing unique characters and a string array values containing strings of length 2. You are also given another string array dictionary that contains all permitted original strings after decryption. You should implement a data structure that can encrypt or decrypt a 0-indexed string.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"Encrypter\", \"encrypt\", \"decrypt\"]"
    },
    {
        "id": 2227,
        "title": "2227. Encrypt and Decrypt Strings",
        "description": "Alice is a caretaker of n gardens and she wants to plant flowers to maximize the total beauty of all her gardens.",
        "exampleInputs1": "flowers = [1,3,1,1], newFlowers = 7, target = 6, full = 12, partial = 1",
        "exampleOutputs1": "14",
        "exampleInputs2": "flowers = [2,4,5,3], newFlowers = 10, target = 5, full = 2, partial = 6",
        "exampleOutputs2": "30"
    },
    {
        "id": 2234,
        "title": "2234. Maximum Total Beauty of the Gardens",
        "description": "There is an undirected graph with n nodes, numbered from 0 to n - 1.",
        "exampleInputs1": "scores = [5,2,9,8,4], edges = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]",
        "exampleOutputs1": "24",
        "exampleInputs2": "scores = [9,20,6,4,11,12], edges = [[0,3],[5,3],[2,4],[1,3]]",
        "exampleOutputs2": "-1"
    },
    {
        "id": 2242,
        "title": "2242. Maximum Score of a Node Sequence",
        "description": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.",
        "exampleInputs1": "parent = [-1,0,0,1,1,2], s = \"abacbe\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "parent = [-1,0,0,0], s = \"aabc\"",
        "exampleOutputs2": "3"
    },
    {
        "id": 2246,
        "title": "2246. Longest Path With Different Adjacent Characters",
        "description": "Alice is a caretaker of n gardens and she wants to plant flowers to maximize the total beauty of all her gardens.",
        "exampleInputs1": "flowers = [1,3,1,1], newFlowers = 7, target = 6, full = 12, partial = 1",
        "exampleOutputs1": "14",
        "exampleInputs2": "flowers = [2,4,5,3], newFlowers = 10, target = 5, full = 2, partial = 6",
        "exampleOutputs2": "30"
    },
    {
        "id": 2234,
        "title": "2234. Maximum Total Beauty of the Gardens",
        "description": "There is an undirected graph with n nodes, numbered from 0 to n - 1.",
        "exampleInputs1": "scores = [5,2,9,8,4], edges = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]",
        "exampleOutputs1": "24",
        "exampleInputs2": "scores = [9,20,6,4,11,12], edges = [[0,3],[5,3],[2,4],[1,3]]",
        "exampleOutputs2": "-1"
    },
    {
        "id": 2242,
        "title": "2242. Maximum Score of a Node Sequence",
        "description": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.",
        "exampleInputs1": "parent = [-1,0,0,1,1,2], s = \"abacbe\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "parent = [-1,0,0,0], s = \"aabc\"",
        "exampleOutputs2": "3"
    },
    {
        "id": 2246,
        "title": "2246. Longest Path With Different Adjacent Characters",
        "description": "You are given a 0-indexed 2D integer array flowers, where flowers[i] = [starti, endi] means the ith flower will be in full bloom from starti to endi (inclusive). You are also given a 0-indexed integer array persons of size n, where persons[i] is the time that the ith person will arrive to see the flowers.",
        "exampleInputs1": "flowers = [[1,6],[3,7],[9,12],[4,13]], persons = [2,3,7,11]",
        "exampleOutputs1": "[1,2,2,2]",
        "exampleInputs2": "flowers = [[1,10],[3,3]], persons = [3,3,2]",
        "exampleOutputs2": "[2,2,1]"
    },
    {
        "id": 2251,
        "title": "2251. Number of Flowers in Full Bloom",
        "description": "You are building a string s of length n one character at a time, prepending each new character to the front of the string. The strings are labeled from 1 to n, where the string with length i is labeled si.",
        "exampleInputs1": "s = \"babab\"",
        "exampleOutputs1": "9",
        "exampleInputs2": "s = \"azbazbzaz\"",
        "exampleOutputs2": "14"
    },
    {
        "id": 2223,
        "title": "2223. Sum of Scores of Built Strings",
        "description": "You are given a character array keys containing unique characters and a string array values containing strings of length 2. You are also given another string array dictionary that contains all permitted original strings after decryption. You should implement a data structure that can encrypt or decrypt a 0-indexed string.",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"Encrypter\", \"encrypt\", \"decrypt\"]"
    },
    {
        "id": 2227,
        "title": "2227. Encrypt and Decrypt Strings",
        "description": "Alice is a caretaker of n gardens and she wants to plant flowers to maximize the total beauty of all her gardens.",
        "exampleInputs1": "flowers = [1,3,1,1], newFlowers = 7, target = 6, full = 12, partial = 1",
        "exampleOutputs1": "14",
        "exampleInputs2": "flowers = [2,4,5,3], newFlowers = 10, target = 5, full = 2, partial = 6",
        "exampleOutputs2": "30"
    },
    {
        "id": 2234,
        "title": "2234. Maximum Total Beauty of the Gardens",
        "description": "There is an undirected graph with n nodes, numbered from 0 to n - 1.",
        "exampleInputs1": "scores = [5,2,9,8,4], edges = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]",
        "exampleOutputs1": "24",
        "exampleInputs2": "scores = [9,20,6,4,11,12], edges = [[0,3],[5,3],[2,4],[1,3]]",
        "exampleOutputs2": "-1"
    },
    {
        "id": 2242,
        "title": "2242. Maximum Score of a Node Sequence",
        "description": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.",
        "exampleInputs1": "parent = [-1,0,0,1,1,2], s = \"abacbe\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "parent = [-1,0,0,0], s = \"aabc\"",
        "exampleOutputs2": "3"
    },
    {
        "id": 2246,
        "title": "2246. Longest Path With Different Adjacent Characters",
        "description": "You are given a 0-indexed 2D integer array flowers, where flowers[i] = [starti, endi] means the ith flower will be in full bloom from starti to endi (inclusive). You are also given a 0-indexed integer array persons of size n, where persons[i] is the time that the ith person will arrive to see the flowers.",
        "exampleInputs1": "flowers = [[1,6],[3,7],[9,12],[4,13]], persons = [2,3,7,11]",
        "exampleOutputs1": "[1,2,2,2]",
        "exampleInputs2": "flowers = [[1,10],[3,3]], persons = [3,3,2]",
        "exampleOutputs2": "[2,2,1]"
    },
    {
        "id": 2251,
        "title": "2251. Number of Flowers in Full Bloom",
        "description": "You are given a 0-indexed 2D integer array grid of size m x n which represents a field. Each cell has one of three values:",
        "exampleInputs1": "grid = [[0,2,0,0,0,0,0],[0,0,0,2,2,1,0],[0,2,0,0,1,2,0],[0,0,2,2,2,0,2],[0,0,0,0,0,0,0]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "grid = [[0,0,0,0],[0,1,2,0],[0,2,0,0]]",
        "exampleOutputs2": "-1",
        "exampleInputs3": "grid = [[0,0,0],[2,2,0],[1,2,0]]",
        "exampleOutputs3": "1000000000"
    },
    {
        "id": 2258,
        "title": "2258. Escape the Spreading Fire",
        "description": "The appeal of a string is the number of distinct characters found in the string.",
        "exampleInputs1": "s = \"abbca\"",
        "exampleOutputs1": "28",
        "exampleInputs2": "s = \"code\"",
        "exampleOutputs2": "20"
    },
    {
        "id": 2262,
        "title": "2262. Total Appeal of A String",
        "description": "You are given a 0-indexed 2D integer array flowers, where flowers[i] = [starti, endi] means the ith flower will be in full bloom from starti to endi (inclusive). You are also given a 0-indexed integer array persons of size n, where persons[i] is the time that the ith person will arrive to see the flowers.",
        "exampleInputs1": "flowers = [[1,6],[3,7],[9,12],[4,13]], persons = [2,3,7,11]",
        "exampleOutputs1": "[1,2,2,2]",
        "exampleInputs2": "flowers = [[1,10],[3,3]], persons = [3,3,2]",
        "exampleOutputs2": "[2,2,1]"
    },
    {
        "id": 2251,
        "title": "2251. Number of Flowers in Full Bloom",
        "description": "You are given a 0-indexed 2D integer array grid of size m x n which represents a field. Each cell has one of three values:",
        "exampleInputs1": "grid = [[0,2,0,0,0,0,0],[0,0,0,2,2,1,0],[0,2,0,0,1,2,0],[0,0,2,2,2,0,2],[0,0,0,0,0,0,0]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "grid = [[0,0,0,0],[0,1,2,0],[0,2,0,0]]",
        "exampleOutputs2": "-1",
        "exampleInputs3": "grid = [[0,0,0],[2,2,0],[1,2,0]]",
        "exampleOutputs3": "1000000000"
    },
    {
        "id": 2258,
        "title": "2258. Escape the Spreading Fire",
        "description": "The appeal of a string is the number of distinct characters found in the string.",
        "exampleInputs1": "s = \"abbca\"",
        "exampleOutputs1": "28",
        "exampleInputs2": "s = \"code\"",
        "exampleOutputs2": "20"
    },
    {
        "id": 2262,
        "title": "2262. Total Appeal of A String",
        "description": "A parentheses string is a non-empty string consisting only of '(' and ')'. It is valid if any of the following conditions is true:",
        "exampleInputs1": "grid = [[\"(\",\"(\",\"(\"],[\")\",\"(\",\")\"],[\"(\",\"(\",\")\"],[\"(\",\"(\",\")\"]]",
        "exampleOutputs1": "true",
        "exampleInputs2": "grid = [[\")\",\")\"],[\"(\",\"(\"]]",
        "exampleOutputs2": "false"
    },
    {
        "id": 2267,
        "title": "2267.  Check if There Is a Valid Parentheses String Path",
        "description": "There is an undirected graph with n nodes, numbered from 0 to n - 1.",
        "exampleInputs1": "scores = [5,2,9,8,4], edges = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]",
        "exampleOutputs1": "24",
        "exampleInputs2": "scores = [9,20,6,4,11,12], edges = [[0,3],[5,3],[2,4],[1,3]]",
        "exampleOutputs2": "-1"
    },
    {
        "id": 2242,
        "title": "2242. Maximum Score of a Node Sequence",
        "description": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.",
        "exampleInputs1": "parent = [-1,0,0,1,1,2], s = \"abacbe\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "parent = [-1,0,0,0], s = \"aabc\"",
        "exampleOutputs2": "3"
    },
    {
        "id": 2246,
        "title": "2246. Longest Path With Different Adjacent Characters",
        "description": "You are given a 0-indexed 2D integer array flowers, where flowers[i] = [starti, endi] means the ith flower will be in full bloom from starti to endi (inclusive). You are also given a 0-indexed integer array persons of size n, where persons[i] is the time that the ith person will arrive to see the flowers.",
        "exampleInputs1": "flowers = [[1,6],[3,7],[9,12],[4,13]], persons = [2,3,7,11]",
        "exampleOutputs1": "[1,2,2,2]",
        "exampleInputs2": "flowers = [[1,10],[3,3]], persons = [3,3,2]",
        "exampleOutputs2": "[2,2,1]"
    },
    {
        "id": 2251,
        "title": "2251. Number of Flowers in Full Bloom",
        "description": "You are given a 0-indexed 2D integer array grid of size m x n which represents a field. Each cell has one of three values:",
        "exampleInputs1": "grid = [[0,2,0,0,0,0,0],[0,0,0,2,2,1,0],[0,2,0,0,1,2,0],[0,0,2,2,2,0,2],[0,0,0,0,0,0,0]]",
        "exampleOutputs1": "3",
        "exampleInputs2": "grid = [[0,0,0,0],[0,1,2,0],[0,2,0,0]]",
        "exampleOutputs2": "-1",
        "exampleInputs3": "grid = [[0,0,0],[2,2,0],[1,2,0]]",
        "exampleOutputs3": "1000000000"
    },
    {
        "id": 2258,
        "title": "2258. Escape the Spreading Fire",
        "description": "The appeal of a string is the number of distinct characters found in the string.",
        "exampleInputs1": "s = \"abbca\"",
        "exampleOutputs1": "28",
        "exampleInputs2": "s = \"code\"",
        "exampleOutputs2": "20"
    },
    {
        "id": 2262,
        "title": "2262. Total Appeal of A String",
        "description": "A parentheses string is a non-empty string consisting only of '(' and ')'. It is valid if any of the following conditions is true:",
        "exampleInputs1": "grid = [[\"(\",\"(\",\"(\"],[\")\",\"(\",\")\"],[\"(\",\"(\",\")\"],[\"(\",\"(\",\")\"]]",
        "exampleOutputs1": "true",
        "exampleInputs2": "grid = [[\")\",\")\"],[\"(\",\"(\"]]",
        "exampleOutputs2": "false"
    },
    {
        "id": 2267,
        "title": "2267.  Check if There Is a Valid Parentheses String Path",
        "description": "The variance of a string is defined as the largest difference between the number of occurrences of any 2 characters present in the string. Note the two characters may or may not be the same.",
        "exampleInputs1": "s = \"aababbb\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "s = \"abcde\"",
        "exampleOutputs2": "0"
    },
    {
        "id": 2272,
        "title": "2272. Substring With Largest Variance",
        "description": "Given an empty set of intervals, implement a data structure that can:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"CountIntervals\", \"add\", \"add\", \"count\", \"add\", \"count\"]"
    },
    {
        "id": 2276,
        "title": "2276. Count Integers in Intervals",
        "description": "A parentheses string is a non-empty string consisting only of '(' and ')'. It is valid if any of the following conditions is true:",
        "exampleInputs1": "grid = [[\"(\",\"(\",\"(\"],[\")\",\"(\",\")\"],[\"(\",\"(\",\")\"],[\"(\",\"(\",\")\"]]",
        "exampleOutputs1": "true",
        "exampleInputs2": "grid = [[\")\",\")\"],[\"(\",\"(\"]]",
        "exampleOutputs2": "false"
    },
    {
        "id": 2267,
        "title": "2267.  Check if There Is a Valid Parentheses String Path",
        "description": "The variance of a string is defined as the largest difference between the number of occurrences of any 2 characters present in the string. Note the two characters may or may not be the same.",
        "exampleInputs1": "s = \"aababbb\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "s = \"abcde\"",
        "exampleOutputs2": "0"
    },
    {
        "id": 2272,
        "title": "2272. Substring With Largest Variance",
        "description": "Given an empty set of intervals, implement a data structure that can:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"CountIntervals\", \"add\", \"add\", \"count\", \"add\", \"count\"]"
    },
    {
        "id": 2276,
        "title": "2276. Count Integers in Intervals",
        "description": "As the ruler of a kingdom, you have an army of wizards at your command.",
        "exampleInputs1": "strength = [1,3,1,2]",
        "exampleOutputs1": "44",
        "exampleInputs2": "strength = [5,4,6]",
        "exampleOutputs2": "213"
    },
    {
        "id": 2281,
        "title": "2281. Sum of Total Strength of Wizards",
        "description": "The appeal of a string is the number of distinct characters found in the string.",
        "exampleInputs1": "s = \"abbca\"",
        "exampleOutputs1": "28",
        "exampleInputs2": "s = \"code\"",
        "exampleOutputs2": "20"
    },
    {
        "id": 2262,
        "title": "2262. Total Appeal of A String",
        "description": "A parentheses string is a non-empty string consisting only of '(' and ')'. It is valid if any of the following conditions is true:",
        "exampleInputs1": "grid = [[\"(\",\"(\",\"(\"],[\")\",\"(\",\")\"],[\"(\",\"(\",\")\"],[\"(\",\"(\",\")\"]]",
        "exampleOutputs1": "true",
        "exampleInputs2": "grid = [[\")\",\")\"],[\"(\",\"(\"]]",
        "exampleOutputs2": "false"
    },
    {
        "id": 2267,
        "title": "2267.  Check if There Is a Valid Parentheses String Path",
        "description": "The variance of a string is defined as the largest difference between the number of occurrences of any 2 characters present in the string. Note the two characters may or may not be the same.",
        "exampleInputs1": "s = \"aababbb\"",
        "exampleOutputs1": "3",
        "exampleInputs2": "s = \"abcde\"",
        "exampleOutputs2": "0"
    },
    {
        "id": 2272,
        "title": "2272. Substring With Largest Variance",
        "description": "Given an empty set of intervals, implement a data structure that can:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"CountIntervals\", \"add\", \"add\", \"count\", \"add\", \"count\"]"
    },
    {
        "id": 2276,
        "title": "2276. Count Integers in Intervals",
        "description": "As the ruler of a kingdom, you have an army of wizards at your command.",
        "exampleInputs1": "strength = [1,3,1,2]",
        "exampleOutputs1": "44",
        "exampleInputs2": "strength = [5,4,6]",
        "exampleOutputs2": "213"
    },
    {
        "id": 2281,
        "title": "2281. Sum of Total Strength of Wizards",
        "description": "A concert hall has n rows numbered from 0 to n - 1, each with m seats, numbered from 0 to m - 1. You need to design a ticketing system that can allocate seats in the following cases:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"BookMyShow\", \"gather\", \"gather\", \"scatter\", \"scatter\"]"
    },
    {
        "id": 2286,
        "title": "2286. Booking Concert Tickets in Groups",
        "description": "You are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values:",
        "exampleInputs1": "grid = [[0,1,1],[1,1,0],[1,1,0]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2290,
        "title": "2290. Minimum Obstacle Removal to Reach Corner",
        "description": "You are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values:",
        "exampleInputs1": "grid = [[0,1,1],[1,1,0],[1,1,0]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2290,
        "title": "2290. Minimum Obstacle Removal to Reach Corner",
        "description": "As the ruler of a kingdom, you have an army of wizards at your command.",
        "exampleInputs1": "strength = [1,3,1,2]",
        "exampleOutputs1": "44",
        "exampleInputs2": "strength = [5,4,6]",
        "exampleOutputs2": "213"
    },
    {
        "id": 2281,
        "title": "2281. Sum of Total Strength of Wizards",
        "description": "A concert hall has n rows numbered from 0 to n - 1, each with m seats, numbered from 0 to m - 1. You need to design a ticketing system that can allocate seats in the following cases:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"BookMyShow\", \"gather\", \"gather\", \"scatter\", \"scatter\"]"
    },
    {
        "id": 2286,
        "title": "2286. Booking Concert Tickets in Groups",
        "description": "You are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values:",
        "exampleInputs1": "grid = [[0,1,1],[1,1,0],[1,1,0]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2290,
        "title": "2290. Minimum Obstacle Removal to Reach Corner",
        "description": "Design a text editor with a cursor that can do the following:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"TextEditor\", \"addText\", \"deleteText\", \"addText\", \"cursorRight\", \"cursorLeft\", \"deleteText\", \"cursorLeft\", \"cursorRight\"]"
    },
    {
        "id": 2296,
        "title": "2296. Design a Text Editor",
        "description": "Given an empty set of intervals, implement a data structure that can:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"CountIntervals\", \"add\", \"add\", \"count\", \"add\", \"count\"]"
    },
    {
        "id": 2276,
        "title": "2276. Count Integers in Intervals",
        "description": "As the ruler of a kingdom, you have an army of wizards at your command.",
        "exampleInputs1": "strength = [1,3,1,2]",
        "exampleOutputs1": "44",
        "exampleInputs2": "strength = [5,4,6]",
        "exampleOutputs2": "213"
    },
    {
        "id": 2281,
        "title": "2281. Sum of Total Strength of Wizards",
        "description": "A concert hall has n rows numbered from 0 to n - 1, each with m seats, numbered from 0 to m - 1. You need to design a ticketing system that can allocate seats in the following cases:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"BookMyShow\", \"gather\", \"gather\", \"scatter\", \"scatter\"]"
    },
    {
        "id": 2286,
        "title": "2286. Booking Concert Tickets in Groups",
        "description": "You are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values:",
        "exampleInputs1": "grid = [[0,1,1],[1,1,0],[1,1,0]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2290,
        "title": "2290. Minimum Obstacle Removal to Reach Corner",
        "description": "Design a text editor with a cursor that can do the following:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"TextEditor\", \"addText\", \"deleteText\", \"addText\", \"cursorRight\", \"cursorLeft\", \"deleteText\", \"cursorLeft\", \"cursorRight\"]"
    },
    {
        "id": 2296,
        "title": "2296. Design a Text Editor",
        "description": "You are given two strings s and sub. You are also given a 2D character array mappings where mappings[i] = [oldi, newi] indicates that you may replace any number of oldi characters of sub with newi. Each character in sub cannot be replaced more than once.",
        "exampleInputs1": "s = \"fool3e7bar\", sub = \"leet\", mappings = [[\"e\",\"3\"],[\"t\",\"7\"],[\"t\",\"8\"]]",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"fooleetbar\", sub = \"f00l\", mappings = [[\"o\",\"0\"]]",
        "exampleOutputs2": "false",
        "exampleInputs3": "s = \"Fool33tbaR\", sub = \"leetd\", mappings = [[\"e\",\"3\"],[\"t\",\"7\"],[\"t\",\"8\"],[\"d\",\"b\"],[\"p\",\"b\"]]",
        "exampleOutputs3": "true"
    },
    {
        "id": 2301,
        "title": "2301. Match Substring After Replacement",
        "description": "The score of an array is defined as the product of its sum and its length.",
        "exampleInputs1": "nums = [2,1,4,3,5], k = 10",
        "exampleOutputs1": "6",
        "exampleInputs2": "nums = [1,1,1], k = 5",
        "exampleOutputs2": "5"
    },
    {
        "id": 2302,
        "title": "2302. Count Subarrays With Score Less Than K",
        "description": "You are given an array of strings ideas that represents a list of names to be used in the process of naming a company. The process of naming a company is as follows:",
        "exampleInputs1": "ideas = [\"coffee\",\"donuts\",\"time\",\"toffee\"]",
        "exampleOutputs1": "6",
        "exampleInputs2": "ideas = [\"lack\",\"back\"]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2306,
        "title": "2306. Naming a Company",
        "description": "You are given two strings s and sub. You are also given a 2D character array mappings where mappings[i] = [oldi, newi] indicates that you may replace any number of oldi characters of sub with newi. Each character in sub cannot be replaced more than once.",
        "exampleInputs1": "s = \"fool3e7bar\", sub = \"leet\", mappings = [[\"e\",\"3\"],[\"t\",\"7\"],[\"t\",\"8\"]]",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"fooleetbar\", sub = \"f00l\", mappings = [[\"o\",\"0\"]]",
        "exampleOutputs2": "false",
        "exampleInputs3": "s = \"Fool33tbaR\", sub = \"leetd\", mappings = [[\"e\",\"3\"],[\"t\",\"7\"],[\"t\",\"8\"],[\"d\",\"b\"],[\"p\",\"b\"]]",
        "exampleOutputs3": "true"
    },
    {
        "id": 2301,
        "title": "2301. Match Substring After Replacement",
        "description": "The score of an array is defined as the product of its sum and its length.",
        "exampleInputs1": "nums = [2,1,4,3,5], k = 10",
        "exampleOutputs1": "6",
        "exampleInputs2": "nums = [1,1,1], k = 5",
        "exampleOutputs2": "5"
    },
    {
        "id": 2302,
        "title": "2302. Count Subarrays With Score Less Than K",
        "description": "You are given an array of strings ideas that represents a list of names to be used in the process of naming a company. The process of naming a company is as follows:",
        "exampleInputs1": "ideas = [\"coffee\",\"donuts\",\"time\",\"toffee\"]",
        "exampleOutputs1": "6",
        "exampleInputs2": "ideas = [\"lack\",\"back\"]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2306,
        "title": "2306. Naming a Company",
        "description": "You are given two integers m and n that represent the height and width of a rectangular piece of wood. You are also given a 2D integer array prices, where prices[i] = [hi, wi, pricei] indicates you can sell a rectangular piece of wood of height hi and width wi for pricei dollars.",
        "exampleInputs1": "m = 3, n = 5, prices = [[1,4,2],[2,2,7],[2,1,3]]",
        "exampleOutputs1": "19",
        "exampleInputs2": "m = 4, n = 6, prices = [[3,2,10],[1,4,2],[4,1,3]]",
        "exampleOutputs2": "32"
    },
    {
        "id": 2312,
        "title": "2312. Selling Pieces of Wood",
        "description": "Design a text editor with a cursor that can do the following:",
        "exampleInputs1": "Input",
        "exampleOutputs1": "[\"TextEditor\", \"addText\", \"deleteText\", \"addText\", \"cursorRight\", \"cursorLeft\", \"deleteText\", \"cursorLeft\", \"cursorRight\"]"
    },
    {
        "id": 2296,
        "title": "2296. Design a Text Editor",
        "description": "You are given two strings s and sub. You are also given a 2D character array mappings where mappings[i] = [oldi, newi] indicates that you may perform the following operation any number of times:",
        "exampleInputs1": "s = \"fool3e7bar\", sub = \"leet\", mappings = [[\"e\",\"3\"],[\"t\",\"7\"],[\"t\",\"8\"]]",
        "exampleOutputs1": "true",
        "exampleInputs2": "s = \"fooleetbar\", sub = \"f00l\", mappings = [[\"o\",\"0\"]]",
        "exampleOutputs2": "false",
        "exampleInputs3": "s = \"Fool33tbaR\", sub = \"leetd\", mappings = [[\"e\",\"3\"],[\"t\",\"7\"],[\"t\",\"8\"],[\"d\",\"b\"],[\"p\",\"b\"]]",
        "exampleOutputs3": "true"
    },
    {
        "id": 2301,
        "title": "2301. Match Substring After Replacement",
        "description": "The score of an array is defined as the product of its sum and its length.",
        "exampleInputs1": "nums = [2,1,4,3,5], k = 10",
        "exampleOutputs1": "6",
        "exampleInputs2": "nums = [1,1,1], k = 5",
        "exampleOutputs2": "5"
    },
    {
        "id": 2302,
        "title": "2302. Count Subarrays With Score Less Than K",
        "description": "You are given an array of strings ideas that represents a list of names to be used in the process of naming a company. The process of naming a company is as follows:",
        "exampleInputs1": "ideas = [\"coffee\",\"donuts\",\"time\",\"toffee\"]",
        "exampleOutputs1": "6",
        "exampleInputs2": "ideas = [\"lack\",\"back\"]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2306,
        "title": "2306. Naming a Company",
        "description": "You are given two integers m and n that represent the height and width of a rectangular piece of wood. You are also given a 2D integer array prices, where prices[i] = [hi, wi, pricei] indicates you can sell a rectangular piece of wood of height hi and width wi for pricei dollars.",
        "exampleInputs1": "m = 3, n = 5, prices = [[1,4,2],[2,2,7],[2,1,3]]",
        "exampleOutputs1": "19",
        "exampleInputs2": "m = 4, n = 6, prices = [[3,2,10],[1,4,2],[4,1,3]]",
        "exampleOutputs2": "32"
    },
    {
        "id": 2312,
        "title": "2312. Selling Pieces of Wood",
        "description": "You are given an integer n. You roll a fair 6-sided dice n times. Determine the total number of distinct sequences of rolls possible such that the following conditions are satisfied:",
        "exampleInputs1": "n = 4",
        "exampleOutputs1": "184",
        "exampleInputs2": "n = 2",
        "exampleOutputs2": "22"
    },
    {
        "id": 2318,
        "title": "2318. Number of Distinct Roll Sequences",
        "description": "You are given two 0-indexed integer arrays nums1 and nums2, both of length n.",
        "exampleInputs1": "nums1 = [60,60,60], nums2 = [10,90,10]",
        "exampleOutputs1": "210",
        "exampleInputs2": "nums1 = [20,40,20,70,30], nums2 = [50,20,50,40,20]",
        "exampleOutputs2": "220",
        "exampleInputs3": "nums1 = [7,11,13], nums2 = [1,1,1]",
        "exampleOutputs3": "31"
    },
    {
        "id": 2321,
        "title": "2321. Maximum Score Of Spliced Array",
        "description": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.",
        "exampleInputs1": "nums = [1,5,5,4,11], edges = [[0,1],[1,2],[1,3],[3,4]]",
        "exampleOutputs1": "9",
        "exampleInputs2": "nums = [5,5,2,4,4,2], edges = [[0,1],[1,2],[5,2],[4,3],[1,3]]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2322,
        "title": "2322. Minimum Score After Removals on a Tree",
        "description": "You are given an integer n. You roll a fair 6-sided dice n times. Determine the total number of distinct sequences of rolls possible such that the following conditions are satisfied:",
        "exampleInputs1": "n = 4",
        "exampleOutputs1": "184",
        "exampleInputs2": "n = 2",
        "exampleOutputs2": "22"
    },
    {
        "id": 2318,
        "title": "2318. Number of Distinct Roll Sequences",
        "description": "You are given two 0-indexed integer arrays nums1 and nums2, both of length n.",
        "exampleInputs1": "nums1 = [60,60,60], nums2 = [10,90,10]",
        "exampleOutputs1": "210",
        "exampleInputs2": "nums1 = [20,40,20,70,30], nums2 = [50,20,50,40,20]",
        "exampleOutputs2": "220",
        "exampleInputs3": "nums1 = [7,11,13], nums2 = [1,1,1]",
        "exampleOutputs3": "31"
    },
    {
        "id": 2321,
        "title": "2321. Maximum Score Of Spliced Array",
        "description": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.",
        "exampleInputs1": "nums = [1,5,5,4,11], edges = [[0,1],[1,2],[1,3],[3,4]]",
        "exampleOutputs1": "9",
        "exampleInputs2": "nums = [5,5,2,4,4,2], edges = [[0,1],[1,2],[5,2],[4,3],[1,3]]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2322,
        "title": "2322. Minimum Score After Removals on a Tree",
        "description": "You are given an m x n integer matrix grid, where you can move from a cell to any adjacent cell in all 4 directions.",
        "exampleInputs1": "grid = [[1,1],[3,4]]",
        "exampleOutputs1": "8",
        "exampleInputs2": "grid = [[1],[2]]",
        "exampleOutputs2": "3"
    },
    {
        "id": 2328,
        "title": "2328. Number of Increasing Paths in a Grid",
        "description": "You are given an array of strings ideas that represents a list of names to be used in the process of naming a company. The process of naming a company is as follows:",
        "exampleInputs1": "ideas = [\"coffee\",\"donuts\",\"time\",\"toffee\"]",
        "exampleOutputs1": "6",
        "exampleInputs2": "ideas = [\"lack\",\"back\"]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2306,
        "title": "2306. Naming a Company",
        "description": "You are given two integers m and n that represent the height and width of a rectangular piece of wood. You are also given a 2D integer array prices, where prices[i] = [hi, wi, pricei] indicates you can sell a rectangular piece of wood of height hi and width wi for pricei dollars.",
        "exampleInputs1": "m = 3, n = 5, prices = [[1,4,2],[2,2,7],[2,1,3]]",
        "exampleOutputs1": "19",
        "exampleInputs2": "m = 4, n = 6, prices = [[3,2,10],[1,4,2],[4,1,3]]",
        "exampleOutputs2": "32"
    },
    {
        "id": 2312,
        "title": "2312. Selling Pieces of Wood",
        "description": "You are given an integer n. You roll a fair 6-sided dice n times. Determine the total number of distinct sequences of rolls possible such that the following conditions are satisfied:",
        "exampleInputs1": "n = 4",
        "exampleOutputs1": "184",
        "exampleInputs2": "n = 2",
        "exampleOutputs2": "22"
    },
    {
        "id": 2318,
        "title": "2318. Number of Distinct Roll Sequences",
        "description": "You are given two 0-indexed integer arrays nums1 and nums2, both of length n.",
        "exampleInputs1": "nums1 = [60,60,60], nums2 = [10,90,10]",
        "exampleOutputs1": "210",
        "exampleInputs2": "nums1 = [20,40,20,70,30], nums2 = [50,20,50,40,20]",
        "exampleOutputs2": "220",
        "exampleInputs3": "nums1 = [7,11,13], nums2 = [1,1,1]",
        "exampleOutputs3": "31"
    },
    {
        "id": 2321,
        "title": "2321. Maximum Score Of Spliced Array",
        "description": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.",
        "exampleInputs1": "nums = [1,5,5,4,11], edges = [[0,1],[1,2],[1,3],[3,4]]",
        "exampleOutputs1": "9",
        "exampleInputs2": "nums = [5,5,2,4,4,2], edges = [[0,1],[1,2],[5,2],[4,3],[1,3]]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2322,
        "title": "2322. Minimum Score After Removals on a Tree",
        "description": "You are given an m x n integer matrix grid, where you can move from a cell to any adjacent cell in all 4 directions.",
        "exampleInputs1": "grid = [[1,1],[3,4]]",
        "exampleOutputs1": "8",
        "exampleInputs2": "grid = [[1],[2]]",
        "exampleOutputs2": "3"
    },
    {
        "id": 2328,
        "title": "2328. Number of Increasing Paths in a Grid",
        "description": "You are given an integer array nums and an integer threshold.",
        "exampleInputs1": "nums = [1,3,4,3,1], threshold = 6",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [6,5,6,5,8], threshold = 7",
        "exampleOutputs2": "1"
    },
    {
        "id": 2334,
        "title": "2334. Subarray With Elements Greater Than Varying Threshold",
        "description": "You are given two integers n and maxValue, which are used to describe an ideal array.",
        "exampleInputs1": "n = 2, maxValue = 5",
        "exampleOutputs1": "10",
        "exampleInputs2": "n = 5, maxValue = 3",
        "exampleOutputs2": "11"
    },
    {
        "id": 2338,
        "title": "2338. Count the Number of Ideal Arrays",
        "description": "You are given an m x n integer matrix grid, where you can move from a cell to any adjacent cell in all 4 directions.",
        "exampleInputs1": "grid = [[1,1],[3,4]]",
        "exampleOutputs1": "8",
        "exampleInputs2": "grid = [[1],[2]]",
        "exampleOutputs2": "3"
    },
    {
        "id": 2328,
        "title": "2328. Number of Increasing Paths in a Grid",
        "description": "You are given an integer array nums and an integer threshold.",
        "exampleInputs1": "nums = [1,3,4,3,1], threshold = 6",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [6,5,6,5,8], threshold = 7",
        "exampleOutputs2": "1"
    },
    {
        "id": 2334,
        "title": "2334. Subarray With Elements Greater Than Varying Threshold",
        "description": "You are given two integers n and maxValue, which are used to describe an ideal array.",
        "exampleInputs1": "n = 2, maxValue = 5",
        "exampleOutputs1": "10",
        "exampleInputs2": "n = 5, maxValue = 3",
        "exampleOutputs2": "11"
    },
    {
        "id": 2338,
        "title": "2338. Count the Number of Ideal Arrays",
        "description": "You are given two positive integer arrays nums and numsDivide. You can delete any number of elements from nums.",
        "exampleInputs1": "nums = [2,3,2,4,3], numsDivide = [9,6,9,3,15]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [4,3,6], numsDivide = [8,2,6,10]",
        "exampleOutputs2": "-1"
    },
    {
        "id": 2344,
        "title": "2344. Minimum Deletions to Make Array Divisible",
        "description": "You are given an integer array nums and an integer threshold.",
        "exampleInputs1": "nums = [1,3,4,3,1], threshold = 6",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [6,5,6,5,8], threshold = 7",
        "exampleOutputs2": "1"
    },
    {
        "id": 2334,
        "title": "2334. Subarray With Elements Greater Than Varying Threshold",
        "description": "You are given two integers n and maxValue, which are used to describe an ideal array.",
        "exampleInputs1": "n = 2, maxValue = 5",
        "exampleOutputs1": "10",
        "exampleInputs2": "n = 5, maxValue = 3",
        "exampleOutputs2": "11"
    },
    {
        "id": 2338,
        "title": "2338. Count the Number of Ideal Arrays",
        "description": "You are given two positive integer arrays nums and numsDivide. You can delete any number of elements from nums.",
        "exampleInputs1": "nums = [2,3,2,4,3], numsDivide = [9,6,9,3,15]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [4,3,6], numsDivide = [8,2,6,10]",
        "exampleOutputs2": "-1"
    },
    {
        "id": 2344,
        "title": "2344. Minimum Deletions to Make Array Divisible",
        "description": "You are given an integer array rolls of length n and an integer k. You roll a k sided dice numbered from 1 to k, n times, where the result of the ith roll is rolls[i].",
        "exampleInputs1": "rolls = [4,2,1,2,3,3,2,4,1], k = 4",
        "exampleOutputs1": "3",
        "exampleInputs2": "rolls = [1,1,2,2], k = 2",
        "exampleOutputs2": "2",
        "exampleInputs3": "rolls = [1,1,3,2,2,2,3,3], k = 4",
        "exampleOutputs3": "1"
    },
    {
        "id": 2350,
        "title": "2350. Shortest Impossible Sequence of Rolls",
        "description": "You are given two integers n and maxValue, which are used to describe an ideal array.",
        "exampleInputs1": "n = 2, maxValue = 5",
        "exampleOutputs1": "10",
        "exampleInputs2": "n = 5, maxValue = 3",
        "exampleOutputs2": "11"
    },
    {
        "id": 2338,
        "title": "2338. Count the Number of Ideal Arrays",
        "description": "You are given two positive integer arrays nums and numsDivide. You can delete any number of elements from nums.",
        "exampleInputs1": "nums = [2,3,2,4,3], numsDivide = [9,6,9,3,15]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [4,3,6], numsDivide = [8,2,6,10]",
        "exampleOutputs2": "-1"
    },
    {
        "id": 2344,
        "title": "2344. Minimum Deletions to Make Array Divisible",
        "description": "You are given an integer array rolls of length n and an integer k. You roll a k sided dice numbered from 1 to k, n times, where the result of the ith roll is rolls[i].",
        "exampleInputs1": "rolls = [4,2,1,2,3,3,2,4,1], k = 4",
        "exampleOutputs1": "3",
        "exampleInputs2": "rolls = [1,1,2,2], k = 2",
        "exampleOutputs2": "2",
        "exampleInputs3": "rolls = [1,1,3,2,2,2,3,3], k = 4",
        "exampleOutputs3": "1"
    },
    {
        "id": 2350,
        "title": "2350. Shortest Impossible Sequence of Rolls",
        "description": "You are given a 0-indexed positive integer array nums and a positive integer k.",
        "exampleInputs1": "nums = [1,2,3,1], k = 3",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [5,1,1], k = 10",
        "exampleOutputs2": "0"
    },
    {
        "id": 2354,
        "title": "2354. Number of Excellent Pairs",
        "description": "You are given two positive integer arrays nums and numsDivide. You can delete any number of elements from nums.",
        "exampleInputs1": "nums = [2,3,2,4,3], numsDivide = [9,6,9,3,15]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [4,3,6], numsDivide = [8,2,6,10]",
        "exampleOutputs2": "-1"
    },
    {
        "id": 2344,
        "title": "2344. Minimum Deletions to Make Array Divisible",
        "description": "You are given an integer array rolls of length n and an integer k. You roll a k sided dice numbered from 1 to k, n times, where the result of the ith roll is rolls[i].",
        "exampleInputs1": "rolls = [4,2,1,2,3,3,2,4,1], k = 4",
        "exampleOutputs1": "3",
        "exampleInputs2": "rolls = [1,1,2,2], k = 2",
        "exampleOutputs2": "2",
        "exampleInputs3": "rolls = [1,1,3,2,2,2,3,3], k = 4",
        "exampleOutputs3": "1"
    },
    {
        "id": 2350,
        "title": "2350. Shortest Impossible Sequence of Rolls",
        "description": "You are given a 0-indexed positive integer array nums and a positive integer k.",
        "exampleInputs1": "nums = [1,2,3,1], k = 3",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [5,1,1], k = 10",
        "exampleOutputs2": "0"
    },
    {
        "id": 2354,
        "title": "2354. Number of Excellent Pairs",
        "description": "You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.",
        "exampleInputs1": "edges = [3,3,4,2,3]",
        "exampleOutputs1": "3",
        "exampleInputs2": "edges = [2,-1,3,1]",
        "exampleOutputs2": "-1"
    },
    {
        "id": 2360,
        "title": "2360. Longest Cycle in a Graph",
        "description": "You are given an integer array rolls of length n and an integer k. You roll a k sided dice numbered from 1 to k, n times, where the result of the ith roll is rolls[i].",
        "exampleInputs1": "rolls = [4,2,1,2,3,3,2,4,1], k = 4",
        "exampleOutputs1": "3",
        "exampleInputs2": "rolls = [1,1,2,2], k = 2",
        "exampleOutputs2": "2",
        "exampleInputs3": "rolls = [1,1,3,2,2,2,3,3], k = 4",
        "exampleOutputs3": "1"
    },
    {
        "id": 2350,
        "title": "2350. Shortest Impossible Sequence of Rolls",
        "description": "You are given a 0-indexed positive integer array nums and a positive integer k.",
        "exampleInputs1": "nums = [1,2,3,1], k = 3",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [5,1,1], k = 10",
        "exampleOutputs2": "0"
    },
    {
        "id": 2354,
        "title": "2354. Number of Excellent Pairs",
        "description": "You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.",
        "exampleInputs1": "edges = [3,3,4,2,3]",
        "exampleOutputs1": "3",
        "exampleInputs2": "edges = [2,-1,3,1]",
        "exampleOutputs2": "-1"
    },
    {
        "id": 2360,
        "title": "2360. Longest Cycle in a Graph",
        "description": "You are given a 0-indexed integer array nums. In one operation you can replace any element of the array with any two elements that sum to it.",
        "exampleInputs1": "nums = [3,9,3]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,2,3,4,5]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2366,
        "title": "2366. Minimum Replacements to Sort the Array",
        "description": "You are given an integer array rolls of length n and an integer k. You roll a k sided dice numbered from 1 to k, n times, where the result of the ith roll is rolls[i].",
        "exampleInputs1": "rolls = [4,2,1,2,3,3,2,4,1], k = 4",
        "exampleOutputs1": "3",
        "exampleInputs2": "rolls = [1,1,2,2], k = 2",
        "exampleOutputs2": "2",
        "exampleInputs3": "rolls = [1,1,3,2,2,2,3,3], k = 4",
        "exampleOutputs3": "1"
    },
    {
        "id": 2350,
        "title": "2350. Shortest Impossible Sequence of Rolls",
        "description": "You are given a 0-indexed positive integer array nums and a positive integer k.",
        "exampleInputs1": "nums = [1,2,3,1], k = 3",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [5,1,1], k = 10",
        "exampleOutputs2": "0"
    },
    {
        "id": 2354,
        "title": "2354. Number of Excellent Pairs",
        "description": "You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.",
        "exampleInputs1": "edges = [3,3,4,2,3]",
        "exampleOutputs1": "3",
        "exampleInputs2": "edges = [2,-1,3,1]",
        "exampleOutputs2": "-1"
    },
    {
        "id": 2360,
        "title": "2360. Longest Cycle in a Graph",
        "description": "You are given a 0-indexed integer array nums. In one operation you can replace any element of the array with any two elements that sum to it.",
        "exampleInputs1": "nums = [3,9,3]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,2,3,4,5]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2366,
        "title": "2366. Minimum Replacements to Sort the Array",
        "description": "You are given a 0-indexed positive integer array nums and a positive integer k.",
        "exampleInputs1": "nums = [1,2,3,1], k = 3",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [5,1,1], k = 10",
        "exampleOutputs2": "0"
    },
    {
        "id": 2354,
        "title": "2354. Number of Excellent Pairs",
        "description": "You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.",
        "exampleInputs1": "edges = [3,3,4,2,3]",
        "exampleOutputs1": "3",
        "exampleInputs2": "edges = [2,-1,3,1]",
        "exampleOutputs2": "-1"
    },
    {
        "id": 2360,
        "title": "2360. Longest Cycle in a Graph",
        "description": "You are given a 0-indexed integer array nums. In one operation you can replace any element of the array with any two elements that sum to it.",
        "exampleInputs1": "nums = [3,9,3]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,2,3,4,5]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2366,
        "title": "2366. Minimum Replacements to Sort the Array",
        "description": "We call a positive integer special if all of its digits are distinct.",
        "exampleInputs1": "n = 20",
        "exampleOutputs1": "19",
        "exampleInputs2": "n = 5",
        "exampleOutputs2": "5",
        "exampleInputs3": "n = 135",
        "exampleOutputs3": "110"
    },
    {
        "id": 2376,
        "title": "2376. Count Special Integers",
        "description": "You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.",
        "exampleInputs1": "edges = [3,3,4,2,3]",
        "exampleOutputs1": "3",
        "exampleInputs2": "edges = [2,-1,3,1]",
        "exampleOutputs2": "-1"
    },
    {
        "id": 2360,
        "title": "2360. Longest Cycle in a Graph",
        "description": "You are given a 0-indexed integer array nums. In one operation you can replace any element of the array with any two elements that sum to it.",
        "exampleInputs1": "nums = [3,9,3]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,2,3,4,5]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2366,
        "title": "2366. Minimum Replacements to Sort the Array",
        "description": "We call a positive integer special if all of its digits are distinct.",
        "exampleInputs1": "n = 20",
        "exampleOutputs1": "19",
        "exampleInputs2": "n = 5",
        "exampleOutputs2": "5",
        "exampleInputs3": "n = 135",
        "exampleOutputs3": "110"
    },
    {
        "id": 2376,
        "title": "2376. Count Special Integers",
        "description": "You are given two 0-indexed integer arrays nums and removeQueries, both of length n. For the ith query, the element in nums at the index removeQueries[i] is removed, splitting nums into different segments.",
        "exampleInputs1": "nums = [1,2,5,6,1], removeQueries = [0,3,2,4,1]",
        "exampleOutputs1": "[14,7,2,2,0]",
        "exampleInputs2": "nums = [3,2,11,1], removeQueries = [3,2,1,0]",
        "exampleOutputs2": "[16,5,3,0]"
    },
    {
        "id": 2382,
        "title": "2382. Maximum Segment Sum After Removals",
        "description": "You are given a 0-indexed integer array nums. In one operation you can replace any element of the array with any two elements that sum to it.",
        "exampleInputs1": "nums = [3,9,3]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,2,3,4,5]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2366,
        "title": "2366. Minimum Replacements to Sort the Array",
        "description": "We call a positive integer special if all of its digits are distinct.",
        "exampleInputs1": "n = 20",
        "exampleOutputs1": "19",
        "exampleInputs2": "n = 5",
        "exampleOutputs2": "5",
        "exampleInputs3": "n = 135",
        "exampleOutputs3": "110"
    },
    {
        "id": 2376,
        "title": "2376. Count Special Integers",
        "description": "You are given two 0-indexed integer arrays nums and removeQueries, both of length n. For the ith query, the element in nums at the index removeQueries[i] is removed, splitting nums into different segments.",
        "exampleInputs1": "nums = [1,2,5,6,1], removeQueries = [0,3,2,4,1]",
        "exampleOutputs1": "[14,7,2,2,0]",
        "exampleInputs2": "nums = [3,2,11,1], removeQueries = [3,2,1,0]",
        "exampleOutputs2": "[16,5,3,0]"
    },
    {
        "id": 2382,
        "title": "2382. Maximum Segment Sum After Removals",
        "description": "You are given an integer array nums and a positive integer k. You can choose any subsequence of the array and sum all of its elements together.",
        "exampleInputs1": "nums = [2,4,-2], k = 5",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,-2,3,4,-10,12], k = 16",
        "exampleOutputs2": "10"
    },
    {
        "id": 2386,
        "title": "2386. Find the K-Sum of an Array",
        "description": "We call a positive integer special if all of its digits are distinct.",
        "exampleInputs1": "n = 20",
        "exampleOutputs1": "19",
        "exampleInputs2": "n = 5",
        "exampleOutputs2": "5",
        "exampleInputs3": "n = 135",
        "exampleOutputs3": "110"
    },
    {
        "id": 2376,
        "title": "2376. Count Special Integers",
        "description": "You are given two 0-indexed integer arrays nums and removeQueries, both of length n. For the ith query, the element in nums at the index removeQueries[i] is removed, splitting nums into different segments.",
        "exampleInputs1": "nums = [1,2,5,6,1], removeQueries = [0,3,2,4,1]",
        "exampleOutputs1": "[14,7,2,2,0]",
        "exampleInputs2": "nums = [3,2,11,1], removeQueries = [3,2,1,0]",
        "exampleOutputs2": "[16,5,3,0]"
    },
    {
        "id": 2382,
        "title": "2382. Maximum Segment Sum After Removals",
        "description": "You are given an integer array nums and a positive integer k. You can choose any subsequence of the array and sum all of its elements together.",
        "exampleInputs1": "nums = [2,4,-2], k = 5",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,-2,3,4,-10,12], k = 16",
        "exampleOutputs2": "10"
    },
    {
        "id": 2386,
        "title": "2386. Find the K-Sum of an Array",
        "description": "You are given a positive integer k. You are also given:",
        "exampleInputs1": "k = 3, rowConditions = [[1,2],[3,2]], colConditions = [[2,1],[3,2]]",
        "exampleOutputs1": "[[3,0,0],[0,0,1],[0,2,0]]",
        "exampleInputs2": "k = 3, rowConditions = [[1,2],[2,3],[3,1],[2,3]], colConditions = [[2,1]]",
        "exampleOutputs2": "[]"
    },
    {
        "id": 2392,
        "title": "2392. Build a Matrix With Conditions",
        "description": "You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.",
        "exampleInputs1": "edges = [3,3,4,2,3]",
        "exampleOutputs1": "3",
        "exampleInputs2": "edges = [2,-1,3,1]",
        "exampleOutputs2": "-1"
    },
    {
        "id": 2360,
        "title": "2360. Longest Cycle in a Graph",
        "description": "You are given a 0-indexed integer array nums. In one operation you can replace any element of the array with any two elements that sum to it.",
        "exampleInputs1": "nums = [3,9,3]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,2,3,4,5]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2366,
        "title": "2366. Minimum Replacements to Sort the Array",
        "description": "We call a positive integer special if all of its digits are distinct.",
        "exampleInputs1": "n = 20",
        "exampleOutputs1": "19",
        "exampleInputs2": "n = 5",
        "exampleOutputs2": "5",
        "exampleInputs3": "n = 135",
        "exampleOutputs3": "110"
    },
    {
        "id": 2376,
        "title": "2376. Count Special Integers",
        "description": "You are given two 0-indexed integer arrays nums and removeQueries, both of length n. For the ith query, the element in nums at the index removeQueries[i] is removed, splitting nums into different segments.",
        "exampleInputs1": "nums = [1,2,5,6,1], removeQueries = [0,3,2,4,1]",
        "exampleOutputs1": "[14,7,2,2,0]",
        "exampleInputs2": "nums = [3,2,11,1], removeQueries = [3,2,1,0]",
        "exampleOutputs2": "[16,5,3,0]"
    },
    {
        "id": 2382,
        "title": "2382. Maximum Segment Sum After Removals",
        "description": "You are given an integer array nums and a positive integer k. You can choose any subsequence of the array and sum all of its elements together.",
        "exampleInputs1": "nums = [2,4,-2], k = 5",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,-2,3,4,-10,12], k = 16",
        "exampleOutputs2": "10"
    },
    {
        "id": 2386,
        "title": "2386. Find the K-Sum of an Array",
        "description": "You are given a positive integer k. You are also given:",
        "exampleInputs1": "k = 3, rowConditions = [[1,2],[3,2]], colConditions = [[2,1],[3,2]]",
        "exampleOutputs1": "[[3,0,0],[0,0,1],[0,2,0]]",
        "exampleInputs2": "k = 3, rowConditions = [[1,2],[2,3],[3,1],[2,3]], colConditions = [[2,1]]",
        "exampleOutputs2": "[]"
    },
    {
        "id": 2392,
        "title": "2392. Build a Matrix With Conditions",
        "description": "You have n robots. You are given two 0-indexed integer arrays, chargeTimes and runningCosts, both of length n. The ith robot costs chargeTimes[i] units to charge and costs runningCosts[i] units to run. You are also given an integer budget.",
        "exampleInputs1": "chargeTimes = [3,6,1,3,4], runningCosts = [2,1,3,4,5], budget = 25",
        "exampleOutputs1": "3",
        "exampleInputs2": "chargeTimes = [11,12,19], runningCosts = [10,8,7], budget = 19",
        "exampleOutputs2": "0"
    },
    {
        "id": 2398,
        "title": "2398. Maximum Number of Robots Within Budget",
        "description": "You are given an integer n. There are n rooms numbered from 0 to n - 1.",
        "exampleInputs1": "n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]]",
        "exampleOutputs1": "0",
        "exampleInputs2": "n = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]]",
        "exampleOutputs2": "1"
    },
    {
        "id": 2402,
        "title": "2402. Meeting Rooms III",
        "description": "You are given a positive integer k. You are also given:",
        "exampleInputs1": "k = 3, rowConditions = [[1,2],[3,2]], colConditions = [[2,1],[3,2]]",
        "exampleOutputs1": "[[3,0,0],[0,0,1],[0,2,0]]",
        "exampleInputs2": "k = 3, rowConditions = [[1,2],[2,3],[3,1],[2,3]], colConditions = [[2,1]]",
        "exampleOutputs2": "[]"
    },
    {
        "id": 2392,
        "title": "2392. Build a Matrix With Conditions",
        "description": "You have n robots. You are given two 0-indexed integer arrays, chargeTimes and runningCosts, both of length n. The ith robot costs chargeTimes[i] units to charge and costs runningCosts[i] units to run. You are also given an integer budget.",
        "exampleInputs1": "chargeTimes = [3,6,1,3,4], runningCosts = [2,1,3,4,5], budget = 25",
        "exampleOutputs1": "3",
        "exampleInputs2": "chargeTimes = [11,12,19], runningCosts = [10,8,7], budget = 19",
        "exampleOutputs2": "0"
    },
    {
        "id": 2398,
        "title": "2398. Maximum Number of Robots Within Budget",
        "description": "You are given an integer n. There are n rooms numbered from 0 to n - 1.",
        "exampleInputs1": "n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]]",
        "exampleOutputs1": "0",
        "exampleInputs2": "n = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]]",
        "exampleOutputs2": "1"
    },
    {
        "id": 2402,
        "title": "2402. Meeting Rooms III",
        "description": "You are given an integer array nums and an integer k.",
        "exampleInputs1": "nums = [4,2,1,4,3,4,5,8,15], k = 3",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [7,4,5,1,8,12,4,7], k = 5",
        "exampleOutputs2": "4",
        "exampleInputs3": "nums = [1,5], k = 1",
        "exampleOutputs3": "1"
    },
    {
        "id": 2407,
        "title": "2407. Longest Increasing Subsequence II",
        "description": "You have n robots. You are given two 0-indexed integer arrays, chargeTimes and runningCosts, both of length n. The ith robot costs chargeTimes[i] units to charge and costs runningCosts[i] units to run. You are also given an integer budget.",
        "exampleInputs1": "chargeTimes = [3,6,1,3,4], runningCosts = [2,1,3,4,5], budget = 25",
        "exampleOutputs1": "3",
        "exampleInputs2": "chargeTimes = [11,12,19], runningCosts = [10,8,7], budget = 19",
        "exampleOutputs2": "0"
    },
    {
        "id": 2398,
        "title": "2398. Maximum Number of Robots Within Budget",
        "description": "You are given an integer n. There are n rooms numbered from 0 to n - 1.",
        "exampleInputs1": "n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]]",
        "exampleOutputs1": "0",
        "exampleInputs2": "n = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]]",
        "exampleOutputs2": "1"
    },
    {
        "id": 2402,
        "title": "2402. Meeting Rooms III",
        "description": "You are given an integer array nums and an integer k.",
        "exampleInputs1": "nums = [4,2,1,4,3,4,5,8,15], k = 3",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [7,4,5,1,8,12,4,7], k = 5",
        "exampleOutputs2": "4",
        "exampleInputs3": "nums = [1,5], k = 1",
        "exampleOutputs3": "1"
    },
    {
        "id": 2407,
        "title": "2407. Longest Increasing Subsequence II",
        "description": "You are given a 0-indexed 2D integer array transactions, where transactions[i] = [costi, cashbacki].",
        "exampleInputs1": "transactions = [[2,1],[5,0],[4,2]]",
        "exampleOutputs1": "10",
        "exampleInputs2": "transactions = [[3,0],[0,3]]",
        "exampleOutputs2": "3"
    },
    {
        "id": 2412,
        "title": "2412. Minimum Money Required Before Transactions",
        "description": "You are given an integer n. There are n rooms numbered from 0 to n - 1.",
        "exampleInputs1": "n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]]",
        "exampleOutputs1": "0",
        "exampleInputs2": "n = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]]",
        "exampleOutputs2": "1"
    },
    {
        "id": 2402,
        "title": "2402. Meeting Rooms III",
        "description": "You are given an integer array nums and an integer k.",
        "exampleInputs1": "nums = [4,2,1,4,3,4,5,8,15], k = 3",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [7,4,5,1,8,12,4,7], k = 5",
        "exampleOutputs2": "4",
        "exampleInputs3": "nums = [1,5], k = 1",
        "exampleOutputs3": "1"
    },
    {
        "id": 2407,
        "title": "2407. Longest Increasing Subsequence II",
        "description": "You are given a 0-indexed 2D integer array transactions, where transactions[i] = [costi, cashbacki].",
        "exampleInputs1": "transactions = [[2,1],[5,0],[4,2]]",
        "exampleOutputs1": "10",
        "exampleInputs2": "transactions = [[3,0],[0,3]]",
        "exampleOutputs2": "3"
    },
    {
        "id": 2412,
        "title": "2412. Minimum Money Required Before Transactions",
        "description": "You are given an array words of size n consisting of non-empty strings.",
        "exampleInputs1": "words = [\"abc\",\"ab\",\"bc\",\"b\"]",
        "exampleOutputs1": "[5,4,3,2]",
        "exampleInputs2": "words = [\"abcd\"]",
        "exampleOutputs2": "[4]"
    },
    {
        "id": 2416,
        "title": "2416. Sum of Prefix Scores of Strings",
        "description": "You are given an integer array nums and an integer k.",
        "exampleInputs1": "nums = [4,2,1,4,3,4,5,8,15], k = 3",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [7,4,5,1,8,12,4,7], k = 5",
        "exampleOutputs2": "4",
        "exampleInputs3": "nums = [1,5], k = 1",
        "exampleOutputs3": "1"
    },
    {
        "id": 2407,
        "title": "2407. Longest Increasing Subsequence II",
        "description": "You are given a 0-indexed 2D integer array transactions, where transactions[i] = [costi, cashbacki].",
        "exampleInputs1": "transactions = [[2,1],[5,0],[4,2]]",
        "exampleOutputs1": "10",
        "exampleInputs2": "transactions = [[3,0],[0,3]]",
        "exampleOutputs2": "3"
    },
    {
        "id": 2412,
        "title": "2412. Minimum Money Required Before Transactions",
        "description": "You are given an array words of size n consisting of non-empty strings.",
        "exampleInputs1": "words = [\"abc\",\"ab\",\"bc\",\"b\"]",
        "exampleOutputs1": "[5,4,3,2]",
        "exampleInputs2": "words = [\"abcd\"]",
        "exampleOutputs2": "[4]"
    },
    {
        "id": 2416,
        "title": "2416. Sum of Prefix Scores of Strings",
        "description": "There is a tree (i.e. a connected, undirected graph with no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges.",
        "exampleInputs1": "vals = [1,3,2,1,3], edges = [[0,1],[0,2],[2,3],[2,4]]",
        "exampleOutputs1": "6",
        "exampleInputs2": "vals = [1,1,2,2,3], edges = [[0,1],[1,2],[2,3],[2,4]]",
        "exampleOutputs2": "7",
        "exampleInputs3": "vals = [1], edges = []",
        "exampleOutputs3": "1"
    },
    {
        "id": 2421,
        "title": "2421. Number of Good Paths",
        "description": "You have n robots. You are given two 0-indexed integer arrays, chargeTimes and runningCosts, both of length n. The ith robot costs chargeTimes[i] units to charge and costs runningCosts[i] units to run. You are also given an integer budget.",
        "exampleInputs1": "chargeTimes = [3,6,1,3,4], runningCosts = [2,1,3,4,5], budget = 25",
        "exampleOutputs1": "3",
        "exampleInputs2": "chargeTimes = [11,12,19], runningCosts = [10,8,7], budget = 19",
        "exampleOutputs2": "0"
    },
    {
        "id": 2398,
        "title": "2398. Maximum Number of Robots Within Budget",
        "description": "You are given an integer n. There are n rooms numbered from 0 to n - 1.",
        "exampleInputs1": "n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]]",
        "exampleOutputs1": "0",
        "exampleInputs2": "n = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]]",
        "exampleOutputs2": "1"
    },
    {
        "id": 2402,
        "title": "2402. Meeting Rooms III",
        "description": "You are given an integer array nums and an integer k.",
        "exampleInputs1": "nums = [4,2,1,4,3,4,5,8,15], k = 3",
        "exampleOutputs1": "5",
        "exampleInputs2": "nums = [7,4,5,1,8,12,4,7], k = 5",
        "exampleOutputs2": "4",
        "exampleInputs3": "nums = [1,5], k = 1",
        "exampleOutputs3": "1"
    },
    {
        "id": 2407,
        "title": "2407. Longest Increasing Subsequence II",
        "description": "You are given a 0-indexed 2D integer array transactions, where transactions[i] = [costi, cashbacki].",
        "exampleInputs1": "transactions = [[2,1],[5,0],[4,2]]",
        "exampleOutputs1": "10",
        "exampleInputs2": "transactions = [[3,0],[0,3]]",
        "exampleOutputs2": "3"
    },
    {
        "id": 2412,
        "title": "2412. Minimum Money Required Before Transactions",
        "description": "You are given an array words of size n consisting of non-empty strings.",
        "exampleInputs1": "words = [\"abc\",\"ab\",\"bc\",\"b\"]",
        "exampleOutputs1": "[5,4,3,2]",
        "exampleInputs2": "words = [\"abcd\"]",
        "exampleOutputs2": "[4]"
    },
    {
        "id": 2416,
        "title": "2416. Sum of Prefix Scores of Strings",
        "description": "There is a tree (i.e. a connected, undirected graph with no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges.",
        "exampleInputs1": "vals = [1,3,2,1,3], edges = [[0,1],[0,2],[2,3],[2,4]]",
        "exampleOutputs1": "6",
        "exampleInputs2": "vals = [1,1,2,2,3], edges = [[0,1],[1,2],[2,3],[2,4]]",
        "exampleOutputs2": "7",
        "exampleInputs3": "vals = [1], edges = []",
        "exampleOutputs3": "1"
    },
    {
        "id": 2421,
        "title": "2421. Number of Good Paths",
        "description": "You are given two 0-indexed integer arrays nums1 and nums2, each of size n, and an integer diff. Find the number of pairs (i, j) such that:",
        "exampleInputs1": "nums1 = [3,2,5], nums2 = [2,2,1], diff = 1",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums1 = [3,-1], nums2 = [-2,2], diff = -1",
        "exampleOutputs2": "0"
    },
    {
        "id": 2426,
        "title": "2426. Number of Pairs Satisfying Inequality",
        "description": "You are given a string s consisting of only lowercase English letters. In one operation, you can:",
        "exampleInputs1": "s = \"abcabcdabc\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"aaabaab\"",
        "exampleOutputs2": "4",
        "exampleInputs3": "s = \"aaaaa\"",
        "exampleOutputs3": "5"
    },
    {
        "id": 2430,
        "title": "2430. Maximum Deletions on a String",
        "description": "There is a tree (i.e. a connected, undirected graph with no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges.",
        "exampleInputs1": "vals = [1,3,2,1,3], edges = [[0,1],[0,2],[2,3],[2,4]]",
        "exampleOutputs1": "6",
        "exampleInputs2": "vals = [1,1,2,2,3], edges = [[0,1],[1,2],[2,3],[2,4]]",
        "exampleOutputs2": "7",
        "exampleInputs3": "vals = [1], edges = []",
        "exampleOutputs3": "1"
    },
    {
        "id": 2421,
        "title": "2421. Number of Good Paths",
        "description": "You are given two 0-indexed integer arrays nums1 and nums2, each of size n, and an integer diff. Find the number of pairs (i, j) such that:",
        "exampleInputs1": "nums1 = [3,2,5], nums2 = [2,2,1], diff = 1",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums1 = [3,-1], nums2 = [-2,2], diff = -1",
        "exampleOutputs2": "0"
    },
    {
        "id": 2426,
        "title": "2426. Number of Pairs Satisfying Inequality",
        "description": "You are given a string s consisting of only lowercase English letters. In one operation, you can:",
        "exampleInputs1": "s = \"abcabcdabc\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"aaabaab\"",
        "exampleOutputs2": "4",
        "exampleInputs3": "s = \"aaaaa\"",
        "exampleOutputs3": "5"
    },
    {
        "id": 2430,
        "title": "2430. Maximum Deletions on a String",
        "description": "You are given a 0-indexed m x n integer matrix grid and an integer k. You are currently at position (0, 0) and you want to reach position (m - 1, n - 1) moving only down or right.",
        "exampleInputs1": "grid = [[5,2,4],[3,0,5],[0,7,2]], k = 3",
        "exampleOutputs1": "2",
        "exampleInputs2": "grid = [[0,0]], k = 5",
        "exampleOutputs2": "1",
        "exampleInputs3": "grid = [[7,3,4,9],[2,3,6,2],[2,3,7,0]], k = 1",
        "exampleOutputs3": "10"
    },
    {
        "id": 2435,
        "title": "2435. Paths in Matrix Whose Sum Is Divisible by K",
        "description": "You are given a 0-indexed 2D integer array transactions, where transactions[i] = [costi, cashbacki].",
        "exampleInputs1": "transactions = [[2,1],[5,0],[4,2]]",
        "exampleOutputs1": "10",
        "exampleInputs2": "transactions = [[3,0],[0,3]]",
        "exampleOutputs2": "3"
    },
    {
        "id": 2412,
        "title": "2412. Minimum Money Required Before Transactions",
        "description": "You are given an array words of size n consisting of non-empty strings.",
        "exampleInputs1": "words = [\"abc\",\"ab\",\"bc\",\"b\"]",
        "exampleOutputs1": "[5,4,3,2]",
        "exampleInputs2": "words = [\"abcd\"]",
        "exampleOutputs2": "[4]"
    },
    {
        "id": 2416,
        "title": "2416. Sum of Prefix Scores of Strings",
        "description": "There is a tree (i.e. a connected, undirected graph with no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges.",
        "exampleInputs1": "vals = [1,3,2,1,3], edges = [[0,1],[0,2],[2,3],[2,4]]",
        "exampleOutputs1": "6",
        "exampleInputs2": "vals = [1,1,2,2,3], edges = [[0,1],[1,2],[2,3],[2,4]]",
        "exampleOutputs2": "7",
        "exampleInputs3": "vals = [1], edges = []",
        "exampleOutputs3": "1"
    },
    {
        "id": 2421,
        "title": "2421. Number of Good Paths",
        "description": "You are given two 0-indexed integer arrays nums1 and nums2, each of size n, and an integer diff. Find the number of pairs (i, j) such that:",
        "exampleInputs1": "nums1 = [3,2,5], nums2 = [2,2,1], diff = 1",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums1 = [3,-1], nums2 = [-2,2], diff = -1",
        "exampleOutputs2": "0"
    },
    {
        "id": 2426,
        "title": "2426. Number of Pairs Satisfying Inequality",
        "description": "You are given a string s consisting of only lowercase English letters. In one operation, you can:",
        "exampleInputs1": "s = \"abcabcdabc\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"aaabaab\"",
        "exampleOutputs2": "4",
        "exampleInputs3": "s = \"aaaaa\"",
        "exampleOutputs3": "5"
    },
    {
        "id": 2430,
        "title": "2430. Maximum Deletions on a String",
        "description": "You are given a 0-indexed m x n integer matrix grid and an integer k. You are currently at position (0, 0) and you want to reach position (m - 1, n - 1) moving only down or right.",
        "exampleInputs1": "grid = [[5,2,4],[3,0,5],[0,7,2]], k = 3",
        "exampleOutputs1": "2",
        "exampleInputs2": "grid = [[0,0]], k = 5",
        "exampleOutputs2": "1",
        "exampleInputs3": "grid = [[7,3,4,9],[2,3,6,2],[2,3,7,0]], k = 1",
        "exampleOutputs3": "10"
    },
    {
        "id": 2435,
        "title": "2435. Paths in Matrix Whose Sum Is Divisible by K",
        "description": "There is an undirected tree with n nodes labeled from 0 to n - 1.",
        "exampleInputs1": "nums = [6,2,2,2,6], edges = [[0,1],[1,2],[1,3],[3,4]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [2], edges = []",
        "exampleOutputs2": "0"
    },
    {
        "id": 2440,
        "title": "2440. Create Components With Same Value",
        "description": "You are given an integer array nums and two integers minK and maxK.",
        "exampleInputs1": "nums = [1,3,5,2,7,5], minK = 1, maxK = 5",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,1,1,1], minK = 1, maxK = 1",
        "exampleOutputs2": "10"
    },
    {
        "id": 2444,
        "title": "2444. Count Subarrays With Fixed Bounds",
        "description": "There is an undirected tree with n nodes labeled from 0 to n - 1.",
        "exampleInputs1": "nums = [6,2,2,2,6], edges = [[0,1],[1,2],[1,3],[3,4]]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [2], edges = []",
        "exampleOutputs2": "0"
    },
    {
        "id": 2440,
        "title": "2440. Create Components With Same Value",
        "description": "You are given an integer array nums and two integers minK and maxK.",
        "exampleInputs1": "nums = [1,3,5,2,7,5], minK = 1, maxK = 5",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,1,1,1], minK = 1, maxK = 1",
        "exampleOutputs2": "10"
    },
    {
        "id": 2444,
        "title": "2444. Count Subarrays With Fixed Bounds",
        "description": "You are given two 0-indexed arrays nums and cost consisting each of n positive integers.",
        "exampleInputs1": "nums = [1,3,5,2], cost = [2,3,1,14]",
        "exampleOutputs1": "8",
        "exampleInputs2": "nums = [2,2,2,2,2], cost = [4,2,8,1,3]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2448,
        "title": "2448. Minimum Cost to Make Array Equal",
        "description": "You are given two positive integer arrays nums and target, of the same length.",
        "exampleInputs1": "nums = [8,12,6], target = [2,14,10]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,2,5], target = [4,1,3]",
        "exampleOutputs2": "1",
        "exampleInputs3": "nums = [1,1,1,1,1], target = [1,1,1,1,1]",
        "exampleOutputs3": "0"
    },
    {
        "id": 2449,
        "title": "2449. Minimum Number of Operations to Make Arrays Similar",
        "description": "You are given an integer array nums and two integers minK and maxK.",
        "exampleInputs1": "nums = [1,3,5,2,7,5], minK = 1, maxK = 5",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,1,1,1], minK = 1, maxK = 1",
        "exampleOutputs2": "10"
    },
    {
        "id": 2444,
        "title": "2444. Count Subarrays With Fixed Bounds",
        "description": "You are given two 0-indexed arrays nums and cost consisting each of n positive integers.",
        "exampleInputs1": "nums = [1,3,5,2], cost = [2,3,1,14]",
        "exampleOutputs1": "8",
        "exampleInputs2": "nums = [2,2,2,2,2], cost = [4,2,8,1,3]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2448,
        "title": "2448. Minimum Cost to Make Array Equal",
        "description": "You are given two positive integer arrays nums and target, of the same length.",
        "exampleInputs1": "nums = [8,12,6], target = [2,14,10]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,2,5], target = [4,1,3]",
        "exampleOutputs2": "1",
        "exampleInputs3": "nums = [1,1,1,1,1], target = [1,1,1,1,1]",
        "exampleOutputs3": "0"
    },
    {
        "id": 2449,
        "title": "2449. Minimum Number of Operations to Make Arrays Similar",
        "description": "You are given a 0-indexed array of non-negative integers nums. For each integer in nums, you must find its respective second greater integer.",
        "exampleInputs1": "nums = [2,4,0,9,6]",
        "exampleOutputs1": "[9,6,6,-1,-1]",
        "exampleInputs2": "nums = [3,3]",
        "exampleOutputs2": "[-1,-1]"
    },
    {
        "id": 2454,
        "title": "2454. Next Greater Element IV",
        "description": "You are given two 0-indexed arrays nums and cost consisting each of n positive integers.",
        "exampleInputs1": "nums = [1,3,5,2], cost = [2,3,1,14]",
        "exampleOutputs1": "8",
        "exampleInputs2": "nums = [2,2,2,2,2], cost = [4,2,8,1,3]",
        "exampleOutputs2": "0"
    },
    {
        "id": 2448,
        "title": "2448. Minimum Cost to Make Array Equal",
        "description": "You are given two positive integer arrays nums and target, of the same length.",
        "exampleInputs1": "nums = [8,12,6], target = [2,14,10]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,2,5], target = [4,1,3]",
        "exampleOutputs2": "1",
        "exampleInputs3": "nums = [1,1,1,1,1], target = [1,1,1,1,1]",
        "exampleOutputs3": "0"
    },
    {
        "id": 2449,
        "title": "2449. Minimum Number of Operations to Make Arrays Similar",
        "description": "You are given a 0-indexed array of non-negative integers nums. For each integer in nums, you must find its respective second greater integer.",
        "exampleInputs1": "nums = [2,4,0,9,6]",
        "exampleOutputs1": "[9,6,6,-1,-1]",
        "exampleInputs2": "nums = [3,3]",
        "exampleOutputs2": "[-1,-1]"
    },
    {
        "id": 2454,
        "title": "2454. Next Greater Element IV",
        "description": "You are given the root of a binary tree with n nodes. Each node is assigned a unique value from 1 to n. You are also given an array queries of size m.",
        "exampleInputs1": "root = [1,3,4,2,null,6,5,null,null,null,null,null,7], queries = [4]",
        "exampleOutputs1": "[2]",
        "exampleInputs2": "root = [5,8,9,2,1,3,7,4,6], queries = [3,2,4,8]",
        "exampleOutputs2": "[3,2,3,2]"
    },
    {
        "id": 2458,
        "title": "2458. Height of Binary Tree After Subtree Removal Queries",
        "description": "You are given two positive integer arrays nums and target, of the same length.",
        "exampleInputs1": "nums = [8,12,6], target = [2,14,10]",
        "exampleOutputs1": "2",
        "exampleInputs2": "nums = [1,2,5], target = [4,1,3]",
        "exampleOutputs2": "1",
        "exampleInputs3": "nums = [1,1,1,1,1], target = [1,1,1,1,1]",
        "exampleOutputs3": "0"
    },
    {
        "id": 2449,
        "title": "2449. Minimum Number of Operations to Make Arrays Similar",
        "description": "You are given a 0-indexed array of non-negative integers nums. For each integer in nums, you must find its respective second greater integer.",
        "exampleInputs1": "nums = [2,4,0,9,6]",
        "exampleOutputs1": "[9,6,6,-1,-1]",
        "exampleInputs2": "nums = [3,3]",
        "exampleOutputs2": "[-1,-1]"
    },
    {
        "id": 2454,
        "title": "2454. Next Greater Element IV",
        "description": "You are given the root of a binary tree with n nodes. Each node is assigned a unique value from 1 to n. You are also given an array queries of size m.",
        "exampleInputs1": "root = [1,3,4,2,null,6,5,null,null,null,null,null,7], queries = [4]",
        "exampleOutputs1": "[2]",
        "exampleInputs2": "root = [5,8,9,2,1,3,7,4,6], queries = [3,2,4,8]",
        "exampleOutputs2": "[3,2,3,2]"
    },
    {
        "id": 2458,
        "title": "2458. Height of Binary Tree After Subtree Removal Queries",
        "description": "There are some robots and factories on the X-axis. You are given an integer array robot where robot[i] is the position of the ith robot. You are also given a 2D integer array factory where factory[j] = [positionj, limitj] indicates that positionj is the position of the jth factory and that the jth factory can repair at most limitj robots.",
        "exampleInputs1": "robot = [0,4,6], factory = [[2,2],[6,2]]",
        "exampleOutputs1": "4",
        "exampleInputs2": "robot = [1,-1], factory = [[-2,1],[2,1]]",
        "exampleOutputs2": "2"
    },
    {
        "id": 2463,
        "title": "2463. Minimum Total Distance Traveled",
        "description": "You are given a 0-indexed array of non-negative integers nums. For each integer in nums, you must find its respective second greater integer.",
        "exampleInputs1": "nums = [2,4,0,9,6]",
        "exampleOutputs1": "[9,6,6,-1,-1]",
        "exampleInputs2": "nums = [3,3]",
        "exampleOutputs2": "[-1,-1]"
    },
    {
        "id": 2454,
        "title": "2454. Next Greater Element IV",
        "description": "You are given the root of a binary tree with n nodes. Each node is assigned a unique value from 1 to n. You are also given an array queries of size m.",
        "exampleInputs1": "root = [1,3,4,2,null,6,5,null,null,null,null,null,7], queries = [4]",
        "exampleOutputs1": "[2]",
        "exampleInputs2": "root = [5,8,9,2,1,3,7,4,6], queries = [3,2,4,8]",
        "exampleOutputs2": "[3,2,3,2]"
    },
    {
        "id": 2458,
        "title": "2458. Height of Binary Tree After Subtree Removal Queries",
        "description": "There are some robots and factories on the X-axis. You are given an integer array robot where robot[i] is the position of the ith robot. You are also given a 2D integer array factory where factory[j] = [positionj, limitj] indicates that positionj is the position of the jth factory and that the jth factory can repair at most limitj robots.",
        "exampleInputs1": "robot = [0,4,6], factory = [[2,2],[6,2]]",
        "exampleOutputs1": "4",
        "exampleInputs2": "robot = [1,-1], factory = [[-2,1],[2,1]]",
        "exampleOutputs2": "2"
    },
    {
        "id": 2463,
        "title": "2463. Minimum Total Distance Traveled",
        "description": "You are given a string, message, and a positive integer, limit.",
        "exampleInputs1": "message = \"this is really a very awesome message\", limit = 9",
        "exampleOutputs1": "[\"thi<1/14>\",\"s i<2/14>\",\"s r<3/14>\",\"eal<4/14>\",\"ly <5/14>\",\"a v<6/14>\",\"ery<7/14>\",\" aw<8/14>\",\"eso<9/14>\",\"me<10/14>\",\" m<11/14>\",\"es<12/14>\",\"sa<13/14>\",\"ge<14/14>\"]",
        "exampleInputs2": "message = \"short message\", limit = 15",
        "exampleOutputs2": "[\"short mess<1/2>\",\"age<2/2>\"]"
    },
    {
        "id": 2468,
        "title": "2468. Split Message Based on Limit",
        "description": "You are given the root of a binary tree with n nodes. Each node is assigned a unique value from 1 to n. You are also given an array queries of size m.",
        "exampleInputs1": "root = [1,3,4,2,null,6,5,null,null,null,null,null,7], queries = [4]",
        "exampleOutputs1": "[2]",
        "exampleInputs2": "root = [5,8,9,2,1,3,7,4,6], queries = [3,2,4,8]",
        "exampleOutputs2": "[3,2,3,2]"
    },
    {
        "id": 2458,
        "title": "2458. Height of Binary Tree After Subtree Removal Queries",
        "description": "There are some robots and factories on the X-axis. You are given an integer array robot where robot[i] is the position of the ith robot. You are also given a 2D integer array factory where factory[j] = [positionj, limitj] indicates that positionj is the position of the jth factory and that the jth factory can repair at most limitj robots.",
        "exampleInputs1": "robot = [0,4,6], factory = [[2,2],[6,2]]",
        "exampleOutputs1": "4",
        "exampleInputs2": "robot = [1,-1], factory = [[-2,1],[2,1]]",
        "exampleOutputs2": "2"
    },
    {
        "id": 2463,
        "title": "2463. Minimum Total Distance Traveled",
        "description": "You are given a string, message, and a positive integer, limit.",
        "exampleInputs1": "message = \"this is really a very awesome message\", limit = 9",
        "exampleOutputs1": "[\"thi<1/14>\",\"s i<2/14>\",\"s r<3/14>\",\"eal<4/14>\",\"ly <5/14>\",\"a v<6/14>\",\"ery<7/14>\",\" aw<8/14>\",\"eso<9/14>\",\"me<10/14>\",\" m<11/14>\",\"es<12/14>\",\"sa<13/14>\",\"ge<14/14>\"]",
        "exampleInputs2": "message = \"short message\", limit = 15",
        "exampleOutputs2": "[\"short mess<1/2>\",\"age<2/2>\"]"
    },
    {
        "id": 2468,
        "title": "2468. Split Message Based on Limit",
        "description": "You are given a string s and a positive integer k.",
        "exampleInputs1": "s = \"abaccdbbd\", k = 3",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"adbcda\", k = 2",
        "exampleOutputs2": "0"
    },
    {
        "id": 2472,
        "title": "2472. Maximum Number of Non-overlapping Palindrome Substrings",
        "description": "There are some robots and factories on the X-axis. You are given an integer array robot where robot[i] is the position of the ith robot. You are also given a 2D integer array factory where factory[j] = [positionj, limitj] indicates that positionj is the position of the jth factory and that the jth factory can repair at most limitj robots.",
        "exampleInputs1": "robot = [0,4,6], factory = [[2,2],[6,2]]",
        "exampleOutputs1": "4",
        "exampleInputs2": "robot = [1,-1], factory = [[-2,1],[2,1]]",
        "exampleOutputs2": "2"
    },
    {
        "id": 2463,
        "title": "2463. Minimum Total Distance Traveled",
        "description": "You are given a string, message, and a positive integer, limit.",
        "exampleInputs1": "message = \"this is really a very awesome message\", limit = 9",
        "exampleOutputs1": "[\"thi<1/14>\",\"s i<2/14>\",\"s r<3/14>\",\"eal<4/14>\",\"ly <5/14>\",\"a v<6/14>\",\"ery<7/14>\",\" aw<8/14>\",\"eso<9/14>\",\"me<10/14>\",\" m<11/14>\",\"es<12/14>\",\"sa<13/14>\",\"ge<14/14>\"]",
        "exampleInputs2": "message = \"short message\", limit = 15",
        "exampleOutputs2": "[\"short mess<1/2>\",\"age<2/2>\"]"
    },
    {
        "id": 2468,
        "title": "2468. Split Message Based on Limit",
        "description": "You are given a string s and a positive integer k.",
        "exampleInputs1": "s = \"abaccdbbd\", k = 3",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"adbcda\", k = 2",
        "exampleOutputs2": "0"
    },
    {
        "id": 2472,
        "title": "2472. Maximum Number of Non-overlapping Palindrome Substrings",
        "description": "You are given a string s that consists of the digits '1' to '9' and two integers k and minLength.",
        "exampleInputs1": "s = \"23542185131\", k = 3, minLength = 2",
        "exampleOutputs1": "3",
        "exampleInputs2": "s = \"23542185131\", k = 3, minLength = 3",
        "exampleOutputs2": "1",
        "exampleInputs3": "s = \"3312958\", k = 3, minLength = 1",
        "exampleOutputs3": "1"
    },
    {
        "id": 2478,
        "title": "2478. Number of Beautiful Partitions",
        "description": "You are given a string, message, and a positive integer, limit.",
        "exampleInputs1": "message = \"this is really a very awesome message\", limit = 9",
        "exampleOutputs1": "[\"thi<1/14>\",\"s i<2/14>\",\"s r<3/14>\",\"eal<4/14>\",\"ly <5/14>\",\"a v<6/14>\",\"ery<7/14>\",\" aw<8/14>\",\"eso<9/14>\",\"me<10/14>\",\" m<11/14>\",\"es<12/14>\",\"sa<13/14>\",\"ge<14/14>\"]",
        "exampleInputs2": "message = \"short message\", limit = 15",
        "exampleOutputs2": "[\"short mess<1/2>\",\"age<2/2>\"]"
    },
    {
        "id": 2468,
        "title": "2468. Split Message Based on Limit",
        "description": "You are given a string s and a positive integer k.",
        "exampleInputs1": "s = \"abaccdbbd\", k = 3",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"adbcda\", k = 2",
        "exampleOutputs2": "0"
    },
    {
        "id": 2472,
        "title": "2472. Maximum Number of Non-overlapping Palindrome Substrings",
        "description": "You are given a string s that consists of the digits '1' to '9' and two integers k and minLength.",
        "exampleInputs1": "s = \"23542185131\", k = 3, minLength = 2",
        "exampleOutputs1": "3",
        "exampleInputs2": "s = \"23542185131\", k = 3, minLength = 3",
        "exampleOutputs2": "1",
        "exampleInputs3": "s = \"3312958\", k = 3, minLength = 1",
        "exampleOutputs3": "1"
    },
    {
        "id": 2478,
        "title": "2478. Number of Beautiful Partitions",
        "description": "Given a string of digits s, return the number of palindromic subsequences of s having length 5. Since the answer may be very large, return it modulo 109 + 7.",
        "exampleInputs1": "s = \"103301\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"0000000\"",
        "exampleOutputs2": "21",
        "exampleInputs3": "s = \"9999900000\"",
        "exampleOutputs3": "2"
    },
    {
        "id": 2484,
        "title": "2484. Count Palindromic Subsequences",
        "description": "You are given a string s and a positive integer k.",
        "exampleInputs1": "s = \"abaccdbbd\", k = 3",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"adbcda\", k = 2",
        "exampleOutputs2": "0"
    },
    {
        "id": 2472,
        "title": "2472. Maximum Number of Non-overlapping Palindrome Substrings",
        "description": "You are given a string s that consists of the digits '1' to '9' and two integers k and minLength.",
        "exampleInputs1": "s = \"23542185131\", k = 3, minLength = 2",
        "exampleOutputs1": "3",
        "exampleInputs2": "s = \"23542185131\", k = 3, minLength = 3",
        "exampleOutputs2": "1",
        "exampleInputs3": "s = \"3312958\", k = 3, minLength = 1",
        "exampleOutputs3": "1"
    },
    {
        "id": 2478,
        "title": "2478. Number of Beautiful Partitions",
        "description": "Given a string of digits s, return the number of palindromic subsequences of s having length 5. Since the answer may be very large, return it modulo 109 + 7.",
        "exampleInputs1": "s = \"103301\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"0000000\"",
        "exampleOutputs2": "21",
        "exampleInputs3": "s = \"9999900000\"",
        "exampleOutputs3": "2"
    },
    {
        "id": 2484,
        "title": "2484. Count Palindromic Subsequences",
        "description": "You are given an array nums of size n consisting of distinct integers from 1 to n and a positive integer k.",
        "exampleInputs1": "nums = [3,2,1,4,5], k = 4",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [2,3,1], k = 3",
        "exampleOutputs2": "1"
    },
    {
        "id": 2488,
        "title": "2488. Count Subarrays With Median K",
        "description": "You are given a string s that consists of the digits '1' to '9' and two integers k and minLength.",
        "exampleInputs1": "s = \"23542185131\", k = 3, minLength = 2",
        "exampleOutputs1": "3",
        "exampleInputs2": "s = \"23542185131\", k = 3, minLength = 3",
        "exampleOutputs2": "1",
        "exampleInputs3": "s = \"3312958\", k = 3, minLength = 1",
        "exampleOutputs3": "1"
    },
    {
        "id": 2478,
        "title": "2478. Number of Beautiful Partitions",
        "description": "Given a string of digits s, return the number of palindromic subsequences of s having length 5. Since the answer may be very large, return it modulo 109 + 7.",
        "exampleInputs1": "s = \"103301\"",
        "exampleOutputs1": "2",
        "exampleInputs2": "s = \"0000000\"",
        "exampleOutputs2": "21",
        "exampleInputs3": "s = \"9999900000\"",
        "exampleOutputs3": "2"
    },
    {
        "id": 2484,
        "title": "2484. Count Palindromic Subsequences",
        "description": "You are given an array nums of size n consisting of distinct integers from 1 to n and a positive integer k.",
        "exampleInputs1": "nums = [3,2,1,4,5], k = 4",
        "exampleOutputs1": "3",
        "exampleInputs2": "nums = [2,3,1], k = 3",
        "exampleOutputs2": "1"
    },
    {
        "id": 2488,
        "title": "2488. Count Subarrays With Median K",
        "description": "You are given a positive integer n representing the number of nodes in an undirected graph. The nodes are labeled from 1 to n.",
        "exampleInputs1": "n = 6, edges = [[1,2],[1,4],[1,5],[2,6],[2,3],[4,6]]",
        "exampleOutputs1": "4",
        "exampleInputs2": "n = 3, edges = [[1,2],[2,3],[3,1]]",
        "exampleOutputs2": "-1"
    }
]
